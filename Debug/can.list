
can.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006dfc  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080070a8  080070a8  000170a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007114  08007114  00017114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08007118  08007118  00017118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  0800711c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000290  24000010  0800712c  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  240002a0  0800712c  000202a0  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001d378  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002c1c  00000000  00000000  0003d3b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000016f0  00000000  00000000  0003ffd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000015b8  00000000  00000000  000416c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00033a0c  00000000  00000000  00042c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001aad4  00000000  00000000  0007668c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00154efe  00000000  00000000  00091160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001e605e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006428  00000000  00000000  001e60b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08007090 	.word	0x08007090

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	08007090 	.word	0x08007090

080002ec <HAL_FDCAN_RxFifo0Callback>:
uint8_t TxData[8];

int datacheck = 0;

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b09c      	sub	sp, #112	; 0x70
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
 80002f4:	6039      	str	r1, [r7, #0]
  uint8_t RxData[64];
  FDCAN_RxHeaderTypeDef RxHeader;
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	f003 0301 	and.w	r3, r3, #1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d014      	beq.n	800032a <HAL_FDCAN_RxFifo0Callback+0x3e>
  {
    /* Retrieve Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000300:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000304:	f107 0208 	add.w	r2, r7, #8
 8000308:	2140      	movs	r1, #64	; 0x40
 800030a:	6878      	ldr	r0, [r7, #4]
 800030c:	f001 fe56 	bl	8001fbc <HAL_FDCAN_GetRxMessage>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <HAL_FDCAN_RxFifo0Callback+0x2e>
    {
      Error_Handler();
 8000316:	f000 fd3d 	bl	8000d94 <Error_Handler>
    }
    if(RxHeader.Identifier == 0x321) // 0x200 for RCVR 0x201 for TXR
 800031a:	68bb      	ldr	r3, [r7, #8]
 800031c:	f240 3221 	movw	r2, #801	; 0x321
 8000320:	4293      	cmp	r3, r2
 8000322:	d102      	bne.n	800032a <HAL_FDCAN_RxFifo0Callback+0x3e>
    {
      datacheck = 1;
 8000324:	4b03      	ldr	r3, [pc, #12]	; (8000334 <HAL_FDCAN_RxFifo0Callback+0x48>)
 8000326:	2201      	movs	r2, #1
 8000328:	601a      	str	r2, [r3, #0]
    }
  }
}
 800032a:	bf00      	nop
 800032c:	3770      	adds	r7, #112	; 0x70
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	2400024c 	.word	0x2400024c

08000338 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b08a      	sub	sp, #40	; 0x28
 800033c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800033e:	f001 f98f 	bl	8001660 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000342:	f000 f863 	bl	800040c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000346:	f000 faf1 	bl	800092c <MX_GPIO_Init>
  MX_I2C4_Init();
 800034a:	f000 f971 	bl	8000630 <MX_I2C4_Init>
  MX_LTDC_Init();
 800034e:	f000 f9af 	bl	80006b0 <MX_LTDC_Init>
  MX_OCTOSPI1_Init();
 8000352:	f000 fa5f 	bl	8000814 <MX_OCTOSPI1_Init>
  MX_RTC_Init();
 8000356:	f000 fabf 	bl	80008d8 <MX_RTC_Init>
  MX_FDCAN1_Init();
 800035a:	f000 f8dd 	bl	8000518 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  FDCAN_TxHeaderTypeDef   TxHeader;
  TxHeader.Identifier = 0x103;
 800035e:	f240 1303 	movw	r3, #259	; 0x103
 8000362:	607b      	str	r3, [r7, #4]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 8000364:	2300      	movs	r3, #0
 8000366:	60bb      	str	r3, [r7, #8]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000368:	2300      	movs	r3, #0
 800036a:	60fb      	str	r3, [r7, #12]
  TxHeader.DataLength = FDCAN_DLC_BYTES_8; //FDCAN_DLC_BYTES_8;
 800036c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000370:	613b      	str	r3, [r7, #16]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000372:	2300      	movs	r3, #0
 8000374:	617b      	str	r3, [r7, #20]
  TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8000376:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800037a:	61bb      	str	r3, [r7, #24]
  TxHeader.FDFormat = FDCAN_FD_CAN;
 800037c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000380:	61fb      	str	r3, [r7, #28]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000382:	2300      	movs	r3, #0
 8000384:	623b      	str	r3, [r7, #32]
  TxHeader.MessageMarker = 0;
 8000386:	2300      	movs	r3, #0
 8000388:	627b      	str	r3, [r7, #36]	; 0x24
  TxData[0] = 50;	//ms delay
 800038a:	4b1c      	ldr	r3, [pc, #112]	; (80003fc <main+0xc4>)
 800038c:	2232      	movs	r2, #50	; 0x32
 800038e:	701a      	strb	r2, [r3, #0]
  TxData[1] = 10;		//loop rep
 8000390:	4b1a      	ldr	r3, [pc, #104]	; (80003fc <main+0xc4>)
 8000392:	220a      	movs	r2, #10
 8000394:	705a      	strb	r2, [r3, #1]


  if( HAL_FDCAN_Start( &hfdcan1 ) != HAL_OK)
 8000396:	481a      	ldr	r0, [pc, #104]	; (8000400 <main+0xc8>)
 8000398:	f001 fd8a 	bl	8001eb0 <HAL_FDCAN_Start>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <main+0x6e>
    {
      Error_Handler();
 80003a2:	f000 fcf7 	bl	8000d94 <Error_Handler>
    }
  // Activate the notification, trigger interrupt
    HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, FDCAN_TX_BUFFER0);
 80003a6:	2201      	movs	r2, #1
 80003a8:	2101      	movs	r1, #1
 80003aa:	4815      	ldr	r0, [pc, #84]	; (8000400 <main+0xc8>)
 80003ac:	f001 ff74 	bl	8002298 <HAL_FDCAN_ActivateNotification>
    HAL_FDCAN_ConfigTxDelayCompensation(&hfdcan1, 5, 0);
 80003b0:	2200      	movs	r2, #0
 80003b2:	2105      	movs	r1, #5
 80003b4:	4812      	ldr	r0, [pc, #72]	; (8000400 <main+0xc8>)
 80003b6:	f001 fd34 	bl	8001e22 <HAL_FDCAN_ConfigTxDelayCompensation>
    HAL_FDCAN_EnableTxDelayCompensation(&hfdcan1);
 80003ba:	4811      	ldr	r0, [pc, #68]	; (8000400 <main+0xc8>)
 80003bc:	f001 fd55 	bl	8001e6a <HAL_FDCAN_EnableTxDelayCompensation>
  while (1)
  {
//	  HAL_GPIO_TogglePin(USER_LED2_GPIO_Port, USER_LED2_Pin);
//	  HAL_Delay(1000);

	  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) == HAL_OK)
 80003c0:	1d3b      	adds	r3, r7, #4
 80003c2:	4a0e      	ldr	r2, [pc, #56]	; (80003fc <main+0xc4>)
 80003c4:	4619      	mov	r1, r3
 80003c6:	480e      	ldr	r0, [pc, #56]	; (8000400 <main+0xc8>)
 80003c8:	f001 fd9d 	bl	8001f06 <HAL_FDCAN_AddMessageToTxFifoQ>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d103      	bne.n	80003da <main+0xa2>
	  {
//		  /* Transmission request Error */
//	      Error_Handler();
		  HAL_GPIO_TogglePin(USER_LED2_GPIO_Port, USER_LED2_Pin);
 80003d2:	2104      	movs	r1, #4
 80003d4:	480b      	ldr	r0, [pc, #44]	; (8000404 <main+0xcc>)
 80003d6:	f002 feb0 	bl	800313a <HAL_GPIO_TogglePin>
	  }
	  HAL_Delay(100);
 80003da:	2064      	movs	r0, #100	; 0x64
 80003dc:	f001 f99c 	bl	8001718 <HAL_Delay>


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (datacheck) {
 80003e0:	4b09      	ldr	r3, [pc, #36]	; (8000408 <main+0xd0>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d0eb      	beq.n	80003c0 <main+0x88>
	  // blink the LED
//		  for(int i=0; i<RxData[1]; i++){
			  HAL_GPIO_TogglePin(USER_LED1_GPIO_Port, USER_LED1_Pin);
 80003e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003ec:	4805      	ldr	r0, [pc, #20]	; (8000404 <main+0xcc>)
 80003ee:	f002 fea4 	bl	800313a <HAL_GPIO_TogglePin>
			  HAL_Delay(1000);
 80003f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003f6:	f001 f98f 	bl	8001718 <HAL_Delay>
	  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) == HAL_OK)
 80003fa:	e7e1      	b.n	80003c0 <main+0x88>
 80003fc:	24000244 	.word	0x24000244
 8000400:	2400002c 	.word	0x2400002c
 8000404:	58021800 	.word	0x58021800
 8000408:	2400024c 	.word	0x2400024c

0800040c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b09c      	sub	sp, #112	; 0x70
 8000410:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000412:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000416:	224c      	movs	r2, #76	; 0x4c
 8000418:	2100      	movs	r1, #0
 800041a:	4618      	mov	r0, r3
 800041c:	f006 fe30 	bl	8007080 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000420:	1d3b      	adds	r3, r7, #4
 8000422:	2220      	movs	r2, #32
 8000424:	2100      	movs	r1, #0
 8000426:	4618      	mov	r0, r3
 8000428:	f006 fe2a 	bl	8007080 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 800042c:	4b38      	ldr	r3, [pc, #224]	; (8000510 <SystemClock_Config+0x104>)
 800042e:	f04f 32ff 	mov.w	r2, #4294967295
 8000432:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000436:	2004      	movs	r0, #4
 8000438:	f004 f910 	bl	800465c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800043c:	2300      	movs	r3, #0
 800043e:	603b      	str	r3, [r7, #0]
 8000440:	4b34      	ldr	r3, [pc, #208]	; (8000514 <SystemClock_Config+0x108>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	4a33      	ldr	r2, [pc, #204]	; (8000514 <SystemClock_Config+0x108>)
 8000446:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800044a:	6193      	str	r3, [r2, #24]
 800044c:	4b31      	ldr	r3, [pc, #196]	; (8000514 <SystemClock_Config+0x108>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000454:	603b      	str	r3, [r7, #0]
 8000456:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000458:	bf00      	nop
 800045a:	4b2e      	ldr	r3, [pc, #184]	; (8000514 <SystemClock_Config+0x108>)
 800045c:	699b      	ldr	r3, [r3, #24]
 800045e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000462:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000466:	d1f8      	bne.n	800045a <SystemClock_Config+0x4e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000468:	4b29      	ldr	r3, [pc, #164]	; (8000510 <SystemClock_Config+0x104>)
 800046a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800046c:	4a28      	ldr	r2, [pc, #160]	; (8000510 <SystemClock_Config+0x104>)
 800046e:	f023 0303 	bic.w	r3, r3, #3
 8000472:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000474:	230b      	movs	r3, #11
 8000476:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000478:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800047c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800047e:	2301      	movs	r3, #1
 8000480:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000482:	2340      	movs	r3, #64	; 0x40
 8000484:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000486:	2301      	movs	r3, #1
 8000488:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800048a:	2302      	movs	r3, #2
 800048c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800048e:	2300      	movs	r3, #0
 8000490:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000492:	2304      	movs	r3, #4
 8000494:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000496:	230a      	movs	r3, #10
 8000498:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800049a:	2302      	movs	r3, #2
 800049c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800049e:	2304      	movs	r3, #4
 80004a0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 80004a2:	2304      	movs	r3, #4
 80004a4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80004a6:	230c      	movs	r3, #12
 80004a8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80004aa:	2300      	movs	r3, #0
 80004ac:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80004ae:	2300      	movs	r3, #0
 80004b0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004b6:	4618      	mov	r0, r3
 80004b8:	f004 f92a 	bl	8004710 <HAL_RCC_OscConfig>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80004c2:	f000 fc67 	bl	8000d94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004c6:	233f      	movs	r3, #63	; 0x3f
 80004c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004ca:	2303      	movs	r3, #3
 80004cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80004ce:	2300      	movs	r3, #0
 80004d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80004d2:	2300      	movs	r3, #0
 80004d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80004d6:	2300      	movs	r3, #0
 80004d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80004da:	2300      	movs	r3, #0
 80004dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80004de:	2300      	movs	r3, #0
 80004e0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80004e2:	2300      	movs	r3, #0
 80004e4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004e6:	1d3b      	adds	r3, r7, #4
 80004e8:	2101      	movs	r1, #1
 80004ea:	4618      	mov	r0, r3
 80004ec:	f004 fd14 	bl	8004f18 <HAL_RCC_ClockConfig>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <SystemClock_Config+0xee>
  {
    Error_Handler();
 80004f6:	f000 fc4d 	bl	8000d94 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80004fa:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80004fe:	2100      	movs	r1, #0
 8000500:	2000      	movs	r0, #0
 8000502:	f004 febf 	bl	8005284 <HAL_RCC_MCOConfig>
}
 8000506:	bf00      	nop
 8000508:	3770      	adds	r7, #112	; 0x70
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	58024400 	.word	0x58024400
 8000514:	58024800 	.word	0x58024800

08000518 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b08a      	sub	sp, #40	; 0x28
 800051c:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800051e:	4b42      	ldr	r3, [pc, #264]	; (8000628 <MX_FDCAN1_Init+0x110>)
 8000520:	4a42      	ldr	r2, [pc, #264]	; (800062c <MX_FDCAN1_Init+0x114>)
 8000522:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000524:	4b40      	ldr	r3, [pc, #256]	; (8000628 <MX_FDCAN1_Init+0x110>)
 8000526:	2200      	movs	r2, #0
 8000528:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800052a:	4b3f      	ldr	r3, [pc, #252]	; (8000628 <MX_FDCAN1_Init+0x110>)
 800052c:	2200      	movs	r2, #0
 800052e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000530:	4b3d      	ldr	r3, [pc, #244]	; (8000628 <MX_FDCAN1_Init+0x110>)
 8000532:	2201      	movs	r2, #1
 8000534:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 8000536:	4b3c      	ldr	r3, [pc, #240]	; (8000628 <MX_FDCAN1_Init+0x110>)
 8000538:	2201      	movs	r2, #1
 800053a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800053c:	4b3a      	ldr	r3, [pc, #232]	; (8000628 <MX_FDCAN1_Init+0x110>)
 800053e:	2200      	movs	r2, #0
 8000540:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 12;
 8000542:	4b39      	ldr	r3, [pc, #228]	; (8000628 <MX_FDCAN1_Init+0x110>)
 8000544:	220c      	movs	r2, #12
 8000546:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 26;
 8000548:	4b37      	ldr	r3, [pc, #220]	; (8000628 <MX_FDCAN1_Init+0x110>)
 800054a:	221a      	movs	r2, #26
 800054c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 5;
 800054e:	4b36      	ldr	r3, [pc, #216]	; (8000628 <MX_FDCAN1_Init+0x110>)
 8000550:	2205      	movs	r2, #5
 8000552:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000554:	4b34      	ldr	r3, [pc, #208]	; (8000628 <MX_FDCAN1_Init+0x110>)
 8000556:	2202      	movs	r2, #2
 8000558:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 8;
 800055a:	4b33      	ldr	r3, [pc, #204]	; (8000628 <MX_FDCAN1_Init+0x110>)
 800055c:	2208      	movs	r2, #8
 800055e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 8000560:	4b31      	ldr	r3, [pc, #196]	; (8000628 <MX_FDCAN1_Init+0x110>)
 8000562:	2204      	movs	r2, #4
 8000564:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 20;
 8000566:	4b30      	ldr	r3, [pc, #192]	; (8000628 <MX_FDCAN1_Init+0x110>)
 8000568:	2214      	movs	r2, #20
 800056a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 800056c:	4b2e      	ldr	r3, [pc, #184]	; (8000628 <MX_FDCAN1_Init+0x110>)
 800056e:	2204      	movs	r2, #4
 8000570:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000572:	4b2d      	ldr	r3, [pc, #180]	; (8000628 <MX_FDCAN1_Init+0x110>)
 8000574:	2200      	movs	r2, #0
 8000576:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000578:	4b2b      	ldr	r3, [pc, #172]	; (8000628 <MX_FDCAN1_Init+0x110>)
 800057a:	2201      	movs	r2, #1
 800057c:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 800057e:	4b2a      	ldr	r3, [pc, #168]	; (8000628 <MX_FDCAN1_Init+0x110>)
 8000580:	2200      	movs	r2, #0
 8000582:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 8000584:	4b28      	ldr	r3, [pc, #160]	; (8000628 <MX_FDCAN1_Init+0x110>)
 8000586:	2220      	movs	r2, #32
 8000588:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800058a:	4b27      	ldr	r3, [pc, #156]	; (8000628 <MX_FDCAN1_Init+0x110>)
 800058c:	2204      	movs	r2, #4
 800058e:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 32;
 8000590:	4b25      	ldr	r3, [pc, #148]	; (8000628 <MX_FDCAN1_Init+0x110>)
 8000592:	2220      	movs	r2, #32
 8000594:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000596:	4b24      	ldr	r3, [pc, #144]	; (8000628 <MX_FDCAN1_Init+0x110>)
 8000598:	2204      	movs	r2, #4
 800059a:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 32;
 800059c:	4b22      	ldr	r3, [pc, #136]	; (8000628 <MX_FDCAN1_Init+0x110>)
 800059e:	2220      	movs	r2, #32
 80005a0:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80005a2:	4b21      	ldr	r3, [pc, #132]	; (8000628 <MX_FDCAN1_Init+0x110>)
 80005a4:	2204      	movs	r2, #4
 80005a6:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 32;
 80005a8:	4b1f      	ldr	r3, [pc, #124]	; (8000628 <MX_FDCAN1_Init+0x110>)
 80005aa:	2220      	movs	r2, #32
 80005ac:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 32;
 80005ae:	4b1e      	ldr	r3, [pc, #120]	; (8000628 <MX_FDCAN1_Init+0x110>)
 80005b0:	2220      	movs	r2, #32
 80005b2:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 80005b4:	4b1c      	ldr	r3, [pc, #112]	; (8000628 <MX_FDCAN1_Init+0x110>)
 80005b6:	2220      	movs	r2, #32
 80005b8:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80005ba:	4b1b      	ldr	r3, [pc, #108]	; (8000628 <MX_FDCAN1_Init+0x110>)
 80005bc:	2200      	movs	r2, #0
 80005be:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80005c0:	4b19      	ldr	r3, [pc, #100]	; (8000628 <MX_FDCAN1_Init+0x110>)
 80005c2:	2204      	movs	r2, #4
 80005c4:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80005c6:	4818      	ldr	r0, [pc, #96]	; (8000628 <MX_FDCAN1_Init+0x110>)
 80005c8:	f001 f9aa 	bl	8001920 <HAL_FDCAN_Init>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 80005d2:	f000 fbdf 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  FDCAN_FilterTypeDef FilterConfig;
  FilterConfig.IdType = FDCAN_STANDARD_ID;
 80005d6:	2300      	movs	r3, #0
 80005d8:	603b      	str	r3, [r7, #0]
  FilterConfig.FilterIndex = 0;
 80005da:	2300      	movs	r3, #0
 80005dc:	607b      	str	r3, [r7, #4]
  FilterConfig.FilterType = FDCAN_FILTER_RANGE;
 80005de:	2300      	movs	r3, #0
 80005e0:	60bb      	str	r3, [r7, #8]
  FilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80005e2:	2301      	movs	r3, #1
 80005e4:	60fb      	str	r3, [r7, #12]
  FilterConfig.FilterID1 = 0x000;
 80005e6:	2300      	movs	r3, #0
 80005e8:	613b      	str	r3, [r7, #16]
  FilterConfig.FilterID2 = 0x7FF;
 80005ea:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80005ee:	617b      	str	r3, [r7, #20]
  if( HAL_FDCAN_ConfigFilter(&hfdcan1, &FilterConfig) != HAL_OK )
 80005f0:	463b      	mov	r3, r7
 80005f2:	4619      	mov	r1, r3
 80005f4:	480c      	ldr	r0, [pc, #48]	; (8000628 <MX_FDCAN1_Init+0x110>)
 80005f6:	f001 fb71 	bl	8001cdc <HAL_FDCAN_ConfigFilter>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <MX_FDCAN1_Init+0xec>
  {
	  Error_Handler();
 8000600:	f000 fbc8 	bl	8000d94 <Error_Handler>
  }
  if( HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE) != HAL_OK )
 8000604:	2301      	movs	r3, #1
 8000606:	9300      	str	r3, [sp, #0]
 8000608:	2301      	movs	r3, #1
 800060a:	2202      	movs	r2, #2
 800060c:	2102      	movs	r1, #2
 800060e:	4806      	ldr	r0, [pc, #24]	; (8000628 <MX_FDCAN1_Init+0x110>)
 8000610:	f001 fbda 	bl	8001dc8 <HAL_FDCAN_ConfigGlobalFilter>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <MX_FDCAN1_Init+0x106>
  {
	  Error_Handler();
 800061a:	f000 fbbb 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE END FDCAN1_Init 2 */

}
 800061e:	bf00      	nop
 8000620:	3720      	adds	r7, #32
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	2400002c 	.word	0x2400002c
 800062c:	4000a000 	.word	0x4000a000

08000630 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000634:	4b1b      	ldr	r3, [pc, #108]	; (80006a4 <MX_I2C4_Init+0x74>)
 8000636:	4a1c      	ldr	r2, [pc, #112]	; (80006a8 <MX_I2C4_Init+0x78>)
 8000638:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10909CEC;
 800063a:	4b1a      	ldr	r3, [pc, #104]	; (80006a4 <MX_I2C4_Init+0x74>)
 800063c:	4a1b      	ldr	r2, [pc, #108]	; (80006ac <MX_I2C4_Init+0x7c>)
 800063e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000640:	4b18      	ldr	r3, [pc, #96]	; (80006a4 <MX_I2C4_Init+0x74>)
 8000642:	2200      	movs	r2, #0
 8000644:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000646:	4b17      	ldr	r3, [pc, #92]	; (80006a4 <MX_I2C4_Init+0x74>)
 8000648:	2201      	movs	r2, #1
 800064a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800064c:	4b15      	ldr	r3, [pc, #84]	; (80006a4 <MX_I2C4_Init+0x74>)
 800064e:	2200      	movs	r2, #0
 8000650:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000652:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <MX_I2C4_Init+0x74>)
 8000654:	2200      	movs	r2, #0
 8000656:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000658:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <MX_I2C4_Init+0x74>)
 800065a:	2200      	movs	r2, #0
 800065c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800065e:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <MX_I2C4_Init+0x74>)
 8000660:	2200      	movs	r2, #0
 8000662:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000664:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <MX_I2C4_Init+0x74>)
 8000666:	2200      	movs	r2, #0
 8000668:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800066a:	480e      	ldr	r0, [pc, #56]	; (80006a4 <MX_I2C4_Init+0x74>)
 800066c:	f002 fd80 	bl	8003170 <HAL_I2C_Init>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000676:	f000 fb8d 	bl	8000d94 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800067a:	2100      	movs	r1, #0
 800067c:	4809      	ldr	r0, [pc, #36]	; (80006a4 <MX_I2C4_Init+0x74>)
 800067e:	f002 fe07 	bl	8003290 <HAL_I2CEx_ConfigAnalogFilter>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000688:	f000 fb84 	bl	8000d94 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 800068c:	2100      	movs	r1, #0
 800068e:	4805      	ldr	r0, [pc, #20]	; (80006a4 <MX_I2C4_Init+0x74>)
 8000690:	f002 fe49 	bl	8003326 <HAL_I2CEx_ConfigDigitalFilter>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800069a:	f000 fb7b 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	240000cc 	.word	0x240000cc
 80006a8:	58001c00 	.word	0x58001c00
 80006ac:	10909cec 	.word	0x10909cec

080006b0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b09a      	sub	sp, #104	; 0x68
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80006b6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80006ba:	2234      	movs	r2, #52	; 0x34
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f006 fcde 	bl	8007080 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80006c4:	463b      	mov	r3, r7
 80006c6:	2234      	movs	r2, #52	; 0x34
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f006 fcd8 	bl	8007080 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80006d0:	4b4e      	ldr	r3, [pc, #312]	; (800080c <MX_LTDC_Init+0x15c>)
 80006d2:	4a4f      	ldr	r2, [pc, #316]	; (8000810 <MX_LTDC_Init+0x160>)
 80006d4:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80006d6:	4b4d      	ldr	r3, [pc, #308]	; (800080c <MX_LTDC_Init+0x15c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80006dc:	4b4b      	ldr	r3, [pc, #300]	; (800080c <MX_LTDC_Init+0x15c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80006e2:	4b4a      	ldr	r3, [pc, #296]	; (800080c <MX_LTDC_Init+0x15c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80006e8:	4b48      	ldr	r3, [pc, #288]	; (800080c <MX_LTDC_Init+0x15c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 80006ee:	4b47      	ldr	r3, [pc, #284]	; (800080c <MX_LTDC_Init+0x15c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80006f4:	4b45      	ldr	r3, [pc, #276]	; (800080c <MX_LTDC_Init+0x15c>)
 80006f6:	2209      	movs	r2, #9
 80006f8:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 43;
 80006fa:	4b44      	ldr	r3, [pc, #272]	; (800080c <MX_LTDC_Init+0x15c>)
 80006fc:	222b      	movs	r2, #43	; 0x2b
 80006fe:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 21;
 8000700:	4b42      	ldr	r3, [pc, #264]	; (800080c <MX_LTDC_Init+0x15c>)
 8000702:	2215      	movs	r2, #21
 8000704:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 523;
 8000706:	4b41      	ldr	r3, [pc, #260]	; (800080c <MX_LTDC_Init+0x15c>)
 8000708:	f240 220b 	movw	r2, #523	; 0x20b
 800070c:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 293;
 800070e:	4b3f      	ldr	r3, [pc, #252]	; (800080c <MX_LTDC_Init+0x15c>)
 8000710:	f240 1225 	movw	r2, #293	; 0x125
 8000714:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 531;
 8000716:	4b3d      	ldr	r3, [pc, #244]	; (800080c <MX_LTDC_Init+0x15c>)
 8000718:	f240 2213 	movw	r2, #531	; 0x213
 800071c:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 297;
 800071e:	4b3b      	ldr	r3, [pc, #236]	; (800080c <MX_LTDC_Init+0x15c>)
 8000720:	f240 1229 	movw	r2, #297	; 0x129
 8000724:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000726:	4b39      	ldr	r3, [pc, #228]	; (800080c <MX_LTDC_Init+0x15c>)
 8000728:	2200      	movs	r2, #0
 800072a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800072e:	4b37      	ldr	r3, [pc, #220]	; (800080c <MX_LTDC_Init+0x15c>)
 8000730:	2200      	movs	r2, #0
 8000732:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000736:	4b35      	ldr	r3, [pc, #212]	; (800080c <MX_LTDC_Init+0x15c>)
 8000738:	2200      	movs	r2, #0
 800073a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800073e:	4833      	ldr	r0, [pc, #204]	; (800080c <MX_LTDC_Init+0x15c>)
 8000740:	f002 fe3e 	bl	80033c0 <HAL_LTDC_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800074a:	f000 fb23 	bl	8000d94 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800074e:	2300      	movs	r3, #0
 8000750:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8000752:	2300      	movs	r3, #0
 8000754:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800075e:	2300      	movs	r3, #0
 8000760:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8000762:	2300      	movs	r3, #0
 8000764:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800076a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800076e:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000770:	2305      	movs	r3, #5
 8000772:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8000774:	2300      	movs	r3, #0
 8000776:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 800077c:	2300      	movs	r3, #0
 800077e:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000780:	2300      	movs	r3, #0
 8000782:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000786:	2300      	movs	r3, #0
 8000788:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000792:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000796:	2200      	movs	r2, #0
 8000798:	4619      	mov	r1, r3
 800079a:	481c      	ldr	r0, [pc, #112]	; (800080c <MX_LTDC_Init+0x15c>)
 800079c:	f002 fee0 	bl	8003560 <HAL_LTDC_ConfigLayer>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 80007a6:	f000 faf5 	bl	8000d94 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80007ba:	2300      	movs	r3, #0
 80007bc:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 80007be:	2300      	movs	r3, #0
 80007c0:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80007c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007ca:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80007cc:	2305      	movs	r3, #5
 80007ce:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 80007d8:	2300      	movs	r3, #0
 80007da:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80007ee:	463b      	mov	r3, r7
 80007f0:	2201      	movs	r2, #1
 80007f2:	4619      	mov	r1, r3
 80007f4:	4805      	ldr	r0, [pc, #20]	; (800080c <MX_LTDC_Init+0x15c>)
 80007f6:	f002 feb3 	bl	8003560 <HAL_LTDC_ConfigLayer>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8000800:	f000 fac8 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000804:	bf00      	nop
 8000806:	3768      	adds	r7, #104	; 0x68
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	24000118 	.word	0x24000118
 8000810:	50001000 	.word	0x50001000

08000814 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 800081a:	463b      	mov	r3, r7
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	611a      	str	r2, [r3, #16]
 8000828:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 800082a:	4b28      	ldr	r3, [pc, #160]	; (80008cc <MX_OCTOSPI1_Init+0xb8>)
 800082c:	4a28      	ldr	r2, [pc, #160]	; (80008d0 <MX_OCTOSPI1_Init+0xbc>)
 800082e:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8000830:	4b26      	ldr	r3, [pc, #152]	; (80008cc <MX_OCTOSPI1_Init+0xb8>)
 8000832:	2201      	movs	r2, #1
 8000834:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000836:	4b25      	ldr	r3, [pc, #148]	; (80008cc <MX_OCTOSPI1_Init+0xb8>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 800083c:	4b23      	ldr	r3, [pc, #140]	; (80008cc <MX_OCTOSPI1_Init+0xb8>)
 800083e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000842:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8000844:	4b21      	ldr	r3, [pc, #132]	; (80008cc <MX_OCTOSPI1_Init+0xb8>)
 8000846:	2220      	movs	r2, #32
 8000848:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 800084a:	4b20      	ldr	r3, [pc, #128]	; (80008cc <MX_OCTOSPI1_Init+0xb8>)
 800084c:	2201      	movs	r2, #1
 800084e:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000850:	4b1e      	ldr	r3, [pc, #120]	; (80008cc <MX_OCTOSPI1_Init+0xb8>)
 8000852:	2200      	movs	r2, #0
 8000854:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000856:	4b1d      	ldr	r3, [pc, #116]	; (80008cc <MX_OCTOSPI1_Init+0xb8>)
 8000858:	2200      	movs	r2, #0
 800085a:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 800085c:	4b1b      	ldr	r3, [pc, #108]	; (80008cc <MX_OCTOSPI1_Init+0xb8>)
 800085e:	2200      	movs	r2, #0
 8000860:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 1;
 8000862:	4b1a      	ldr	r3, [pc, #104]	; (80008cc <MX_OCTOSPI1_Init+0xb8>)
 8000864:	2201      	movs	r2, #1
 8000866:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000868:	4b18      	ldr	r3, [pc, #96]	; (80008cc <MX_OCTOSPI1_Init+0xb8>)
 800086a:	2200      	movs	r2, #0
 800086c:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800086e:	4b17      	ldr	r3, [pc, #92]	; (80008cc <MX_OCTOSPI1_Init+0xb8>)
 8000870:	2200      	movs	r2, #0
 8000872:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8000874:	4b15      	ldr	r3, [pc, #84]	; (80008cc <MX_OCTOSPI1_Init+0xb8>)
 8000876:	2200      	movs	r2, #0
 8000878:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800087a:	4b14      	ldr	r3, [pc, #80]	; (80008cc <MX_OCTOSPI1_Init+0xb8>)
 800087c:	2208      	movs	r2, #8
 800087e:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.MaxTran = 0;
 8000880:	4b12      	ldr	r3, [pc, #72]	; (80008cc <MX_OCTOSPI1_Init+0xb8>)
 8000882:	2200      	movs	r2, #0
 8000884:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.Refresh = 0;
 8000886:	4b11      	ldr	r3, [pc, #68]	; (80008cc <MX_OCTOSPI1_Init+0xb8>)
 8000888:	2200      	movs	r2, #0
 800088a:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 800088c:	480f      	ldr	r0, [pc, #60]	; (80008cc <MX_OCTOSPI1_Init+0xb8>)
 800088e:	f003 f83f 	bl	8003910 <HAL_OSPI_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_OCTOSPI1_Init+0x88>
  {
    Error_Handler();
 8000898:	f000 fa7c 	bl	8000d94 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 800089c:	2301      	movs	r3, #1
 800089e:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.DQSPort = 1;
 80008a0:	2301      	movs	r3, #1
 80008a2:	607b      	str	r3, [r7, #4]
  sOspiManagerCfg.NCSPort = 1;
 80008a4:	2301      	movs	r3, #1
 80008a6:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_HIGH;
 80008a8:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <MX_OCTOSPI1_Init+0xc0>)
 80008aa:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80008ac:	463b      	mov	r3, r7
 80008ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80008b2:	4619      	mov	r1, r3
 80008b4:	4805      	ldr	r0, [pc, #20]	; (80008cc <MX_OCTOSPI1_Init+0xb8>)
 80008b6:	f003 f8f7 	bl	8003aa8 <HAL_OSPIM_Config>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_OCTOSPI1_Init+0xb0>
  {
    Error_Handler();
 80008c0:	f000 fa68 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 80008c4:	bf00      	nop
 80008c6:	3718      	adds	r7, #24
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	240001c0 	.word	0x240001c0
 80008d0:	52005000 	.word	0x52005000
 80008d4:	01000001 	.word	0x01000001

080008d8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80008dc:	4b11      	ldr	r3, [pc, #68]	; (8000924 <MX_RTC_Init+0x4c>)
 80008de:	4a12      	ldr	r2, [pc, #72]	; (8000928 <MX_RTC_Init+0x50>)
 80008e0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80008e2:	4b10      	ldr	r3, [pc, #64]	; (8000924 <MX_RTC_Init+0x4c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80008e8:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <MX_RTC_Init+0x4c>)
 80008ea:	227f      	movs	r2, #127	; 0x7f
 80008ec:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80008ee:	4b0d      	ldr	r3, [pc, #52]	; (8000924 <MX_RTC_Init+0x4c>)
 80008f0:	22ff      	movs	r2, #255	; 0xff
 80008f2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80008f4:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <MX_RTC_Init+0x4c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80008fa:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <MX_RTC_Init+0x4c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000900:	4b08      	ldr	r3, [pc, #32]	; (8000924 <MX_RTC_Init+0x4c>)
 8000902:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000906:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <MX_RTC_Init+0x4c>)
 800090a:	2200      	movs	r2, #0
 800090c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800090e:	4805      	ldr	r0, [pc, #20]	; (8000924 <MX_RTC_Init+0x4c>)
 8000910:	f005 ff94 	bl	800683c <HAL_RTC_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800091a:	f000 fa3b 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	2400021c 	.word	0x2400021c
 8000928:	58004000 	.word	0x58004000

0800092c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b090      	sub	sp, #64	; 0x40
 8000930:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000932:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]
 8000940:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000942:	4bc0      	ldr	r3, [pc, #768]	; (8000c44 <MX_GPIO_Init+0x318>)
 8000944:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000948:	4abe      	ldr	r2, [pc, #760]	; (8000c44 <MX_GPIO_Init+0x318>)
 800094a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800094e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000952:	4bbc      	ldr	r3, [pc, #752]	; (8000c44 <MX_GPIO_Init+0x318>)
 8000954:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800095c:	62bb      	str	r3, [r7, #40]	; 0x28
 800095e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000960:	4bb8      	ldr	r3, [pc, #736]	; (8000c44 <MX_GPIO_Init+0x318>)
 8000962:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000966:	4ab7      	ldr	r2, [pc, #732]	; (8000c44 <MX_GPIO_Init+0x318>)
 8000968:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800096c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000970:	4bb4      	ldr	r3, [pc, #720]	; (8000c44 <MX_GPIO_Init+0x318>)
 8000972:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800097a:	627b      	str	r3, [r7, #36]	; 0x24
 800097c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800097e:	4bb1      	ldr	r3, [pc, #708]	; (8000c44 <MX_GPIO_Init+0x318>)
 8000980:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000984:	4aaf      	ldr	r2, [pc, #700]	; (8000c44 <MX_GPIO_Init+0x318>)
 8000986:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800098a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800098e:	4bad      	ldr	r3, [pc, #692]	; (8000c44 <MX_GPIO_Init+0x318>)
 8000990:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000994:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000998:	623b      	str	r3, [r7, #32]
 800099a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800099c:	4ba9      	ldr	r3, [pc, #676]	; (8000c44 <MX_GPIO_Init+0x318>)
 800099e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009a2:	4aa8      	ldr	r2, [pc, #672]	; (8000c44 <MX_GPIO_Init+0x318>)
 80009a4:	f043 0308 	orr.w	r3, r3, #8
 80009a8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80009ac:	4ba5      	ldr	r3, [pc, #660]	; (8000c44 <MX_GPIO_Init+0x318>)
 80009ae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009b2:	f003 0308 	and.w	r3, r3, #8
 80009b6:	61fb      	str	r3, [r7, #28]
 80009b8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ba:	4ba2      	ldr	r3, [pc, #648]	; (8000c44 <MX_GPIO_Init+0x318>)
 80009bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009c0:	4aa0      	ldr	r2, [pc, #640]	; (8000c44 <MX_GPIO_Init+0x318>)
 80009c2:	f043 0304 	orr.w	r3, r3, #4
 80009c6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80009ca:	4b9e      	ldr	r3, [pc, #632]	; (8000c44 <MX_GPIO_Init+0x318>)
 80009cc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009d0:	f003 0304 	and.w	r3, r3, #4
 80009d4:	61bb      	str	r3, [r7, #24]
 80009d6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009d8:	4b9a      	ldr	r3, [pc, #616]	; (8000c44 <MX_GPIO_Init+0x318>)
 80009da:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009de:	4a99      	ldr	r2, [pc, #612]	; (8000c44 <MX_GPIO_Init+0x318>)
 80009e0:	f043 0310 	orr.w	r3, r3, #16
 80009e4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80009e8:	4b96      	ldr	r3, [pc, #600]	; (8000c44 <MX_GPIO_Init+0x318>)
 80009ea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009ee:	f003 0310 	and.w	r3, r3, #16
 80009f2:	617b      	str	r3, [r7, #20]
 80009f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f6:	4b93      	ldr	r3, [pc, #588]	; (8000c44 <MX_GPIO_Init+0x318>)
 80009f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009fc:	4a91      	ldr	r2, [pc, #580]	; (8000c44 <MX_GPIO_Init+0x318>)
 80009fe:	f043 0302 	orr.w	r3, r3, #2
 8000a02:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a06:	4b8f      	ldr	r3, [pc, #572]	; (8000c44 <MX_GPIO_Init+0x318>)
 8000a08:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a0c:	f003 0302 	and.w	r3, r3, #2
 8000a10:	613b      	str	r3, [r7, #16]
 8000a12:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000a14:	4b8b      	ldr	r3, [pc, #556]	; (8000c44 <MX_GPIO_Init+0x318>)
 8000a16:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a1a:	4a8a      	ldr	r2, [pc, #552]	; (8000c44 <MX_GPIO_Init+0x318>)
 8000a1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a20:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a24:	4b87      	ldr	r3, [pc, #540]	; (8000c44 <MX_GPIO_Init+0x318>)
 8000a26:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a32:	4b84      	ldr	r3, [pc, #528]	; (8000c44 <MX_GPIO_Init+0x318>)
 8000a34:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a38:	4a82      	ldr	r2, [pc, #520]	; (8000c44 <MX_GPIO_Init+0x318>)
 8000a3a:	f043 0301 	orr.w	r3, r3, #1
 8000a3e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a42:	4b80      	ldr	r3, [pc, #512]	; (8000c44 <MX_GPIO_Init+0x318>)
 8000a44:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a48:	f003 0301 	and.w	r3, r3, #1
 8000a4c:	60bb      	str	r3, [r7, #8]
 8000a4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a50:	4b7c      	ldr	r3, [pc, #496]	; (8000c44 <MX_GPIO_Init+0x318>)
 8000a52:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a56:	4a7b      	ldr	r2, [pc, #492]	; (8000c44 <MX_GPIO_Init+0x318>)
 8000a58:	f043 0320 	orr.w	r3, r3, #32
 8000a5c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a60:	4b78      	ldr	r3, [pc, #480]	; (8000c44 <MX_GPIO_Init+0x318>)
 8000a62:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a66:	f003 0320 	and.w	r3, r3, #32
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a6e:	4b75      	ldr	r3, [pc, #468]	; (8000c44 <MX_GPIO_Init+0x318>)
 8000a70:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a74:	4a73      	ldr	r2, [pc, #460]	; (8000c44 <MX_GPIO_Init+0x318>)
 8000a76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a7a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a7e:	4b71      	ldr	r3, [pc, #452]	; (8000c44 <MX_GPIO_Init+0x318>)
 8000a80:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a88:	603b      	str	r3, [r7, #0]
 8000a8a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin, GPIO_PIN_RESET);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	210e      	movs	r1, #14
 8000a90:	486d      	ldr	r0, [pc, #436]	; (8000c48 <MX_GPIO_Init+0x31c>)
 8000a92:	f002 fb39 	bl	8003108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USER_LED1_Pin|USER_LED2_Pin, GPIO_PIN_RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	f640 0104 	movw	r1, #2052	; 0x804
 8000a9c:	486b      	ldr	r0, [pc, #428]	; (8000c4c <MX_GPIO_Init+0x320>)
 8000a9e:	f002 fb33 	bl	8003108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AUDIO_NRST_GPIO_Port, AUDIO_NRST_Pin, GPIO_PIN_SET);
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	2108      	movs	r1, #8
 8000aa6:	4869      	ldr	r0, [pc, #420]	; (8000c4c <MX_GPIO_Init+0x320>)
 8000aa8:	f002 fb2e 	bl	8003108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin, GPIO_PIN_SET);
 8000aac:	2201      	movs	r2, #1
 8000aae:	2106      	movs	r1, #6
 8000ab0:	4867      	ldr	r0, [pc, #412]	; (8000c50 <MX_GPIO_Init+0x324>)
 8000ab2:	f002 fb29 	bl	8003108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_8, GPIO_PIN_RESET);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000abc:	4865      	ldr	r0, [pc, #404]	; (8000c54 <MX_GPIO_Init+0x328>)
 8000abe:	f002 fb23 	bl	8003108 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : WIFI_GPIO_Pin WIFI_DATRDY_Pin */
  GPIO_InitStruct.Pin = WIFI_GPIO_Pin|WIFI_DATRDY_Pin;
 8000ac2:	2330      	movs	r3, #48	; 0x30
 8000ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ac6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000aca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ad0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	485c      	ldr	r0, [pc, #368]	; (8000c48 <MX_GPIO_Init+0x31c>)
 8000ad8:	f002 f966 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDNCAS_Pin SDCLK_Pin A15_Pin A14_Pin
                           A11_Pin A10_Pin */
  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A15_Pin|A14_Pin
 8000adc:	f248 1333 	movw	r3, #33075	; 0x8133
 8000ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |A11_Pin|A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aea:	2303      	movs	r3, #3
 8000aec:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000aee:	230c      	movs	r3, #12
 8000af0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000af2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000af6:	4619      	mov	r1, r3
 8000af8:	4854      	ldr	r0, [pc, #336]	; (8000c4c <MX_GPIO_Init+0x320>)
 8000afa:	f002 f955 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S6_SDO_Pin I2S6_SDI_Pin I2S6_CK_Pin */
  GPIO_InitStruct.Pin = I2S6_SDO_Pin|I2S6_SDI_Pin|I2S6_CK_Pin;
 8000afe:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b04:	2302      	movs	r3, #2
 8000b06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8000b10:	2305      	movs	r3, #5
 8000b12:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b18:	4619      	mov	r1, r3
 8000b1a:	484c      	ldr	r0, [pc, #304]	; (8000c4c <MX_GPIO_Init+0x320>)
 8000b1c:	f002 f944 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D3_Pin D2_Pin D0_Pin D1_Pin
                           D13_Pin D15_Pin D14_Pin */
  GPIO_InitStruct.Pin = D3_Pin|D2_Pin|D0_Pin|D1_Pin
 8000b20:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000b24:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |D13_Pin|D15_Pin|D14_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b26:	2302      	movs	r3, #2
 8000b28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b32:	230c      	movs	r3, #12
 8000b34:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4846      	ldr	r0, [pc, #280]	; (8000c58 <MX_GPIO_Init+0x32c>)
 8000b3e:	f002 f933 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO1_D2_Pin SDIO1_CK_Pin SDIO1_D3_Pin SDIO1_D1_Pin
                           SDIO1_D0_Pin */
  GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_CK_Pin|SDIO1_D3_Pin|SDIO1_D1_Pin
 8000b42:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000b46:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |SDIO1_D0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b50:	2303      	movs	r3, #3
 8000b52:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000b54:	230c      	movs	r3, #12
 8000b56:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	483f      	ldr	r0, [pc, #252]	; (8000c5c <MX_GPIO_Init+0x330>)
 8000b60:	f002 f922 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : WIFI_BOOT_Pin WIFI_WKUP_Pin WIFI_RST_Pin */
  GPIO_InitStruct.Pin = WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin;
 8000b64:	230e      	movs	r3, #14
 8000b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b70:	2300      	movs	r3, #0
 8000b72:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4833      	ldr	r0, [pc, #204]	; (8000c48 <MX_GPIO_Init+0x31c>)
 8000b7c:	f002 f914 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL0_Pin FMC_NBL1_Pin D9_Pin D4_Pin
                           D10_Pin D11_Pin D7_Pin D6_Pin
                           D12_Pin D5_Pin D8_Pin */
  GPIO_InitStruct.Pin = FMC_NBL0_Pin|FMC_NBL1_Pin|D9_Pin|D4_Pin
 8000b80:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000b84:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |D10_Pin|D11_Pin|D7_Pin|D6_Pin
                          |D12_Pin|D5_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b86:	2302      	movs	r3, #2
 8000b88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b92:	230c      	movs	r3, #12
 8000b94:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4830      	ldr	r0, [pc, #192]	; (8000c60 <MX_GPIO_Init+0x334>)
 8000b9e:	f002 f903 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED1_Pin AUDIO_NRST_Pin USER_LED2_Pin */
  GPIO_InitStruct.Pin = USER_LED1_Pin|AUDIO_NRST_Pin|USER_LED2_Pin;
 8000ba2:	f640 030c 	movw	r3, #2060	; 0x80c
 8000ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4824      	ldr	r0, [pc, #144]	; (8000c4c <MX_GPIO_Init+0x320>)
 8000bbc:	f002 f8f4 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO1_CMD_Pin */
  GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8000bc0:	2304      	movs	r3, #4
 8000bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bcc:	2303      	movs	r3, #3
 8000bce:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000bd0:	230c      	movs	r3, #12
 8000bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8000bd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bd8:	4619      	mov	r1, r3
 8000bda:	481f      	ldr	r0, [pc, #124]	; (8000c58 <MX_GPIO_Init+0x32c>)
 8000bdc:	f002 f8e4 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000be0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000be4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000be6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bec:	2301      	movs	r3, #1
 8000bee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000bf0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4814      	ldr	r0, [pc, #80]	; (8000c48 <MX_GPIO_Init+0x31c>)
 8000bf8:	f002 f8d6 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VCP_RX_Pin VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 8000bfc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c02:	2302      	movs	r3, #2
 8000c04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c0e:	2307      	movs	r3, #7
 8000c10:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c16:	4619      	mov	r1, r3
 8000c18:	480d      	ldr	r0, [pc, #52]	; (8000c50 <MX_GPIO_Init+0x324>)
 8000c1a:	f002 f8c5 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : WAKEUP_Pin */
  GPIO_InitStruct.Pin = WAKEUP_Pin;
 8000c1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c24:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000c2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c32:	4619      	mov	r1, r3
 8000c34:	4809      	ldr	r0, [pc, #36]	; (8000c5c <MX_GPIO_Init+0x330>)
 8000c36:	f002 f8b7 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : A1_Pin A0_Pin A2_Pin A4_Pin
                           A3_Pin A5_Pin A7_Pin SDNRAS_Pin
                           A9_Pin A8_Pin A6_Pin */
  GPIO_InitStruct.Pin = A1_Pin|A0_Pin|A2_Pin|A4_Pin
 8000c3a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c40:	e010      	b.n	8000c64 <MX_GPIO_Init+0x338>
 8000c42:	bf00      	nop
 8000c44:	58024400 	.word	0x58024400
 8000c48:	58022000 	.word	0x58022000
 8000c4c:	58021800 	.word	0x58021800
 8000c50:	58020000 	.word	0x58020000
 8000c54:	58021c00 	.word	0x58021c00
 8000c58:	58020c00 	.word	0x58020c00
 8000c5c:	58020800 	.word	0x58020800
 8000c60:	58021000 	.word	0x58021000
                          |A3_Pin|A5_Pin|A7_Pin|SDNRAS_Pin
                          |A9_Pin|A8_Pin|A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c64:	2302      	movs	r3, #2
 8000c66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c70:	230c      	movs	r3, #12
 8000c72:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4839      	ldr	r0, [pc, #228]	; (8000d60 <MX_GPIO_Init+0x434>)
 8000c7c:	f002 f894 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCO_Pin */
  GPIO_InitStruct.Pin = MCO_Pin;
 8000c80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c86:	2302      	movs	r3, #2
 8000c88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000c92:	2300      	movs	r3, #0
 8000c94:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MCO_GPIO_Port, &GPIO_InitStruct);
 8000c96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4831      	ldr	r0, [pc, #196]	; (8000d64 <MX_GPIO_Init+0x438>)
 8000c9e:	f002 f883 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_MISO_Pin SPI2_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_MOSI_Pin;
 8000ca2:	230c      	movs	r3, #12
 8000ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cb2:	2305      	movs	r3, #5
 8000cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cba:	4619      	mov	r1, r3
 8000cbc:	482a      	ldr	r0, [pc, #168]	; (8000d68 <MX_GPIO_Init+0x43c>)
 8000cbe:	f002 f873 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000cc2:	2304      	movs	r3, #4
 8000cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cc6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000cd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4825      	ldr	r0, [pc, #148]	; (8000d6c <MX_GPIO_Init+0x440>)
 8000cd8:	f002 f866 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDNE1_Pin SDNWE_Pin SDCKE1_Pin */
  GPIO_InitStruct.Pin = SDNE1_Pin|SDNWE_Pin|SDCKE1_Pin;
 8000cdc:	23e0      	movs	r3, #224	; 0xe0
 8000cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cec:	230c      	movs	r3, #12
 8000cee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000cf0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	481d      	ldr	r0, [pc, #116]	; (8000d6c <MX_GPIO_Init+0x440>)
 8000cf8:	f002 f856 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S6_WS_Pin I2S6_MCK_Pin */
  GPIO_InitStruct.Pin = I2S6_WS_Pin|I2S6_MCK_Pin;
 8000cfc:	2309      	movs	r3, #9
 8000cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d00:	2302      	movs	r3, #2
 8000d02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8000d0c:	2305      	movs	r3, #5
 8000d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d14:	4619      	mov	r1, r3
 8000d16:	4813      	ldr	r0, [pc, #76]	; (8000d64 <MX_GPIO_Init+0x438>)
 8000d18:	f002 f846 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_BL_CTRL_Pin LCD_ON_OFF_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin;
 8000d1c:	2306      	movs	r3, #6
 8000d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d20:	2301      	movs	r3, #1
 8000d22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d30:	4619      	mov	r1, r3
 8000d32:	480c      	ldr	r0, [pc, #48]	; (8000d64 <MX_GPIO_Init+0x438>)
 8000d34:	f002 f838 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d46:	2300      	movs	r3, #0
 8000d48:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4806      	ldr	r0, [pc, #24]	; (8000d6c <MX_GPIO_Init+0x440>)
 8000d52:	f002 f829 	bl	8002da8 <HAL_GPIO_Init>

}
 8000d56:	bf00      	nop
 8000d58:	3740      	adds	r7, #64	; 0x40
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	58021400 	.word	0x58021400
 8000d64:	58020000 	.word	0x58020000
 8000d68:	58020800 	.word	0x58020800
 8000d6c:	58021c00 	.word	0x58021c00

08000d70 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a04      	ldr	r2, [pc, #16]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d101      	bne.n	8000d86 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d82:	f000 fca9 	bl	80016d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d86:	bf00      	nop
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40001000 	.word	0x40001000

08000d94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d98:	b672      	cpsid	i
}
 8000d9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <Error_Handler+0x8>
	...

08000da0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da6:	4b0a      	ldr	r3, [pc, #40]	; (8000dd0 <HAL_MspInit+0x30>)
 8000da8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000dac:	4a08      	ldr	r2, [pc, #32]	; (8000dd0 <HAL_MspInit+0x30>)
 8000dae:	f043 0302 	orr.w	r3, r3, #2
 8000db2:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000db6:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <HAL_MspInit+0x30>)
 8000db8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000dbc:	f003 0302 	and.w	r3, r3, #2
 8000dc0:	607b      	str	r3, [r7, #4]
 8000dc2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc4:	bf00      	nop
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	58024400 	.word	0x58024400

08000dd4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b0b8      	sub	sp, #224	; 0xe0
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	22b8      	movs	r2, #184	; 0xb8
 8000df2:	2100      	movs	r1, #0
 8000df4:	4618      	mov	r0, r3
 8000df6:	f006 f943 	bl	8007080 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a29      	ldr	r2, [pc, #164]	; (8000ea4 <HAL_FDCAN_MspInit+0xd0>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d14b      	bne.n	8000e9c <HAL_FDCAN_MspInit+0xc8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000e04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e08:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	4618      	mov	r0, r3
 8000e16:	f004 fca1 	bl	800575c <HAL_RCCEx_PeriphCLKConfig>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000e20:	f7ff ffb8 	bl	8000d94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000e24:	4b20      	ldr	r3, [pc, #128]	; (8000ea8 <HAL_FDCAN_MspInit+0xd4>)
 8000e26:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8000e2a:	4a1f      	ldr	r2, [pc, #124]	; (8000ea8 <HAL_FDCAN_MspInit+0xd4>)
 8000e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e30:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
 8000e34:	4b1c      	ldr	r3, [pc, #112]	; (8000ea8 <HAL_FDCAN_MspInit+0xd4>)
 8000e36:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8000e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e3e:	613b      	str	r3, [r7, #16]
 8000e40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e42:	4b19      	ldr	r3, [pc, #100]	; (8000ea8 <HAL_FDCAN_MspInit+0xd4>)
 8000e44:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e48:	4a17      	ldr	r2, [pc, #92]	; (8000ea8 <HAL_FDCAN_MspInit+0xd4>)
 8000e4a:	f043 0301 	orr.w	r3, r3, #1
 8000e4e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e52:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <HAL_FDCAN_MspInit+0xd4>)
 8000e54:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e58:	f003 0301 	and.w	r3, r3, #1
 8000e5c:	60fb      	str	r3, [r7, #12]
 8000e5e:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA12     ------> FDCAN1_TX
    PA11     ------> FDCAN1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8000e60:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e74:	2300      	movs	r3, #0
 8000e76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000e7a:	2309      	movs	r3, #9
 8000e7c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e80:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e84:	4619      	mov	r1, r3
 8000e86:	4809      	ldr	r0, [pc, #36]	; (8000eac <HAL_FDCAN_MspInit+0xd8>)
 8000e88:	f001 ff8e 	bl	8002da8 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2100      	movs	r1, #0
 8000e90:	2013      	movs	r0, #19
 8000e92:	f000 fd1d 	bl	80018d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000e96:	2013      	movs	r0, #19
 8000e98:	f000 fd34 	bl	8001904 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000e9c:	bf00      	nop
 8000e9e:	37e0      	adds	r7, #224	; 0xe0
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	4000a000 	.word	0x4000a000
 8000ea8:	58024400 	.word	0x58024400
 8000eac:	58020000 	.word	0x58020000

08000eb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b0b8      	sub	sp, #224	; 0xe0
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	22b8      	movs	r2, #184	; 0xb8
 8000ece:	2100      	movs	r1, #0
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f006 f8d5 	bl	8007080 <memset>
  if(hi2c->Instance==I2C4)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a25      	ldr	r2, [pc, #148]	; (8000f70 <HAL_I2C_MspInit+0xc0>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d142      	bne.n	8000f66 <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000ee0:	2310      	movs	r3, #16
 8000ee2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eea:	f107 0314 	add.w	r3, r7, #20
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f004 fc34 	bl	800575c <HAL_RCCEx_PeriphCLKConfig>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000efa:	f7ff ff4b 	bl	8000d94 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000efe:	4b1d      	ldr	r3, [pc, #116]	; (8000f74 <HAL_I2C_MspInit+0xc4>)
 8000f00:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f04:	4a1b      	ldr	r2, [pc, #108]	; (8000f74 <HAL_I2C_MspInit+0xc4>)
 8000f06:	f043 0308 	orr.w	r3, r3, #8
 8000f0a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f0e:	4b19      	ldr	r3, [pc, #100]	; (8000f74 <HAL_I2C_MspInit+0xc4>)
 8000f10:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f14:	f003 0308 	and.w	r3, r3, #8
 8000f18:	613b      	str	r3, [r7, #16]
 8000f1a:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration
    PD13     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    GPIO_InitStruct.Pin = I2C4_SDA_Pin|I2C4_SCL_Pin;
 8000f1c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000f20:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f24:	2312      	movs	r3, #18
 8000f26:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f30:	2300      	movs	r3, #0
 8000f32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000f36:	2304      	movs	r3, #4
 8000f38:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f3c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f40:	4619      	mov	r1, r3
 8000f42:	480d      	ldr	r0, [pc, #52]	; (8000f78 <HAL_I2C_MspInit+0xc8>)
 8000f44:	f001 ff30 	bl	8002da8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000f48:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <HAL_I2C_MspInit+0xc4>)
 8000f4a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000f4e:	4a09      	ldr	r2, [pc, #36]	; (8000f74 <HAL_I2C_MspInit+0xc4>)
 8000f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f54:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000f58:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <HAL_I2C_MspInit+0xc4>)
 8000f5a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8000f66:	bf00      	nop
 8000f68:	37e0      	adds	r7, #224	; 0xe0
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	58001c00 	.word	0x58001c00
 8000f74:	58024400 	.word	0x58024400
 8000f78:	58020c00 	.word	0x58020c00

08000f7c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b0ba      	sub	sp, #232	; 0xe8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f84:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f94:	f107 031c 	add.w	r3, r7, #28
 8000f98:	22b8      	movs	r2, #184	; 0xb8
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f006 f86f 	bl	8007080 <memset>
  if(hltdc->Instance==LTDC)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a51      	ldr	r2, [pc, #324]	; (80010ec <HAL_LTDC_MspInit+0x170>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	f040 809b 	bne.w	80010e4 <HAL_LTDC_MspInit+0x168>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000fae:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000fb2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL3.PLL3M = 4;
 8000fb4:	2304      	movs	r3, #4
 8000fb6:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 8;
 8000fb8:	2308      	movs	r3, #8
 8000fba:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 17;
 8000fbc:	2311      	movs	r3, #17
 8000fbe:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 1;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000fc8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000fcc:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fd6:	f107 031c 	add.w	r3, r7, #28
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f004 fbbe 	bl	800575c <HAL_RCCEx_PeriphCLKConfig>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_LTDC_MspInit+0x6e>
    {
      Error_Handler();
 8000fe6:	f7ff fed5 	bl	8000d94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000fea:	4b41      	ldr	r3, [pc, #260]	; (80010f0 <HAL_LTDC_MspInit+0x174>)
 8000fec:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8000ff0:	4a3f      	ldr	r2, [pc, #252]	; (80010f0 <HAL_LTDC_MspInit+0x174>)
 8000ff2:	f043 0308 	orr.w	r3, r3, #8
 8000ff6:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
 8000ffa:	4b3d      	ldr	r3, [pc, #244]	; (80010f0 <HAL_LTDC_MspInit+0x174>)
 8000ffc:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8001000:	f003 0308 	and.w	r3, r3, #8
 8001004:	61bb      	str	r3, [r7, #24]
 8001006:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001008:	4b39      	ldr	r3, [pc, #228]	; (80010f0 <HAL_LTDC_MspInit+0x174>)
 800100a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800100e:	4a38      	ldr	r2, [pc, #224]	; (80010f0 <HAL_LTDC_MspInit+0x174>)
 8001010:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001014:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001018:	4b35      	ldr	r3, [pc, #212]	; (80010f0 <HAL_LTDC_MspInit+0x174>)
 800101a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800101e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001022:	617b      	str	r3, [r7, #20]
 8001024:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001026:	4b32      	ldr	r3, [pc, #200]	; (80010f0 <HAL_LTDC_MspInit+0x174>)
 8001028:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800102c:	4a30      	ldr	r2, [pc, #192]	; (80010f0 <HAL_LTDC_MspInit+0x174>)
 800102e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001032:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001036:	4b2e      	ldr	r3, [pc, #184]	; (80010f0 <HAL_LTDC_MspInit+0x174>)
 8001038:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800103c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001044:	4b2a      	ldr	r3, [pc, #168]	; (80010f0 <HAL_LTDC_MspInit+0x174>)
 8001046:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800104a:	4a29      	ldr	r2, [pc, #164]	; (80010f0 <HAL_LTDC_MspInit+0x174>)
 800104c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001050:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001054:	4b26      	ldr	r3, [pc, #152]	; (80010f0 <HAL_LTDC_MspInit+0x174>)
 8001056:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800105a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
    PJ1     ------> LTDC_R2
    PJ4     ------> LTDC_R5
    PJ2     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    */
    GPIO_InitStruct.Pin = LCD_B6_Pin|LCD_B7_Pin|LCD_B4_Pin|LCD_B5_Pin
 8001062:	23ff      	movs	r3, #255	; 0xff
 8001064:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |LCD_DE_Pin|LCD_G7_Pin|LCD_G6_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001068:	2302      	movs	r3, #2
 800106a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001074:	2300      	movs	r3, #0
 8001076:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800107a:	230e      	movs	r3, #14
 800107c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001080:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001084:	4619      	mov	r1, r3
 8001086:	481b      	ldr	r0, [pc, #108]	; (80010f4 <HAL_LTDC_MspInit+0x178>)
 8001088:	f001 fe8e 	bl	8002da8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B3_Pin|LCD_B2_Pin|LCD_B1_Pin|LCD_B0_Pin
 800108c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001090:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |LCD_G4_Pin|LCD_G3_Pin|LCD_G2_Pin|LCD_G1_Pin
                          |LCD_R7_Pin|LCD_G0_Pin|LCD_R1_Pin|LCD_R6_Pin
                          |LCD_R2_Pin|LCD_R5_Pin|LCD_R3_Pin|LCD_R4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001094:	2302      	movs	r3, #2
 8001096:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a0:	2300      	movs	r3, #0
 80010a2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010a6:	230e      	movs	r3, #14
 80010a8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80010ac:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010b0:	4619      	mov	r1, r3
 80010b2:	4811      	ldr	r0, [pc, #68]	; (80010f8 <HAL_LTDC_MspInit+0x17c>)
 80010b4:	f001 fe78 	bl	8002da8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_CLK_Pin|LCD_VSYNC_Pin|LCD_R0_Pin;
 80010b8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80010bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c0:	2302      	movs	r3, #2
 80010c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010cc:	2300      	movs	r3, #0
 80010ce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010d2:	230e      	movs	r3, #14
 80010d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80010d8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010dc:	4619      	mov	r1, r3
 80010de:	4807      	ldr	r0, [pc, #28]	; (80010fc <HAL_LTDC_MspInit+0x180>)
 80010e0:	f001 fe62 	bl	8002da8 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80010e4:	bf00      	nop
 80010e6:	37e8      	adds	r7, #232	; 0xe8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	50001000 	.word	0x50001000
 80010f0:	58024400 	.word	0x58024400
 80010f4:	58022800 	.word	0x58022800
 80010f8:	58022400 	.word	0x58022400
 80010fc:	58022000 	.word	0x58022000

08001100 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b0bc      	sub	sp, #240	; 0xf0
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001118:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800111c:	22b8      	movs	r2, #184	; 0xb8
 800111e:	2100      	movs	r1, #0
 8001120:	4618      	mov	r0, r3
 8001122:	f005 ffad 	bl	8007080 <memset>
  if(hospi->Instance==OCTOSPI1)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a87      	ldr	r2, [pc, #540]	; (8001348 <HAL_OSPI_MspInit+0x248>)
 800112c:	4293      	cmp	r3, r2
 800112e:	f040 8107 	bne.w	8001340 <HAL_OSPI_MspInit+0x240>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8001132:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001136:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001138:	2304      	movs	r3, #4
 800113a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2N = 8;
 800113c:	2308      	movs	r3, #8
 800113e:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001140:	2302      	movs	r3, #2
 8001142:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001144:	2302      	movs	r3, #2
 8001146:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2R = 1;
 8001148:	2301      	movs	r3, #1
 800114a:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800114c:	23c0      	movs	r3, #192	; 0xc0
 800114e:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001150:	2300      	movs	r3, #0
 8001152:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8001158:	2320      	movs	r3, #32
 800115a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800115c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001160:	4618      	mov	r0, r3
 8001162:	f004 fafb 	bl	800575c <HAL_RCCEx_PeriphCLKConfig>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <HAL_OSPI_MspInit+0x70>
    {
      Error_Handler();
 800116c:	f7ff fe12 	bl	8000d94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8001170:	4b76      	ldr	r3, [pc, #472]	; (800134c <HAL_OSPI_MspInit+0x24c>)
 8001172:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001176:	4a75      	ldr	r2, [pc, #468]	; (800134c <HAL_OSPI_MspInit+0x24c>)
 8001178:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800117c:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8001180:	4b72      	ldr	r3, [pc, #456]	; (800134c <HAL_OSPI_MspInit+0x24c>)
 8001182:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001186:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800118a:	623b      	str	r3, [r7, #32]
 800118c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 800118e:	4b6f      	ldr	r3, [pc, #444]	; (800134c <HAL_OSPI_MspInit+0x24c>)
 8001190:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001194:	4a6d      	ldr	r2, [pc, #436]	; (800134c <HAL_OSPI_MspInit+0x24c>)
 8001196:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800119a:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 800119e:	4b6b      	ldr	r3, [pc, #428]	; (800134c <HAL_OSPI_MspInit+0x24c>)
 80011a0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80011a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011a8:	61fb      	str	r3, [r7, #28]
 80011aa:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80011ac:	4b67      	ldr	r3, [pc, #412]	; (800134c <HAL_OSPI_MspInit+0x24c>)
 80011ae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011b2:	4a66      	ldr	r2, [pc, #408]	; (800134c <HAL_OSPI_MspInit+0x24c>)
 80011b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011b8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80011bc:	4b63      	ldr	r3, [pc, #396]	; (800134c <HAL_OSPI_MspInit+0x24c>)
 80011be:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011c6:	61bb      	str	r3, [r7, #24]
 80011c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ca:	4b60      	ldr	r3, [pc, #384]	; (800134c <HAL_OSPI_MspInit+0x24c>)
 80011cc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011d0:	4a5e      	ldr	r2, [pc, #376]	; (800134c <HAL_OSPI_MspInit+0x24c>)
 80011d2:	f043 0308 	orr.w	r3, r3, #8
 80011d6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80011da:	4b5c      	ldr	r3, [pc, #368]	; (800134c <HAL_OSPI_MspInit+0x24c>)
 80011dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011e0:	f003 0308 	and.w	r3, r3, #8
 80011e4:	617b      	str	r3, [r7, #20]
 80011e6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e8:	4b58      	ldr	r3, [pc, #352]	; (800134c <HAL_OSPI_MspInit+0x24c>)
 80011ea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011ee:	4a57      	ldr	r2, [pc, #348]	; (800134c <HAL_OSPI_MspInit+0x24c>)
 80011f0:	f043 0304 	orr.w	r3, r3, #4
 80011f4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80011f8:	4b54      	ldr	r3, [pc, #336]	; (800134c <HAL_OSPI_MspInit+0x24c>)
 80011fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011fe:	f003 0304 	and.w	r3, r3, #4
 8001202:	613b      	str	r3, [r7, #16]
 8001204:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001206:	4b51      	ldr	r3, [pc, #324]	; (800134c <HAL_OSPI_MspInit+0x24c>)
 8001208:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800120c:	4a4f      	ldr	r2, [pc, #316]	; (800134c <HAL_OSPI_MspInit+0x24c>)
 800120e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001212:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001216:	4b4d      	ldr	r3, [pc, #308]	; (800134c <HAL_OSPI_MspInit+0x24c>)
 8001218:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800121c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001224:	4b49      	ldr	r3, [pc, #292]	; (800134c <HAL_OSPI_MspInit+0x24c>)
 8001226:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800122a:	4a48      	ldr	r2, [pc, #288]	; (800134c <HAL_OSPI_MspInit+0x24c>)
 800122c:	f043 0302 	orr.w	r3, r3, #2
 8001230:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001234:	4b45      	ldr	r3, [pc, #276]	; (800134c <HAL_OSPI_MspInit+0x24c>)
 8001236:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	60bb      	str	r3, [r7, #8]
 8001240:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> OCTOSPIM_P1_IO4
    PH3     ------> OCTOSPIM_P1_IO5
    PC5     ------> OCTOSPIM_P1_DQS
    PB2     ------> OCTOSPIM_P1_CLK
    */
    GPIO_InitStruct.Pin = OCSPI1_IO6_Pin;
 8001242:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001246:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124a:	2302      	movs	r3, #2
 800124c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001256:	2303      	movs	r3, #3
 8001258:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800125c:	2309      	movs	r3, #9
 800125e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(OCSPI1_IO6_GPIO_Port, &GPIO_InitStruct);
 8001262:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001266:	4619      	mov	r1, r3
 8001268:	4839      	ldr	r0, [pc, #228]	; (8001350 <HAL_OSPI_MspInit+0x250>)
 800126a:	f001 fd9d 	bl	8002da8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_IO7_Pin;
 800126e:	2380      	movs	r3, #128	; 0x80
 8001270:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001274:	2302      	movs	r3, #2
 8001276:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127a:	2300      	movs	r3, #0
 800127c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001280:	2303      	movs	r3, #3
 8001282:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001286:	230a      	movs	r3, #10
 8001288:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(OCSPI1_IO7_GPIO_Port, &GPIO_InitStruct);
 800128c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001290:	4619      	mov	r1, r3
 8001292:	4830      	ldr	r0, [pc, #192]	; (8001354 <HAL_OSPI_MspInit+0x254>)
 8001294:	f001 fd88 	bl	8002da8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_NCS_Pin;
 8001298:	2340      	movs	r3, #64	; 0x40
 800129a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129e:	2302      	movs	r3, #2
 80012a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012aa:	2303      	movs	r3, #3
 80012ac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80012b0:	230a      	movs	r3, #10
 80012b2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(OCSPI1_NCS_GPIO_Port, &GPIO_InitStruct);
 80012b6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80012ba:	4619      	mov	r1, r3
 80012bc:	4824      	ldr	r0, [pc, #144]	; (8001350 <HAL_OSPI_MspInit+0x250>)
 80012be:	f001 fd73 	bl	8002da8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_IO4_Pin|OCSPI1_DQS_Pin;
 80012c2:	2322      	movs	r3, #34	; 0x22
 80012c4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c8:	2302      	movs	r3, #2
 80012ca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d4:	2303      	movs	r3, #3
 80012d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80012da:	230a      	movs	r3, #10
 80012dc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012e0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80012e4:	4619      	mov	r1, r3
 80012e6:	481c      	ldr	r0, [pc, #112]	; (8001358 <HAL_OSPI_MspInit+0x258>)
 80012e8:	f001 fd5e 	bl	8002da8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_IO5_Pin;
 80012ec:	2308      	movs	r3, #8
 80012ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f2:	2302      	movs	r3, #2
 80012f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fe:	2303      	movs	r3, #3
 8001300:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001304:	2309      	movs	r3, #9
 8001306:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(OCSPI1_IO5_GPIO_Port, &GPIO_InitStruct);
 800130a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800130e:	4619      	mov	r1, r3
 8001310:	4812      	ldr	r0, [pc, #72]	; (800135c <HAL_OSPI_MspInit+0x25c>)
 8001312:	f001 fd49 	bl	8002da8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_CLK_Pin;
 8001316:	2304      	movs	r3, #4
 8001318:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131c:	2302      	movs	r3, #2
 800131e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001322:	2300      	movs	r3, #0
 8001324:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001328:	2303      	movs	r3, #3
 800132a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800132e:	2309      	movs	r3, #9
 8001330:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(OCSPI1_CLK_GPIO_Port, &GPIO_InitStruct);
 8001334:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001338:	4619      	mov	r1, r3
 800133a:	4809      	ldr	r0, [pc, #36]	; (8001360 <HAL_OSPI_MspInit+0x260>)
 800133c:	f001 fd34 	bl	8002da8 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8001340:	bf00      	nop
 8001342:	37f0      	adds	r7, #240	; 0xf0
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	52005000 	.word	0x52005000
 800134c:	58024400 	.word	0x58024400
 8001350:	58021800 	.word	0x58021800
 8001354:	58020c00 	.word	0x58020c00
 8001358:	58020800 	.word	0x58020800
 800135c:	58021c00 	.word	0x58021c00
 8001360:	58020400 	.word	0x58020400

08001364 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b0b0      	sub	sp, #192	; 0xc0
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800136c:	f107 0308 	add.w	r3, r7, #8
 8001370:	22b8      	movs	r2, #184	; 0xb8
 8001372:	2100      	movs	r1, #0
 8001374:	4618      	mov	r0, r3
 8001376:	f005 fe83 	bl	8007080 <memset>
  if(hrtc->Instance==RTC)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a0f      	ldr	r2, [pc, #60]	; (80013bc <HAL_RTC_MspInit+0x58>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d116      	bne.n	80013b2 <HAL_RTC_MspInit+0x4e>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001384:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001388:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800138a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800138e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001392:	f107 0308 	add.w	r3, r7, #8
 8001396:	4618      	mov	r0, r3
 8001398:	f004 f9e0 	bl	800575c <HAL_RCCEx_PeriphCLKConfig>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80013a2:	f7ff fcf7 	bl	8000d94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80013a6:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <HAL_RTC_MspInit+0x5c>)
 80013a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013aa:	4a05      	ldr	r2, [pc, #20]	; (80013c0 <HAL_RTC_MspInit+0x5c>)
 80013ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013b0:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80013b2:	bf00      	nop
 80013b4:	37c0      	adds	r7, #192	; 0xc0
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	58004000 	.word	0x58004000
 80013c0:	58024400 	.word	0x58024400

080013c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b090      	sub	sp, #64	; 0x40
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2b0f      	cmp	r3, #15
 80013d0:	d827      	bhi.n	8001422 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80013d2:	2200      	movs	r2, #0
 80013d4:	6879      	ldr	r1, [r7, #4]
 80013d6:	2036      	movs	r0, #54	; 0x36
 80013d8:	f000 fa7a 	bl	80018d0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80013dc:	2036      	movs	r0, #54	; 0x36
 80013de:	f000 fa91 	bl	8001904 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80013e2:	4a29      	ldr	r2, [pc, #164]	; (8001488 <HAL_InitTick+0xc4>)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80013e8:	4b28      	ldr	r3, [pc, #160]	; (800148c <HAL_InitTick+0xc8>)
 80013ea:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80013ee:	4a27      	ldr	r2, [pc, #156]	; (800148c <HAL_InitTick+0xc8>)
 80013f0:	f043 0310 	orr.w	r3, r3, #16
 80013f4:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80013f8:	4b24      	ldr	r3, [pc, #144]	; (800148c <HAL_InitTick+0xc8>)
 80013fa:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80013fe:	f003 0310 	and.w	r3, r3, #16
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001406:	f107 0210 	add.w	r2, r7, #16
 800140a:	f107 0314 	add.w	r3, r7, #20
 800140e:	4611      	mov	r1, r2
 8001410:	4618      	mov	r0, r3
 8001412:	f004 f961 	bl	80056d8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001418:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800141a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800141c:	2b00      	cmp	r3, #0
 800141e:	d106      	bne.n	800142e <HAL_InitTick+0x6a>
 8001420:	e001      	b.n	8001426 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e02b      	b.n	800147e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001426:	f004 f941 	bl	80056ac <HAL_RCC_GetPCLK1Freq>
 800142a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800142c:	e004      	b.n	8001438 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800142e:	f004 f93d 	bl	80056ac <HAL_RCC_GetPCLK1Freq>
 8001432:	4603      	mov	r3, r0
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800143a:	4a15      	ldr	r2, [pc, #84]	; (8001490 <HAL_InitTick+0xcc>)
 800143c:	fba2 2303 	umull	r2, r3, r2, r3
 8001440:	0c9b      	lsrs	r3, r3, #18
 8001442:	3b01      	subs	r3, #1
 8001444:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001446:	4b13      	ldr	r3, [pc, #76]	; (8001494 <HAL_InitTick+0xd0>)
 8001448:	4a13      	ldr	r2, [pc, #76]	; (8001498 <HAL_InitTick+0xd4>)
 800144a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800144c:	4b11      	ldr	r3, [pc, #68]	; (8001494 <HAL_InitTick+0xd0>)
 800144e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001452:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001454:	4a0f      	ldr	r2, [pc, #60]	; (8001494 <HAL_InitTick+0xd0>)
 8001456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001458:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800145a:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <HAL_InitTick+0xd0>)
 800145c:	2200      	movs	r2, #0
 800145e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001460:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <HAL_InitTick+0xd0>)
 8001462:	2200      	movs	r2, #0
 8001464:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001466:	480b      	ldr	r0, [pc, #44]	; (8001494 <HAL_InitTick+0xd0>)
 8001468:	f005 fafe 	bl	8006a68 <HAL_TIM_Base_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d104      	bne.n	800147c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001472:	4808      	ldr	r0, [pc, #32]	; (8001494 <HAL_InitTick+0xd0>)
 8001474:	f005 fb5a 	bl	8006b2c <HAL_TIM_Base_Start_IT>
 8001478:	4603      	mov	r3, r0
 800147a:	e000      	b.n	800147e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
}
 800147e:	4618      	mov	r0, r3
 8001480:	3740      	adds	r7, #64	; 0x40
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	24000008 	.word	0x24000008
 800148c:	58024400 	.word	0x58024400
 8001490:	431bde83 	.word	0x431bde83
 8001494:	24000250 	.word	0x24000250
 8001498:	40001000 	.word	0x40001000

0800149c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <NMI_Handler+0x4>

080014a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014a6:	e7fe      	b.n	80014a6 <HardFault_Handler+0x4>

080014a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014ac:	e7fe      	b.n	80014ac <MemManage_Handler+0x4>

080014ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014b2:	e7fe      	b.n	80014b2 <BusFault_Handler+0x4>

080014b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014b8:	e7fe      	b.n	80014b8 <UsageFault_Handler+0x4>

080014ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
	...

080014f4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80014f8:	4802      	ldr	r0, [pc, #8]	; (8001504 <FDCAN1_IT0_IRQHandler+0x10>)
 80014fa:	f000 ff47 	bl	800238c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	2400002c 	.word	0x2400002c

08001508 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800150c:	4802      	ldr	r0, [pc, #8]	; (8001518 <TIM6_DAC_IRQHandler+0x10>)
 800150e:	f005 fb85 	bl	8006c1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	24000250 	.word	0x24000250

0800151c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001520:	4b32      	ldr	r3, [pc, #200]	; (80015ec <SystemInit+0xd0>)
 8001522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001526:	4a31      	ldr	r2, [pc, #196]	; (80015ec <SystemInit+0xd0>)
 8001528:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800152c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001530:	4b2f      	ldr	r3, [pc, #188]	; (80015f0 <SystemInit+0xd4>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 030f 	and.w	r3, r3, #15
 8001538:	2b02      	cmp	r3, #2
 800153a:	d807      	bhi.n	800154c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800153c:	4b2c      	ldr	r3, [pc, #176]	; (80015f0 <SystemInit+0xd4>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f023 030f 	bic.w	r3, r3, #15
 8001544:	4a2a      	ldr	r2, [pc, #168]	; (80015f0 <SystemInit+0xd4>)
 8001546:	f043 0303 	orr.w	r3, r3, #3
 800154a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800154c:	4b29      	ldr	r3, [pc, #164]	; (80015f4 <SystemInit+0xd8>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a28      	ldr	r2, [pc, #160]	; (80015f4 <SystemInit+0xd8>)
 8001552:	f043 0301 	orr.w	r3, r3, #1
 8001556:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001558:	4b26      	ldr	r3, [pc, #152]	; (80015f4 <SystemInit+0xd8>)
 800155a:	2200      	movs	r2, #0
 800155c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800155e:	4b25      	ldr	r3, [pc, #148]	; (80015f4 <SystemInit+0xd8>)
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	4924      	ldr	r1, [pc, #144]	; (80015f4 <SystemInit+0xd8>)
 8001564:	4b24      	ldr	r3, [pc, #144]	; (80015f8 <SystemInit+0xdc>)
 8001566:	4013      	ands	r3, r2
 8001568:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800156a:	4b21      	ldr	r3, [pc, #132]	; (80015f0 <SystemInit+0xd4>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 030c 	and.w	r3, r3, #12
 8001572:	2b00      	cmp	r3, #0
 8001574:	d007      	beq.n	8001586 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001576:	4b1e      	ldr	r3, [pc, #120]	; (80015f0 <SystemInit+0xd4>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f023 030f 	bic.w	r3, r3, #15
 800157e:	4a1c      	ldr	r2, [pc, #112]	; (80015f0 <SystemInit+0xd4>)
 8001580:	f043 0303 	orr.w	r3, r3, #3
 8001584:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001586:	4b1b      	ldr	r3, [pc, #108]	; (80015f4 <SystemInit+0xd8>)
 8001588:	2200      	movs	r2, #0
 800158a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 800158c:	4b19      	ldr	r3, [pc, #100]	; (80015f4 <SystemInit+0xd8>)
 800158e:	2200      	movs	r2, #0
 8001590:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001592:	4b18      	ldr	r3, [pc, #96]	; (80015f4 <SystemInit+0xd8>)
 8001594:	2200      	movs	r2, #0
 8001596:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001598:	4b16      	ldr	r3, [pc, #88]	; (80015f4 <SystemInit+0xd8>)
 800159a:	4a18      	ldr	r2, [pc, #96]	; (80015fc <SystemInit+0xe0>)
 800159c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800159e:	4b15      	ldr	r3, [pc, #84]	; (80015f4 <SystemInit+0xd8>)
 80015a0:	4a17      	ldr	r2, [pc, #92]	; (8001600 <SystemInit+0xe4>)
 80015a2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80015a4:	4b13      	ldr	r3, [pc, #76]	; (80015f4 <SystemInit+0xd8>)
 80015a6:	4a17      	ldr	r2, [pc, #92]	; (8001604 <SystemInit+0xe8>)
 80015a8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80015aa:	4b12      	ldr	r3, [pc, #72]	; (80015f4 <SystemInit+0xd8>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80015b0:	4b10      	ldr	r3, [pc, #64]	; (80015f4 <SystemInit+0xd8>)
 80015b2:	4a14      	ldr	r2, [pc, #80]	; (8001604 <SystemInit+0xe8>)
 80015b4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80015b6:	4b0f      	ldr	r3, [pc, #60]	; (80015f4 <SystemInit+0xd8>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80015bc:	4b0d      	ldr	r3, [pc, #52]	; (80015f4 <SystemInit+0xd8>)
 80015be:	4a11      	ldr	r2, [pc, #68]	; (8001604 <SystemInit+0xe8>)
 80015c0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80015c2:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <SystemInit+0xd8>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015c8:	4b0a      	ldr	r3, [pc, #40]	; (80015f4 <SystemInit+0xd8>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a09      	ldr	r2, [pc, #36]	; (80015f4 <SystemInit+0xd8>)
 80015ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015d2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80015d4:	4b07      	ldr	r3, [pc, #28]	; (80015f4 <SystemInit+0xd8>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80015da:	4b0b      	ldr	r3, [pc, #44]	; (8001608 <SystemInit+0xec>)
 80015dc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80015e0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80015e2:	bf00      	nop
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	e000ed00 	.word	0xe000ed00
 80015f0:	52002000 	.word	0x52002000
 80015f4:	58024400 	.word	0x58024400
 80015f8:	eaf6ed7f 	.word	0xeaf6ed7f
 80015fc:	02020200 	.word	0x02020200
 8001600:	01ff0000 	.word	0x01ff0000
 8001604:	01010280 	.word	0x01010280
 8001608:	52004000 	.word	0x52004000

0800160c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800160c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001644 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001610:	f7ff ff84 	bl	800151c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001614:	480c      	ldr	r0, [pc, #48]	; (8001648 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001616:	490d      	ldr	r1, [pc, #52]	; (800164c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001618:	4a0d      	ldr	r2, [pc, #52]	; (8001650 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800161a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800161c:	e002      	b.n	8001624 <LoopCopyDataInit>

0800161e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800161e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001620:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001622:	3304      	adds	r3, #4

08001624 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001624:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001626:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001628:	d3f9      	bcc.n	800161e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800162a:	4a0a      	ldr	r2, [pc, #40]	; (8001654 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800162c:	4c0a      	ldr	r4, [pc, #40]	; (8001658 <LoopFillZerobss+0x22>)
  movs r3, #0
 800162e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001630:	e001      	b.n	8001636 <LoopFillZerobss>

08001632 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001632:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001634:	3204      	adds	r2, #4

08001636 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001636:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001638:	d3fb      	bcc.n	8001632 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800163a:	f005 fcef 	bl	800701c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800163e:	f7fe fe7b 	bl	8000338 <main>
  bx  lr
 8001642:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001644:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001648:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800164c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001650:	0800711c 	.word	0x0800711c
  ldr r2, =_sbss
 8001654:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001658:	240002a0 	.word	0x240002a0

0800165c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800165c:	e7fe      	b.n	800165c <ADC_IRQHandler>
	...

08001660 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001666:	2003      	movs	r0, #3
 8001668:	f000 f927 	bl	80018ba <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800166c:	f003 fe74 	bl	8005358 <HAL_RCC_GetSysClockFreq>
 8001670:	4602      	mov	r2, r0
 8001672:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <HAL_Init+0x68>)
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	0a1b      	lsrs	r3, r3, #8
 8001678:	f003 030f 	and.w	r3, r3, #15
 800167c:	4913      	ldr	r1, [pc, #76]	; (80016cc <HAL_Init+0x6c>)
 800167e:	5ccb      	ldrb	r3, [r1, r3]
 8001680:	f003 031f 	and.w	r3, r3, #31
 8001684:	fa22 f303 	lsr.w	r3, r2, r3
 8001688:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800168a:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <HAL_Init+0x68>)
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	f003 030f 	and.w	r3, r3, #15
 8001692:	4a0e      	ldr	r2, [pc, #56]	; (80016cc <HAL_Init+0x6c>)
 8001694:	5cd3      	ldrb	r3, [r2, r3]
 8001696:	f003 031f 	and.w	r3, r3, #31
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	fa22 f303 	lsr.w	r3, r2, r3
 80016a0:	4a0b      	ldr	r2, [pc, #44]	; (80016d0 <HAL_Init+0x70>)
 80016a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80016a4:	4a0b      	ldr	r2, [pc, #44]	; (80016d4 <HAL_Init+0x74>)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016aa:	200f      	movs	r0, #15
 80016ac:	f7ff fe8a 	bl	80013c4 <HAL_InitTick>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e002      	b.n	80016c0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016ba:	f7ff fb71 	bl	8000da0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016be:	2300      	movs	r3, #0
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	58024400 	.word	0x58024400
 80016cc:	080070f4 	.word	0x080070f4
 80016d0:	24000004 	.word	0x24000004
 80016d4:	24000000 	.word	0x24000000

080016d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016dc:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <HAL_IncTick+0x20>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	461a      	mov	r2, r3
 80016e2:	4b06      	ldr	r3, [pc, #24]	; (80016fc <HAL_IncTick+0x24>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4413      	add	r3, r2
 80016e8:	4a04      	ldr	r2, [pc, #16]	; (80016fc <HAL_IncTick+0x24>)
 80016ea:	6013      	str	r3, [r2, #0]
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	2400000c 	.word	0x2400000c
 80016fc:	2400029c 	.word	0x2400029c

08001700 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  return uwTick;
 8001704:	4b03      	ldr	r3, [pc, #12]	; (8001714 <HAL_GetTick+0x14>)
 8001706:	681b      	ldr	r3, [r3, #0]
}
 8001708:	4618      	mov	r0, r3
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	2400029c 	.word	0x2400029c

08001718 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001720:	f7ff ffee 	bl	8001700 <HAL_GetTick>
 8001724:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001730:	d005      	beq.n	800173e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001732:	4b0a      	ldr	r3, [pc, #40]	; (800175c <HAL_Delay+0x44>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	461a      	mov	r2, r3
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4413      	add	r3, r2
 800173c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800173e:	bf00      	nop
 8001740:	f7ff ffde 	bl	8001700 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	429a      	cmp	r2, r3
 800174e:	d8f7      	bhi.n	8001740 <HAL_Delay+0x28>
  {
  }
}
 8001750:	bf00      	nop
 8001752:	bf00      	nop
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	2400000c 	.word	0x2400000c

08001760 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001770:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001776:	68ba      	ldr	r2, [r7, #8]
 8001778:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800177c:	4013      	ands	r3, r2
 800177e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <__NVIC_SetPriorityGrouping+0x44>)
 800178a:	4313      	orrs	r3, r2
 800178c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800178e:	4a04      	ldr	r2, [pc, #16]	; (80017a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	60d3      	str	r3, [r2, #12]
}
 8001794:	bf00      	nop
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	e000ed00 	.word	0xe000ed00
 80017a4:	05fa0000 	.word	0x05fa0000

080017a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017ac:	4b04      	ldr	r3, [pc, #16]	; (80017c0 <__NVIC_GetPriorityGrouping+0x18>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	0a1b      	lsrs	r3, r3, #8
 80017b2:	f003 0307 	and.w	r3, r3, #7
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	db0b      	blt.n	80017ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017d6:	88fb      	ldrh	r3, [r7, #6]
 80017d8:	f003 021f 	and.w	r2, r3, #31
 80017dc:	4907      	ldr	r1, [pc, #28]	; (80017fc <__NVIC_EnableIRQ+0x38>)
 80017de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017e2:	095b      	lsrs	r3, r3, #5
 80017e4:	2001      	movs	r0, #1
 80017e6:	fa00 f202 	lsl.w	r2, r0, r2
 80017ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	e000e100 	.word	0xe000e100

08001800 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	6039      	str	r1, [r7, #0]
 800180a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800180c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001810:	2b00      	cmp	r3, #0
 8001812:	db0a      	blt.n	800182a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	b2da      	uxtb	r2, r3
 8001818:	490c      	ldr	r1, [pc, #48]	; (800184c <__NVIC_SetPriority+0x4c>)
 800181a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800181e:	0112      	lsls	r2, r2, #4
 8001820:	b2d2      	uxtb	r2, r2
 8001822:	440b      	add	r3, r1
 8001824:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001828:	e00a      	b.n	8001840 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	b2da      	uxtb	r2, r3
 800182e:	4908      	ldr	r1, [pc, #32]	; (8001850 <__NVIC_SetPriority+0x50>)
 8001830:	88fb      	ldrh	r3, [r7, #6]
 8001832:	f003 030f 	and.w	r3, r3, #15
 8001836:	3b04      	subs	r3, #4
 8001838:	0112      	lsls	r2, r2, #4
 800183a:	b2d2      	uxtb	r2, r2
 800183c:	440b      	add	r3, r1
 800183e:	761a      	strb	r2, [r3, #24]
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	e000e100 	.word	0xe000e100
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001854:	b480      	push	{r7}
 8001856:	b089      	sub	sp, #36	; 0x24
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	f1c3 0307 	rsb	r3, r3, #7
 800186e:	2b04      	cmp	r3, #4
 8001870:	bf28      	it	cs
 8001872:	2304      	movcs	r3, #4
 8001874:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	3304      	adds	r3, #4
 800187a:	2b06      	cmp	r3, #6
 800187c:	d902      	bls.n	8001884 <NVIC_EncodePriority+0x30>
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	3b03      	subs	r3, #3
 8001882:	e000      	b.n	8001886 <NVIC_EncodePriority+0x32>
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001888:	f04f 32ff 	mov.w	r2, #4294967295
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	43da      	mvns	r2, r3
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	401a      	ands	r2, r3
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800189c:	f04f 31ff 	mov.w	r1, #4294967295
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	fa01 f303 	lsl.w	r3, r1, r3
 80018a6:	43d9      	mvns	r1, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ac:	4313      	orrs	r3, r2
         );
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3724      	adds	r7, #36	; 0x24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b082      	sub	sp, #8
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7ff ff4c 	bl	8001760 <__NVIC_SetPriorityGrouping>
}
 80018c8:	bf00      	nop
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
 80018dc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018de:	f7ff ff63 	bl	80017a8 <__NVIC_GetPriorityGrouping>
 80018e2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	68b9      	ldr	r1, [r7, #8]
 80018e8:	6978      	ldr	r0, [r7, #20]
 80018ea:	f7ff ffb3 	bl	8001854 <NVIC_EncodePriority>
 80018ee:	4602      	mov	r2, r0
 80018f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018f4:	4611      	mov	r1, r2
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff ff82 	bl	8001800 <__NVIC_SetPriority>
}
 80018fc:	bf00      	nop
 80018fe:	3718      	adds	r7, #24
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800190e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff ff56 	bl	80017c4 <__NVIC_EnableIRQ>
}
 8001918:	bf00      	nop
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b098      	sub	sp, #96	; 0x60
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8001928:	4a84      	ldr	r2, [pc, #528]	; (8001b3c <HAL_FDCAN_Init+0x21c>)
 800192a:	f107 030c 	add.w	r3, r7, #12
 800192e:	4611      	mov	r1, r2
 8001930:	224c      	movs	r2, #76	; 0x4c
 8001932:	4618      	mov	r0, r3
 8001934:	f005 fb96 	bl	8007064 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d101      	bne.n	8001942 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e1c6      	b.n	8001cd0 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a7e      	ldr	r2, [pc, #504]	; (8001b40 <HAL_FDCAN_Init+0x220>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d106      	bne.n	800195a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001954:	461a      	mov	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001960:	b2db      	uxtb	r3, r3
 8001962:	2b00      	cmp	r3, #0
 8001964:	d106      	bne.n	8001974 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f7ff fa30 	bl	8000dd4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	699a      	ldr	r2, [r3, #24]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f022 0210 	bic.w	r2, r2, #16
 8001982:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001984:	f7ff febc 	bl	8001700 <HAL_GetTick>
 8001988:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800198a:	e014      	b.n	80019b6 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800198c:	f7ff feb8 	bl	8001700 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b0a      	cmp	r3, #10
 8001998:	d90d      	bls.n	80019b6 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80019a0:	f043 0201 	orr.w	r2, r3, #1
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2203      	movs	r2, #3
 80019ae:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e18c      	b.n	8001cd0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	f003 0308 	and.w	r3, r3, #8
 80019c0:	2b08      	cmp	r3, #8
 80019c2:	d0e3      	beq.n	800198c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	699a      	ldr	r2, [r3, #24]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f042 0201 	orr.w	r2, r2, #1
 80019d2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019d4:	f7ff fe94 	bl	8001700 <HAL_GetTick>
 80019d8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80019da:	e014      	b.n	8001a06 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80019dc:	f7ff fe90 	bl	8001700 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b0a      	cmp	r3, #10
 80019e8:	d90d      	bls.n	8001a06 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80019f0:	f043 0201 	orr.w	r2, r3, #1
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2203      	movs	r2, #3
 80019fe:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e164      	b.n	8001cd0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	f003 0301 	and.w	r3, r3, #1
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d0e3      	beq.n	80019dc <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	699a      	ldr	r2, [r3, #24]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f042 0202 	orr.w	r2, r2, #2
 8001a22:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	7c1b      	ldrb	r3, [r3, #16]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d108      	bne.n	8001a3e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	699a      	ldr	r2, [r3, #24]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a3a:	619a      	str	r2, [r3, #24]
 8001a3c:	e007      	b.n	8001a4e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	699a      	ldr	r2, [r3, #24]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a4c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	7c5b      	ldrb	r3, [r3, #17]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d108      	bne.n	8001a68 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	699a      	ldr	r2, [r3, #24]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a64:	619a      	str	r2, [r3, #24]
 8001a66:	e007      	b.n	8001a78 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	699a      	ldr	r2, [r3, #24]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001a76:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	7c9b      	ldrb	r3, [r3, #18]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d108      	bne.n	8001a92 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	699a      	ldr	r2, [r3, #24]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001a8e:	619a      	str	r2, [r3, #24]
 8001a90:	e007      	b.n	8001aa2 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	699a      	ldr	r2, [r3, #24]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001aa0:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	699a      	ldr	r2, [r3, #24]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001ac6:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	691a      	ldr	r2, [r3, #16]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f022 0210 	bic.w	r2, r2, #16
 8001ad6:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d108      	bne.n	8001af2 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	699a      	ldr	r2, [r3, #24]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f042 0204 	orr.w	r2, r2, #4
 8001aee:	619a      	str	r2, [r3, #24]
 8001af0:	e030      	b.n	8001b54 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d02c      	beq.n	8001b54 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d020      	beq.n	8001b44 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	699a      	ldr	r2, [r3, #24]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b10:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	691a      	ldr	r2, [r3, #16]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f042 0210 	orr.w	r2, r2, #16
 8001b20:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	2b03      	cmp	r3, #3
 8001b28:	d114      	bne.n	8001b54 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	699a      	ldr	r2, [r3, #24]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f042 0220 	orr.w	r2, r2, #32
 8001b38:	619a      	str	r2, [r3, #24]
 8001b3a:	e00b      	b.n	8001b54 <HAL_FDCAN_Init+0x234>
 8001b3c:	080070a8 	.word	0x080070a8
 8001b40:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	699a      	ldr	r2, [r3, #24]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f042 0220 	orr.w	r2, r2, #32
 8001b52:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	3b01      	subs	r3, #1
 8001b5a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	69db      	ldr	r3, [r3, #28]
 8001b60:	3b01      	subs	r3, #1
 8001b62:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001b64:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a1b      	ldr	r3, [r3, #32]
 8001b6a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001b6c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	695b      	ldr	r3, [r3, #20]
 8001b74:	3b01      	subs	r3, #1
 8001b76:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001b7c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001b7e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001b88:	d115      	bne.n	8001bb6 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b94:	3b01      	subs	r3, #1
 8001b96:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001b98:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001ba2:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001baa:	3b01      	subs	r3, #1
 8001bac:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8001bb2:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001bb4:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d00a      	beq.n	8001bd4 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bdc:	4413      	add	r3, r2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d011      	beq.n	8001c06 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001bea:	f023 0107 	bic.w	r1, r3, #7
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	3360      	adds	r3, #96	; 0x60
 8001bf6:	443b      	add	r3, r7
 8001bf8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	430a      	orrs	r2, r1
 8001c02:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d011      	beq.n	8001c32 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001c16:	f023 0107 	bic.w	r1, r3, #7
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	3360      	adds	r3, #96	; 0x60
 8001c22:	443b      	add	r3, r7
 8001c24:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d012      	beq.n	8001c60 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001c42:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	3360      	adds	r3, #96	; 0x60
 8001c4e:	443b      	add	r3, r7
 8001c50:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001c54:	011a      	lsls	r2, r3, #4
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d012      	beq.n	8001c8e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001c70:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	3360      	adds	r3, #96	; 0x60
 8001c7c:	443b      	add	r3, r7
 8001c7e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001c82:	021a      	lsls	r2, r3, #8
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a11      	ldr	r2, [pc, #68]	; (8001cd8 <HAL_FDCAN_Init+0x3b8>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d107      	bne.n	8001ca8 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	689a      	ldr	r2, [r3, #8]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f022 0203 	bic.w	r2, r2, #3
 8001ca6:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f000 fe6d 	bl	80029a0 <FDCAN_CalcultateRamBlockAddresses>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8001ccc:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3760      	adds	r7, #96	; 0x60
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	4000a000 	.word	0x4000a000

08001cdc <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b087      	sub	sp, #28
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001cec:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001cee:	7bfb      	ldrb	r3, [r7, #15]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d002      	beq.n	8001cfa <HAL_FDCAN_ConfigFilter+0x1e>
 8001cf4:	7bfb      	ldrb	r3, [r7, #15]
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d157      	bne.n	8001daa <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d12b      	bne.n	8001d5a <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	2b07      	cmp	r3, #7
 8001d08:	d10d      	bne.n	8001d26 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	69db      	ldr	r3, [r3, #28]
 8001d14:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8001d16:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8001d1c:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8001d1e:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8001d22:	617b      	str	r3, [r7, #20]
 8001d24:	e00e      	b.n	8001d44 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001d32:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	691b      	ldr	r3, [r3, #16]
 8001d38:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8001d3a:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001d40:	4313      	orrs	r3, r2
 8001d42:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	4413      	add	r3, r2
 8001d50:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	697a      	ldr	r2, [r7, #20]
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	e025      	b.n	8001da6 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	075a      	lsls	r2, r3, #29
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	2b07      	cmp	r3, #7
 8001d6e:	d103      	bne.n	8001d78 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	613b      	str	r3, [r7, #16]
 8001d76:	e006      	b.n	8001d86 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	079a      	lsls	r2, r3, #30
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	4413      	add	r3, r2
 8001d92:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	697a      	ldr	r2, [r7, #20]
 8001d98:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	3304      	adds	r3, #4
 8001d9e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8001da6:	2300      	movs	r3, #0
 8001da8:	e008      	b.n	8001dbc <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001db0:	f043 0202 	orr.w	r2, r3, #2
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
  }
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	371c      	adds	r7, #28
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
 8001dd4:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d110      	bne.n	8001e04 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8001dea:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8001df0:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8001dfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 8001e00:	2300      	movs	r3, #0
 8001e02:	e008      	b.n	8001e16 <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001e0a:	f043 0204 	orr.w	r2, r3, #4
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
  }
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <HAL_FDCAN_ConfigTxDelayCompensation>:
  * @param  TdcFilter Transmitter Delay Compensation Filter Window Length.
  *         This parameter must be a number between 0x00 and 0x7F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan, uint32_t TdcOffset, uint32_t TdcFilter)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b085      	sub	sp, #20
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	60f8      	str	r0, [r7, #12]
 8001e2a:	60b9      	str	r1, [r7, #8]
 8001e2c:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_MAX_VALUE(TdcOffset, 0x7FU));
  assert_param(IS_FDCAN_MAX_VALUE(TdcFilter, 0x7FU));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d108      	bne.n	8001e4c <HAL_FDCAN_ConfigTxDelayCompensation+0x2a>
  {
    /* Configure TDC offset and filter window */
    hfdcan->Instance->TDCR = ((TdcFilter << FDCAN_TDCR_TDCF_Pos) | (TdcOffset << FDCAN_TDCR_TDCO_Pos));
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	0219      	lsls	r1, r3, #8
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	430a      	orrs	r2, r1
 8001e46:	649a      	str	r2, [r3, #72]	; 0x48

    /* Return function status */
    return HAL_OK;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	e008      	b.n	8001e5e <HAL_FDCAN_ConfigTxDelayCompensation+0x3c>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001e52:	f043 0204 	orr.w	r2, r3, #4
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
  }
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3714      	adds	r7, #20
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d109      	bne.n	8001e92 <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68da      	ldr	r2, [r3, #12]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001e8c:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	e008      	b.n	8001ea4 <HAL_FDCAN_EnableTxDelayCompensation+0x3a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001e98:	f043 0204 	orr.w	r2, r3, #4
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
  }
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d111      	bne.n	8001ee8 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	699a      	ldr	r2, [r3, #24]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f022 0201 	bic.w	r2, r2, #1
 8001eda:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	e008      	b.n	8001efa <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001eee:	f043 0204 	orr.w	r2, r3, #4
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
  }
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b086      	sub	sp, #24
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	60f8      	str	r0, [r7, #12]
 8001f0e:	60b9      	str	r1, [r7, #8]
 8001f10:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d141      	bne.n	8001fa2 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001f26:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d109      	bne.n	8001f42 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001f34:	f043 0220 	orr.w	r2, r3, #32
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e038      	b.n	8001fb4 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001f4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d009      	beq.n	8001f66 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001f58:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e026      	b.n	8001fb4 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001f6e:	0c1b      	lsrs	r3, r3, #16
 8001f70:	f003 031f 	and.w	r3, r3, #31
 8001f74:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	68b9      	ldr	r1, [r7, #8]
 8001f7c:	68f8      	ldr	r0, [r7, #12]
 8001f7e:	f000 fe95 	bl	8002cac <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2101      	movs	r1, #1
 8001f88:	697a      	ldr	r2, [r7, #20]
 8001f8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f8e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001f92:	2201      	movs	r2, #1
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	409a      	lsls	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	e008      	b.n	8001fb4 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001fa8:	f043 0208 	orr.w	r2, r3, #8
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
  }
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3718      	adds	r7, #24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b08b      	sub	sp, #44	; 0x2c
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
 8001fc8:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001fd4:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8001fd6:	7efb      	ldrb	r3, [r7, #27]
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	f040 814b 	bne.w	8002274 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	2b40      	cmp	r3, #64	; 0x40
 8001fe2:	d14d      	bne.n	8002080 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001fec:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d109      	bne.n	8002008 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001ffa:	f043 0220 	orr.w	r2, r3, #32
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e13e      	b.n	8002286 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002010:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002014:	2b00      	cmp	r3, #0
 8002016:	d109      	bne.n	800202c <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800201e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e12c      	b.n	8002286 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002034:	0e1b      	lsrs	r3, r3, #24
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b01      	cmp	r3, #1
 800203c:	d10b      	bne.n	8002056 <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002046:	0fdb      	lsrs	r3, r3, #31
 8002048:	f003 0301 	and.w	r3, r3, #1
 800204c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002050:	d101      	bne.n	8002056 <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8002052:	2301      	movs	r3, #1
 8002054:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800205e:	0a1b      	lsrs	r3, r3, #8
 8002060:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002064:	69fa      	ldr	r2, [r7, #28]
 8002066:	4413      	add	r3, r2
 8002068:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002072:	69f9      	ldr	r1, [r7, #28]
 8002074:	fb01 f303 	mul.w	r3, r1, r3
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	4413      	add	r3, r2
 800207c:	627b      	str	r3, [r7, #36]	; 0x24
 800207e:	e069      	b.n	8002154 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	2b41      	cmp	r3, #65	; 0x41
 8002084:	d14d      	bne.n	8002122 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800208e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d109      	bne.n	80020aa <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800209c:	f043 0220 	orr.w	r2, r3, #32
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e0ed      	b.n	8002286 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80020b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d109      	bne.n	80020ce <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80020c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e0db      	b.n	8002286 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80020d6:	0e1b      	lsrs	r3, r3, #24
 80020d8:	f003 0301 	and.w	r3, r3, #1
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d10b      	bne.n	80020f8 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80020e8:	0fdb      	lsrs	r3, r3, #31
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80020f2:	d101      	bne.n	80020f8 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80020f4:	2301      	movs	r3, #1
 80020f6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002100:	0a1b      	lsrs	r3, r3, #8
 8002102:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002106:	69fa      	ldr	r2, [r7, #28]
 8002108:	4413      	add	r3, r2
 800210a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002114:	69f9      	ldr	r1, [r7, #28]
 8002116:	fb01 f303 	mul.w	r3, r1, r3
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	627b      	str	r3, [r7, #36]	; 0x24
 8002120:	e018      	b.n	8002154 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002126:	68ba      	ldr	r2, [r7, #8]
 8002128:	429a      	cmp	r2, r3
 800212a:	d309      	bcc.n	8002140 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002132:	f043 0220 	orr.w	r2, r3, #32
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e0a2      	b.n	8002286 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002148:	68b9      	ldr	r1, [r7, #8]
 800214a:	fb01 f303 	mul.w	r3, r1, r3
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4413      	add	r3, r2
 8002152:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8002154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d107      	bne.n	8002178 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8002168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	0c9b      	lsrs	r3, r3, #18
 800216e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	e005      	b.n	8002184 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8002178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8002184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8002190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800219c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219e:	3304      	adds	r3, #4
 80021a0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80021ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80021b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80021c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 80021d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	0e1b      	lsrs	r3, r3, #24
 80021d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 80021de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	0fda      	lsrs	r2, r3, #31
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80021e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ea:	3304      	adds	r3, #4
 80021ec:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f0:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80021f2:	2300      	movs	r3, #0
 80021f4:	623b      	str	r3, [r7, #32]
 80021f6:	e00a      	b.n	800220e <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80021f8:	697a      	ldr	r2, [r7, #20]
 80021fa:	6a3b      	ldr	r3, [r7, #32]
 80021fc:	441a      	add	r2, r3
 80021fe:	6839      	ldr	r1, [r7, #0]
 8002200:	6a3b      	ldr	r3, [r7, #32]
 8002202:	440b      	add	r3, r1
 8002204:	7812      	ldrb	r2, [r2, #0]
 8002206:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8002208:	6a3b      	ldr	r3, [r7, #32]
 800220a:	3301      	adds	r3, #1
 800220c:	623b      	str	r3, [r7, #32]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	0c1b      	lsrs	r3, r3, #16
 8002214:	4a1f      	ldr	r2, [pc, #124]	; (8002294 <HAL_FDCAN_GetRxMessage+0x2d8>)
 8002216:	5cd3      	ldrb	r3, [r2, r3]
 8002218:	461a      	mov	r2, r3
 800221a:	6a3b      	ldr	r3, [r7, #32]
 800221c:	4293      	cmp	r3, r2
 800221e:	d3eb      	bcc.n	80021f8 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	2b40      	cmp	r3, #64	; 0x40
 8002224:	d105      	bne.n	8002232 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	69fa      	ldr	r2, [r7, #28]
 800222c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8002230:	e01e      	b.n	8002270 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	2b41      	cmp	r3, #65	; 0x41
 8002236:	d105      	bne.n	8002244 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	69fa      	ldr	r2, [r7, #28]
 800223e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8002242:	e015      	b.n	8002270 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	2b1f      	cmp	r3, #31
 8002248:	d808      	bhi.n	800225c <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2101      	movs	r1, #1
 8002250:	68ba      	ldr	r2, [r7, #8]
 8002252:	fa01 f202 	lsl.w	r2, r1, r2
 8002256:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800225a:	e009      	b.n	8002270 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	f003 021f 	and.w	r2, r3, #31
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2101      	movs	r1, #1
 8002268:	fa01 f202 	lsl.w	r2, r1, r2
 800226c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8002270:	2300      	movs	r3, #0
 8002272:	e008      	b.n	8002286 <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800227a:	f043 0208 	orr.w	r2, r3, #8
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
  }
}
 8002286:	4618      	mov	r0, r3
 8002288:	372c      	adds	r7, #44	; 0x2c
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	08007104 	.word	0x08007104

08002298 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8002298:	b480      	push	{r7}
 800229a:	b087      	sub	sp, #28
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80022aa:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80022ac:	7dfb      	ldrb	r3, [r7, #23]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d002      	beq.n	80022b8 <HAL_FDCAN_ActivateNotification+0x20>
 80022b2:	7dfb      	ldrb	r3, [r7, #23]
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d155      	bne.n	8002364 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	4013      	ands	r3, r2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d108      	bne.n	80022d8 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f042 0201 	orr.w	r2, r2, #1
 80022d4:	65da      	str	r2, [r3, #92]	; 0x5c
 80022d6:	e014      	b.n	8002302 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	4013      	ands	r3, r2
 80022e2:	68ba      	ldr	r2, [r7, #8]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d108      	bne.n	80022fa <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f042 0202 	orr.w	r2, r2, #2
 80022f6:	65da      	str	r2, [r3, #92]	; 0x5c
 80022f8:	e003      	b.n	8002302 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2203      	movs	r2, #3
 8002300:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002308:	2b00      	cmp	r3, #0
 800230a:	d009      	beq.n	8002320 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	430a      	orrs	r2, r1
 800231c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002326:	2b00      	cmp	r3, #0
 8002328:	d009      	beq.n	800233e <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	430a      	orrs	r2, r1
 800233a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002344:	68ba      	ldr	r2, [r7, #8]
 8002346:	4b0f      	ldr	r3, [pc, #60]	; (8002384 <HAL_FDCAN_ActivateNotification+0xec>)
 8002348:	4013      	ands	r3, r2
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	6812      	ldr	r2, [r2, #0]
 800234e:	430b      	orrs	r3, r1
 8002350:	6553      	str	r3, [r2, #84]	; 0x54
 8002352:	4b0d      	ldr	r3, [pc, #52]	; (8002388 <HAL_FDCAN_ActivateNotification+0xf0>)
 8002354:	695a      	ldr	r2, [r3, #20]
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	0f9b      	lsrs	r3, r3, #30
 800235a:	490b      	ldr	r1, [pc, #44]	; (8002388 <HAL_FDCAN_ActivateNotification+0xf0>)
 800235c:	4313      	orrs	r3, r2
 800235e:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8002360:	2300      	movs	r3, #0
 8002362:	e008      	b.n	8002376 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800236a:	f043 0202 	orr.w	r2, r3, #2
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
  }
}
 8002376:	4618      	mov	r0, r3
 8002378:	371c      	adds	r7, #28
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	3fcfffff 	.word	0x3fcfffff
 8002388:	4000a800 	.word	0x4000a800

0800238c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b096      	sub	sp, #88	; 0x58
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8002394:	4b9a      	ldr	r3, [pc, #616]	; (8002600 <HAL_FDCAN_IRQHandler+0x274>)
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	079b      	lsls	r3, r3, #30
 800239a:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 800239c:	4b98      	ldr	r3, [pc, #608]	; (8002600 <HAL_FDCAN_IRQHandler+0x274>)
 800239e:	695b      	ldr	r3, [r3, #20]
 80023a0:	079b      	lsls	r3, r3, #30
 80023a2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80023a4:	4013      	ands	r3, r2
 80023a6:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023ae:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80023b2:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80023bc:	4013      	ands	r3, r2
 80023be:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023c6:	f003 030f 	and.w	r3, r3, #15
 80023ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80023d4:	4013      	ands	r3, r2
 80023d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80023ec:	4013      	ands	r3, r2
 80023ee:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023f6:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 80023fa:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002402:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002404:	4013      	ands	r3, r2
 8002406:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800240e:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8002412:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800241c:	4013      	ands	r3, r2
 800241e:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002426:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800242e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8002430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002432:	0a1b      	lsrs	r3, r3, #8
 8002434:	f003 0301 	and.w	r3, r3, #1
 8002438:	2b00      	cmp	r3, #0
 800243a:	d010      	beq.n	800245e <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 800243c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800243e:	0a1b      	lsrs	r3, r3, #8
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	2b00      	cmp	r3, #0
 8002446:	d00a      	beq.n	800245e <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002450:	651a      	str	r2, [r3, #80]	; 0x50
 8002452:	4b6b      	ldr	r3, [pc, #428]	; (8002600 <HAL_FDCAN_IRQHandler+0x274>)
 8002454:	2200      	movs	r2, #0
 8002456:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 fa54 	bl	8002906 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800245e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002460:	0a9b      	lsrs	r3, r3, #10
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	2b00      	cmp	r3, #0
 8002468:	d01d      	beq.n	80024a6 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800246a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800246c:	0a9b      	lsrs	r3, r3, #10
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	2b00      	cmp	r3, #0
 8002474:	d017      	beq.n	80024a6 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800247e:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002488:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800248a:	4013      	ands	r3, r2
 800248c:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002496:	651a      	str	r2, [r3, #80]	; 0x50
 8002498:	4b59      	ldr	r3, [pc, #356]	; (8002600 <HAL_FDCAN_IRQHandler+0x274>)
 800249a:	2200      	movs	r2, #0
 800249c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800249e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 fa07 	bl	80028b4 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 80024a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00d      	beq.n	80024c8 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80024b2:	4b54      	ldr	r3, [pc, #336]	; (8002604 <HAL_FDCAN_IRQHandler+0x278>)
 80024b4:	400b      	ands	r3, r1
 80024b6:	6513      	str	r3, [r2, #80]	; 0x50
 80024b8:	4a51      	ldr	r2, [pc, #324]	; (8002600 <HAL_FDCAN_IRQHandler+0x274>)
 80024ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024bc:	0f9b      	lsrs	r3, r3, #30
 80024be:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80024c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 f9c0 	bl	8002848 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80024c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00d      	beq.n	80024ea <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80024d4:	4b4b      	ldr	r3, [pc, #300]	; (8002604 <HAL_FDCAN_IRQHandler+0x278>)
 80024d6:	400b      	ands	r3, r1
 80024d8:	6513      	str	r3, [r2, #80]	; 0x50
 80024da:	4a49      	ldr	r2, [pc, #292]	; (8002600 <HAL_FDCAN_IRQHandler+0x274>)
 80024dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024de:	0f9b      	lsrs	r3, r3, #30
 80024e0:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80024e2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f000 f9ba 	bl	800285e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80024ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d00d      	beq.n	800250c <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80024f6:	4b43      	ldr	r3, [pc, #268]	; (8002604 <HAL_FDCAN_IRQHandler+0x278>)
 80024f8:	400b      	ands	r3, r1
 80024fa:	6513      	str	r3, [r2, #80]	; 0x50
 80024fc:	4a40      	ldr	r2, [pc, #256]	; (8002600 <HAL_FDCAN_IRQHandler+0x274>)
 80024fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002500:	0f9b      	lsrs	r3, r3, #30
 8002502:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8002504:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f7fd fef0 	bl	80002ec <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800250c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00d      	beq.n	800252e <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002518:	4b3a      	ldr	r3, [pc, #232]	; (8002604 <HAL_FDCAN_IRQHandler+0x278>)
 800251a:	400b      	ands	r3, r1
 800251c:	6513      	str	r3, [r2, #80]	; 0x50
 800251e:	4a38      	ldr	r2, [pc, #224]	; (8002600 <HAL_FDCAN_IRQHandler+0x274>)
 8002520:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002522:	0f9b      	lsrs	r3, r3, #30
 8002524:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8002526:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 f9a3 	bl	8002874 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800252e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002530:	0adb      	lsrs	r3, r3, #11
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b00      	cmp	r3, #0
 8002538:	d010      	beq.n	800255c <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800253a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800253c:	0adb      	lsrs	r3, r3, #11
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00a      	beq.n	800255c <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800254e:	651a      	str	r2, [r3, #80]	; 0x50
 8002550:	4b2b      	ldr	r3, [pc, #172]	; (8002600 <HAL_FDCAN_IRQHandler+0x274>)
 8002552:	2200      	movs	r2, #0
 8002554:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 f997 	bl	800288a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 800255c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800255e:	0a5b      	lsrs	r3, r3, #9
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	2b00      	cmp	r3, #0
 8002566:	d01d      	beq.n	80025a4 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8002568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800256a:	0a5b      	lsrs	r3, r3, #9
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	2b00      	cmp	r3, #0
 8002572:	d017      	beq.n	80025a4 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800257c:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002586:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002588:	4013      	ands	r3, r2
 800258a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002594:	651a      	str	r2, [r3, #80]	; 0x50
 8002596:	4b1a      	ldr	r3, [pc, #104]	; (8002600 <HAL_FDCAN_IRQHandler+0x274>)
 8002598:	2200      	movs	r2, #0
 800259a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800259c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 f97d 	bl	800289e <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 80025a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025a6:	0cdb      	lsrs	r3, r3, #19
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d010      	beq.n	80025d2 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 80025b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025b2:	0cdb      	lsrs	r3, r3, #19
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d00a      	beq.n	80025d2 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80025c4:	651a      	str	r2, [r3, #80]	; 0x50
 80025c6:	4b0e      	ldr	r3, [pc, #56]	; (8002600 <HAL_FDCAN_IRQHandler+0x274>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f000 f97c 	bl	80028ca <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80025d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025d4:	0c1b      	lsrs	r3, r3, #16
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d016      	beq.n	800260c <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80025de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e0:	0c1b      	lsrs	r3, r3, #16
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d010      	beq.n	800260c <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80025f2:	651a      	str	r2, [r3, #80]	; 0x50
 80025f4:	4b02      	ldr	r3, [pc, #8]	; (8002600 <HAL_FDCAN_IRQHandler+0x274>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	e004      	b.n	8002608 <HAL_FDCAN_IRQHandler+0x27c>
 80025fe:	bf00      	nop
 8002600:	4000a800 	.word	0x4000a800
 8002604:	3fcfffff 	.word	0x3fcfffff
 8002608:	f000 f969 	bl	80028de <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 800260c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800260e:	0c9b      	lsrs	r3, r3, #18
 8002610:	f003 0301 	and.w	r3, r3, #1
 8002614:	2b00      	cmp	r3, #0
 8002616:	d010      	beq.n	800263a <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8002618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800261a:	0c9b      	lsrs	r3, r3, #18
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00a      	beq.n	800263a <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800262c:	651a      	str	r2, [r3, #80]	; 0x50
 800262e:	4b83      	ldr	r3, [pc, #524]	; (800283c <HAL_FDCAN_IRQHandler+0x4b0>)
 8002630:	2200      	movs	r2, #0
 8002632:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f000 f95c 	bl	80028f2 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800263a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800263c:	0c5b      	lsrs	r3, r3, #17
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	2b00      	cmp	r3, #0
 8002644:	d015      	beq.n	8002672 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8002646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002648:	0c5b      	lsrs	r3, r3, #17
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00f      	beq.n	8002672 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800265a:	651a      	str	r2, [r3, #80]	; 0x50
 800265c:	4b77      	ldr	r3, [pc, #476]	; (800283c <HAL_FDCAN_IRQHandler+0x4b0>)
 800265e:	2200      	movs	r2, #0
 8002660:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002668:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8002672:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002674:	2b00      	cmp	r3, #0
 8002676:	d00d      	beq.n	8002694 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800267e:	4b70      	ldr	r3, [pc, #448]	; (8002840 <HAL_FDCAN_IRQHandler+0x4b4>)
 8002680:	400b      	ands	r3, r1
 8002682:	6513      	str	r3, [r2, #80]	; 0x50
 8002684:	4a6d      	ldr	r2, [pc, #436]	; (800283c <HAL_FDCAN_IRQHandler+0x4b0>)
 8002686:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002688:	0f9b      	lsrs	r3, r3, #30
 800268a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800268c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 f94d 	bl	800292e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8002694:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002696:	2b00      	cmp	r3, #0
 8002698:	d011      	beq.n	80026be <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80026a0:	4b67      	ldr	r3, [pc, #412]	; (8002840 <HAL_FDCAN_IRQHandler+0x4b4>)
 80026a2:	400b      	ands	r3, r1
 80026a4:	6513      	str	r3, [r2, #80]	; 0x50
 80026a6:	4a65      	ldr	r2, [pc, #404]	; (800283c <HAL_FDCAN_IRQHandler+0x4b0>)
 80026a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026aa:	0f9b      	lsrs	r3, r3, #30
 80026ac:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80026b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026b6:	431a      	orrs	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a60      	ldr	r2, [pc, #384]	; (8002844 <HAL_FDCAN_IRQHandler+0x4b8>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	f040 80ac 	bne.w	8002822 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f003 0303 	and.w	r3, r3, #3
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f000 80a4 	beq.w	8002822 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	6a1b      	ldr	r3, [r3, #32]
 80026e0:	f003 030f 	and.w	r3, r3, #15
 80026e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026ee:	4013      	ands	r3, r2
 80026f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80026fc:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002704:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002706:	4013      	ands	r3, r2
 8002708:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002714:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800271e:	4013      	ands	r3, r2
 8002720:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	6a1b      	ldr	r3, [r3, #32]
 8002728:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 800272c:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002734:	6a3a      	ldr	r2, [r7, #32]
 8002736:	4013      	ands	r3, r2
 8002738:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	6a1b      	ldr	r3, [r3, #32]
 8002740:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8002744:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274c:	69fa      	ldr	r2, [r7, #28]
 800274e:	4013      	ands	r3, r2
 8002750:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002758:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8002762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002764:	2b00      	cmp	r3, #0
 8002766:	d007      	beq.n	8002778 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800276e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8002770:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 f8e6 	bl	8002944 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8002778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800277a:	2b00      	cmp	r3, #0
 800277c:	d007      	beq.n	800278e <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002784:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8002786:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f000 f8e6 	bl	800295a <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	099b      	lsrs	r3, r3, #6
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	2b00      	cmp	r3, #0
 8002798:	d01a      	beq.n	80027d0 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	099b      	lsrs	r3, r3, #6
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d014      	beq.n	80027d0 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ac:	0c1b      	lsrs	r3, r3, #16
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027bc:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2240      	movs	r2, #64	; 0x40
 80027c4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	6939      	ldr	r1, [r7, #16]
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 f8d0 	bl	8002970 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 80027d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d007      	beq.n	80027e6 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027dc:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 80027de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f000 f8d1 	bl	8002988 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 80027e6:	6a3b      	ldr	r3, [r7, #32]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d00b      	beq.n	8002804 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	6a3a      	ldr	r2, [r7, #32]
 80027f2:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80027fa:	6a3b      	ldr	r3, [r7, #32]
 80027fc:	431a      	orrs	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00b      	beq.n	8002822 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	69fa      	ldr	r2, [r7, #28]
 8002810:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	431a      	orrs	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002828:	2b00      	cmp	r3, #0
 800282a:	d002      	beq.n	8002832 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f000 f874 	bl	800291a <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8002832:	bf00      	nop
 8002834:	3758      	adds	r7, #88	; 0x58
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	4000a800 	.word	0x4000a800
 8002840:	3fcfffff 	.word	0x3fcfffff
 8002844:	4000a000 	.word	0x4000a000

08002848 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8002852:	bf00      	nop
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr

0800285e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800285e:	b480      	push	{r7}
 8002860:	b083      	sub	sp, #12
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
 8002866:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8002892:	bf00      	nop
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800289e:	b480      	push	{r7}
 80028a0:	b083      	sub	sp, #12
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
 80028a6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80028a8:	bf00      	nop
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80028be:	bf00      	nop
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr

080028ca <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b083      	sub	sp, #12
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr

080028de <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b083      	sub	sp, #12
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80028fa:	bf00      	nop
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002906:	b480      	push	{r7}
 8002908:	b083      	sub	sp, #12
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800290e:	bf00      	nop
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr

0800291a <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800291a:	b480      	push	{r7}
 800291c:	b083      	sub	sp, #12
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800292e:	b480      	push	{r7}
 8002930:	b083      	sub	sp, #12
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
 8002936:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 800294e:	bf00      	nop
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr

0800295a <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 800295a:	b480      	push	{r7}
 800295c:	b083      	sub	sp, #12
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
 8002962:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 800297c:	bf00      	nop
 800297e:	3714      	adds	r7, #20
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
	...

080029a0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ac:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80029b6:	4ba7      	ldr	r3, [pc, #668]	; (8002c54 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80029b8:	4013      	ands	r3, r2
 80029ba:	68ba      	ldr	r2, [r7, #8]
 80029bc:	0091      	lsls	r1, r2, #2
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	6812      	ldr	r2, [r2, #0]
 80029c2:	430b      	orrs	r3, r1
 80029c4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029d0:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d8:	041a      	lsls	r2, r3, #16
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	430a      	orrs	r2, r1
 80029e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e8:	68ba      	ldr	r2, [r7, #8]
 80029ea:	4413      	add	r3, r2
 80029ec:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80029f6:	4b97      	ldr	r3, [pc, #604]	; (8002c54 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80029f8:	4013      	ands	r3, r2
 80029fa:	68ba      	ldr	r2, [r7, #8]
 80029fc:	0091      	lsls	r1, r2, #2
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	6812      	ldr	r2, [r2, #0]
 8002a02:	430b      	orrs	r3, r1
 8002a04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a10:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a18:	041a      	lsls	r2, r3, #16
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	68ba      	ldr	r2, [r7, #8]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002a38:	4b86      	ldr	r3, [pc, #536]	; (8002c54 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	68ba      	ldr	r2, [r7, #8]
 8002a3e:	0091      	lsls	r1, r2, #2
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	6812      	ldr	r2, [r2, #0]
 8002a44:	430b      	orrs	r3, r1
 8002a46:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002a52:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	041a      	lsls	r2, r3, #16
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	430a      	orrs	r2, r1
 8002a62:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002a6e:	fb02 f303 	mul.w	r3, r2, r3
 8002a72:	68ba      	ldr	r2, [r7, #8]
 8002a74:	4413      	add	r3, r2
 8002a76:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002a80:	4b74      	ldr	r3, [pc, #464]	; (8002c54 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002a82:	4013      	ands	r3, r2
 8002a84:	68ba      	ldr	r2, [r7, #8]
 8002a86:	0091      	lsls	r1, r2, #2
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	6812      	ldr	r2, [r2, #0]
 8002a8c:	430b      	orrs	r3, r1
 8002a8e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002a9a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aa2:	041a      	lsls	r2, r3, #16
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002ab6:	fb02 f303 	mul.w	r3, r2, r3
 8002aba:	68ba      	ldr	r2, [r7, #8]
 8002abc:	4413      	add	r3, r2
 8002abe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8002ac8:	4b62      	ldr	r3, [pc, #392]	; (8002c54 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002aca:	4013      	ands	r3, r2
 8002acc:	68ba      	ldr	r2, [r7, #8]
 8002ace:	0091      	lsls	r1, r2, #2
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	6812      	ldr	r2, [r2, #0]
 8002ad4:	430b      	orrs	r3, r1
 8002ad6:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002ae2:	fb02 f303 	mul.w	r3, r2, r3
 8002ae6:	68ba      	ldr	r2, [r7, #8]
 8002ae8:	4413      	add	r3, r2
 8002aea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002af4:	4b57      	ldr	r3, [pc, #348]	; (8002c54 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002af6:	4013      	ands	r3, r2
 8002af8:	68ba      	ldr	r2, [r7, #8]
 8002afa:	0091      	lsls	r1, r2, #2
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	6812      	ldr	r2, [r2, #0]
 8002b00:	430b      	orrs	r3, r1
 8002b02:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b0e:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b16:	041a      	lsls	r2, r3, #16
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	68ba      	ldr	r2, [r7, #8]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002b36:	4b47      	ldr	r3, [pc, #284]	; (8002c54 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002b38:	4013      	ands	r3, r2
 8002b3a:	68ba      	ldr	r2, [r7, #8]
 8002b3c:	0091      	lsls	r1, r2, #2
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	6812      	ldr	r2, [r2, #0]
 8002b42:	430b      	orrs	r3, r1
 8002b44:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002b50:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b58:	041a      	lsls	r2, r3, #16
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002b6c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b74:	061a      	lsls	r2, r3, #24
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b84:	4b34      	ldr	r3, [pc, #208]	; (8002c58 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8002b86:	4413      	add	r3, r2
 8002b88:	009a      	lsls	r2, r3, #2
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	441a      	add	r2, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	441a      	add	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	6879      	ldr	r1, [r7, #4]
 8002bb8:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8002bba:	fb01 f303 	mul.w	r3, r1, r3
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	441a      	add	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8002bd2:	fb01 f303 	mul.w	r3, r1, r3
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	441a      	add	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002be6:	6879      	ldr	r1, [r7, #4]
 8002be8:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8002bea:	fb01 f303 	mul.w	r3, r1, r3
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	441a      	add	r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	441a      	add	r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8002c1a:	fb01 f303 	mul.w	r3, r1, r3
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	441a      	add	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c32:	6879      	ldr	r1, [r7, #4]
 8002c34:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8002c36:	fb01 f303 	mul.w	r3, r1, r3
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	441a      	add	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c4a:	4a04      	ldr	r2, [pc, #16]	; (8002c5c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d915      	bls.n	8002c7c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8002c50:	e006      	b.n	8002c60 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8002c52:	bf00      	nop
 8002c54:	ffff0003 	.word	0xffff0003
 8002c58:	10002b00 	.word	0x10002b00
 8002c5c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c66:	f043 0220 	orr.w	r2, r3, #32
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2203      	movs	r2, #3
 8002c74:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e010      	b.n	8002c9e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c80:	60fb      	str	r3, [r7, #12]
 8002c82:	e005      	b.n	8002c90 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	3304      	adds	r3, #4
 8002c8e:	60fb      	str	r3, [r7, #12]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d3f3      	bcc.n	8002c84 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3714      	adds	r7, #20
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop

08002cac <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b089      	sub	sp, #36	; 0x24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
 8002cb8:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10a      	bne.n	8002cd8 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8002cca:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	61fb      	str	r3, [r7, #28]
 8002cd6:	e00a      	b.n	8002cee <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002ce0:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8002ce6:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002ce8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002cec:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8002cf8:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8002cfe:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8002d04:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d18:	6839      	ldr	r1, [r7, #0]
 8002d1a:	fb01 f303 	mul.w	r3, r1, r3
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	4413      	add	r3, r2
 8002d22:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	69fa      	ldr	r2, [r7, #28]
 8002d28:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	3304      	adds	r3, #4
 8002d2e:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	3304      	adds	r3, #4
 8002d3a:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	617b      	str	r3, [r7, #20]
 8002d40:	e020      	b.n	8002d84 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	3303      	adds	r3, #3
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	4413      	add	r3, r2
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	3302      	adds	r3, #2
 8002d52:	6879      	ldr	r1, [r7, #4]
 8002d54:	440b      	add	r3, r1
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8002d5a:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	3301      	adds	r3, #1
 8002d60:	6879      	ldr	r1, [r7, #4]
 8002d62:	440b      	add	r3, r1
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8002d68:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8002d6a:	6879      	ldr	r1, [r7, #4]
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	440a      	add	r2, r1
 8002d70:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8002d72:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	3304      	adds	r3, #4
 8002d7c:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	3304      	adds	r3, #4
 8002d82:	617b      	str	r3, [r7, #20]
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	0c1b      	lsrs	r3, r3, #16
 8002d8a:	4a06      	ldr	r2, [pc, #24]	; (8002da4 <FDCAN_CopyMessageToRAM+0xf8>)
 8002d8c:	5cd3      	ldrb	r3, [r2, r3]
 8002d8e:	461a      	mov	r2, r3
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d3d5      	bcc.n	8002d42 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8002d96:	bf00      	nop
 8002d98:	bf00      	nop
 8002d9a:	3724      	adds	r7, #36	; 0x24
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr
 8002da4:	08007104 	.word	0x08007104

08002da8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b089      	sub	sp, #36	; 0x24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002db2:	2300      	movs	r3, #0
 8002db4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002db6:	4b89      	ldr	r3, [pc, #548]	; (8002fdc <HAL_GPIO_Init+0x234>)
 8002db8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002dba:	e194      	b.n	80030e6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc8:	4013      	ands	r3, r2
 8002dca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	f000 8186 	beq.w	80030e0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f003 0303 	and.w	r3, r3, #3
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d005      	beq.n	8002dec <HAL_GPIO_Init+0x44>
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f003 0303 	and.w	r3, r3, #3
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d130      	bne.n	8002e4e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	2203      	movs	r2, #3
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	43db      	mvns	r3, r3
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	4013      	ands	r3, r2
 8002e02:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	68da      	ldr	r2, [r3, #12]
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e22:	2201      	movs	r2, #1
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2a:	43db      	mvns	r3, r3
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	4013      	ands	r3, r2
 8002e30:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	091b      	lsrs	r3, r3, #4
 8002e38:	f003 0201 	and.w	r2, r3, #1
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f003 0303 	and.w	r3, r3, #3
 8002e56:	2b03      	cmp	r3, #3
 8002e58:	d017      	beq.n	8002e8a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	2203      	movs	r2, #3
 8002e66:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6a:	43db      	mvns	r3, r3
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	4013      	ands	r3, r2
 8002e70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	689a      	ldr	r2, [r3, #8]
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7e:	69ba      	ldr	r2, [r7, #24]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f003 0303 	and.w	r3, r3, #3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d123      	bne.n	8002ede <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	08da      	lsrs	r2, r3, #3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	3208      	adds	r2, #8
 8002e9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	f003 0307 	and.w	r3, r3, #7
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	220f      	movs	r2, #15
 8002eae:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb2:	43db      	mvns	r3, r3
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	691a      	ldr	r2, [r3, #16]
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	f003 0307 	and.w	r3, r3, #7
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	08da      	lsrs	r2, r3, #3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	3208      	adds	r2, #8
 8002ed8:	69b9      	ldr	r1, [r7, #24]
 8002eda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	2203      	movs	r2, #3
 8002eea:	fa02 f303 	lsl.w	r3, r2, r3
 8002eee:	43db      	mvns	r3, r3
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f003 0203 	and.w	r2, r3, #3
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	fa02 f303 	lsl.w	r3, r2, r3
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f000 80e0 	beq.w	80030e0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f20:	4b2f      	ldr	r3, [pc, #188]	; (8002fe0 <HAL_GPIO_Init+0x238>)
 8002f22:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002f26:	4a2e      	ldr	r2, [pc, #184]	; (8002fe0 <HAL_GPIO_Init+0x238>)
 8002f28:	f043 0302 	orr.w	r3, r3, #2
 8002f2c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8002f30:	4b2b      	ldr	r3, [pc, #172]	; (8002fe0 <HAL_GPIO_Init+0x238>)
 8002f32:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	60fb      	str	r3, [r7, #12]
 8002f3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f3e:	4a29      	ldr	r2, [pc, #164]	; (8002fe4 <HAL_GPIO_Init+0x23c>)
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	089b      	lsrs	r3, r3, #2
 8002f44:	3302      	adds	r3, #2
 8002f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	f003 0303 	and.w	r3, r3, #3
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	220f      	movs	r2, #15
 8002f56:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5a:	43db      	mvns	r3, r3
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a20      	ldr	r2, [pc, #128]	; (8002fe8 <HAL_GPIO_Init+0x240>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d052      	beq.n	8003010 <HAL_GPIO_Init+0x268>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a1f      	ldr	r2, [pc, #124]	; (8002fec <HAL_GPIO_Init+0x244>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d031      	beq.n	8002fd6 <HAL_GPIO_Init+0x22e>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a1e      	ldr	r2, [pc, #120]	; (8002ff0 <HAL_GPIO_Init+0x248>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d02b      	beq.n	8002fd2 <HAL_GPIO_Init+0x22a>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a1d      	ldr	r2, [pc, #116]	; (8002ff4 <HAL_GPIO_Init+0x24c>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d025      	beq.n	8002fce <HAL_GPIO_Init+0x226>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a1c      	ldr	r2, [pc, #112]	; (8002ff8 <HAL_GPIO_Init+0x250>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d01f      	beq.n	8002fca <HAL_GPIO_Init+0x222>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a1b      	ldr	r2, [pc, #108]	; (8002ffc <HAL_GPIO_Init+0x254>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d019      	beq.n	8002fc6 <HAL_GPIO_Init+0x21e>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a1a      	ldr	r2, [pc, #104]	; (8003000 <HAL_GPIO_Init+0x258>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d013      	beq.n	8002fc2 <HAL_GPIO_Init+0x21a>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a19      	ldr	r2, [pc, #100]	; (8003004 <HAL_GPIO_Init+0x25c>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d00d      	beq.n	8002fbe <HAL_GPIO_Init+0x216>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a18      	ldr	r2, [pc, #96]	; (8003008 <HAL_GPIO_Init+0x260>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d007      	beq.n	8002fba <HAL_GPIO_Init+0x212>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a17      	ldr	r2, [pc, #92]	; (800300c <HAL_GPIO_Init+0x264>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d101      	bne.n	8002fb6 <HAL_GPIO_Init+0x20e>
 8002fb2:	2309      	movs	r3, #9
 8002fb4:	e02d      	b.n	8003012 <HAL_GPIO_Init+0x26a>
 8002fb6:	230a      	movs	r3, #10
 8002fb8:	e02b      	b.n	8003012 <HAL_GPIO_Init+0x26a>
 8002fba:	2308      	movs	r3, #8
 8002fbc:	e029      	b.n	8003012 <HAL_GPIO_Init+0x26a>
 8002fbe:	2307      	movs	r3, #7
 8002fc0:	e027      	b.n	8003012 <HAL_GPIO_Init+0x26a>
 8002fc2:	2306      	movs	r3, #6
 8002fc4:	e025      	b.n	8003012 <HAL_GPIO_Init+0x26a>
 8002fc6:	2305      	movs	r3, #5
 8002fc8:	e023      	b.n	8003012 <HAL_GPIO_Init+0x26a>
 8002fca:	2304      	movs	r3, #4
 8002fcc:	e021      	b.n	8003012 <HAL_GPIO_Init+0x26a>
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e01f      	b.n	8003012 <HAL_GPIO_Init+0x26a>
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	e01d      	b.n	8003012 <HAL_GPIO_Init+0x26a>
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e01b      	b.n	8003012 <HAL_GPIO_Init+0x26a>
 8002fda:	bf00      	nop
 8002fdc:	58000080 	.word	0x58000080
 8002fe0:	58024400 	.word	0x58024400
 8002fe4:	58000400 	.word	0x58000400
 8002fe8:	58020000 	.word	0x58020000
 8002fec:	58020400 	.word	0x58020400
 8002ff0:	58020800 	.word	0x58020800
 8002ff4:	58020c00 	.word	0x58020c00
 8002ff8:	58021000 	.word	0x58021000
 8002ffc:	58021400 	.word	0x58021400
 8003000:	58021800 	.word	0x58021800
 8003004:	58021c00 	.word	0x58021c00
 8003008:	58022000 	.word	0x58022000
 800300c:	58022400 	.word	0x58022400
 8003010:	2300      	movs	r3, #0
 8003012:	69fa      	ldr	r2, [r7, #28]
 8003014:	f002 0203 	and.w	r2, r2, #3
 8003018:	0092      	lsls	r2, r2, #2
 800301a:	4093      	lsls	r3, r2
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	4313      	orrs	r3, r2
 8003020:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003022:	4938      	ldr	r1, [pc, #224]	; (8003104 <HAL_GPIO_Init+0x35c>)
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	089b      	lsrs	r3, r3, #2
 8003028:	3302      	adds	r3, #2
 800302a:	69ba      	ldr	r2, [r7, #24]
 800302c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003030:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	43db      	mvns	r3, r3
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	4013      	ands	r3, r2
 8003040:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d003      	beq.n	8003056 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	4313      	orrs	r3, r2
 8003054:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003056:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800305e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	43db      	mvns	r3, r3
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	4013      	ands	r3, r2
 800306e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d003      	beq.n	8003084 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	4313      	orrs	r3, r2
 8003082:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003084:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	43db      	mvns	r3, r3
 8003096:	69ba      	ldr	r2, [r7, #24]
 8003098:	4013      	ands	r3, r2
 800309a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d003      	beq.n	80030b0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80030a8:	69ba      	ldr	r2, [r7, #24]
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	43db      	mvns	r3, r3
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	4013      	ands	r3, r2
 80030c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d003      	beq.n	80030da <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80030d2:	69ba      	ldr	r2, [r7, #24]
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	3301      	adds	r3, #1
 80030e4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	fa22 f303 	lsr.w	r3, r2, r3
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f47f ae63 	bne.w	8002dbc <HAL_GPIO_Init+0x14>
  }
}
 80030f6:	bf00      	nop
 80030f8:	bf00      	nop
 80030fa:	3724      	adds	r7, #36	; 0x24
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr
 8003104:	58000400 	.word	0x58000400

08003108 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	460b      	mov	r3, r1
 8003112:	807b      	strh	r3, [r7, #2]
 8003114:	4613      	mov	r3, r2
 8003116:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003118:	787b      	ldrb	r3, [r7, #1]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800311e:	887a      	ldrh	r2, [r7, #2]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003124:	e003      	b.n	800312e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003126:	887b      	ldrh	r3, [r7, #2]
 8003128:	041a      	lsls	r2, r3, #16
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	619a      	str	r2, [r3, #24]
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr

0800313a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800313a:	b480      	push	{r7}
 800313c:	b085      	sub	sp, #20
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
 8003142:	460b      	mov	r3, r1
 8003144:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800314c:	887a      	ldrh	r2, [r7, #2]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	4013      	ands	r3, r2
 8003152:	041a      	lsls	r2, r3, #16
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	43d9      	mvns	r1, r3
 8003158:	887b      	ldrh	r3, [r7, #2]
 800315a:	400b      	ands	r3, r1
 800315c:	431a      	orrs	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	619a      	str	r2, [r3, #24]
}
 8003162:	bf00      	nop
 8003164:	3714      	adds	r7, #20
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
	...

08003170 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e07f      	b.n	8003282 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003188:	b2db      	uxtb	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d106      	bne.n	800319c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f7fd fe8a 	bl	8000eb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2224      	movs	r2, #36	; 0x24
 80031a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f022 0201 	bic.w	r2, r2, #1
 80031b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031d0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d107      	bne.n	80031ea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	689a      	ldr	r2, [r3, #8]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031e6:	609a      	str	r2, [r3, #8]
 80031e8:	e006      	b.n	80031f8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	689a      	ldr	r2, [r3, #8]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80031f6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d104      	bne.n	800320a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003208:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	6859      	ldr	r1, [r3, #4]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	4b1d      	ldr	r3, [pc, #116]	; (800328c <HAL_I2C_Init+0x11c>)
 8003216:	430b      	orrs	r3, r1
 8003218:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68da      	ldr	r2, [r3, #12]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003228:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	691a      	ldr	r2, [r3, #16]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	430a      	orrs	r2, r1
 8003242:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	69d9      	ldr	r1, [r3, #28]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a1a      	ldr	r2, [r3, #32]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	430a      	orrs	r2, r1
 8003252:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f042 0201 	orr.w	r2, r2, #1
 8003262:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2220      	movs	r2, #32
 800326e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3708      	adds	r7, #8
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	02008000 	.word	0x02008000

08003290 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b20      	cmp	r3, #32
 80032a4:	d138      	bne.n	8003318 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d101      	bne.n	80032b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80032b0:	2302      	movs	r3, #2
 80032b2:	e032      	b.n	800331a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2224      	movs	r2, #36	; 0x24
 80032c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f022 0201 	bic.w	r2, r2, #1
 80032d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80032e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6819      	ldr	r1, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	683a      	ldr	r2, [r7, #0]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f042 0201 	orr.w	r2, r2, #1
 8003302:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2220      	movs	r2, #32
 8003308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003314:	2300      	movs	r3, #0
 8003316:	e000      	b.n	800331a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003318:	2302      	movs	r3, #2
  }
}
 800331a:	4618      	mov	r0, r3
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr

08003326 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003326:	b480      	push	{r7}
 8003328:	b085      	sub	sp, #20
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
 800332e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b20      	cmp	r3, #32
 800333a:	d139      	bne.n	80033b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003342:	2b01      	cmp	r3, #1
 8003344:	d101      	bne.n	800334a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003346:	2302      	movs	r3, #2
 8003348:	e033      	b.n	80033b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2224      	movs	r2, #36	; 0x24
 8003356:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f022 0201 	bic.w	r2, r2, #1
 8003368:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003378:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	021b      	lsls	r3, r3, #8
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	4313      	orrs	r3, r2
 8003382:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f042 0201 	orr.w	r2, r2, #1
 800339a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2220      	movs	r2, #32
 80033a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033ac:	2300      	movs	r3, #0
 80033ae:	e000      	b.n	80033b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80033b0:	2302      	movs	r3, #2
  }
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3714      	adds	r7, #20
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
	...

080033c0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e0bf      	b.n	8003552 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d106      	bne.n	80033ec <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7fd fdc8 	bl	8000f7c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2202      	movs	r2, #2
 80033f0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	699a      	ldr	r2, [r3, #24]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003402:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6999      	ldr	r1, [r3, #24]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685a      	ldr	r2, [r3, #4]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003418:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	430a      	orrs	r2, r1
 8003426:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	6899      	ldr	r1, [r3, #8]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	4b4a      	ldr	r3, [pc, #296]	; (800355c <HAL_LTDC_Init+0x19c>)
 8003434:	400b      	ands	r3, r1
 8003436:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	695b      	ldr	r3, [r3, #20]
 800343c:	041b      	lsls	r3, r3, #16
 800343e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6899      	ldr	r1, [r3, #8]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	699a      	ldr	r2, [r3, #24]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	431a      	orrs	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	430a      	orrs	r2, r1
 8003454:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68d9      	ldr	r1, [r3, #12]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	4b3e      	ldr	r3, [pc, #248]	; (800355c <HAL_LTDC_Init+0x19c>)
 8003462:	400b      	ands	r3, r1
 8003464:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	041b      	lsls	r3, r3, #16
 800346c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68d9      	ldr	r1, [r3, #12]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a1a      	ldr	r2, [r3, #32]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	431a      	orrs	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	430a      	orrs	r2, r1
 8003482:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6919      	ldr	r1, [r3, #16]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	4b33      	ldr	r3, [pc, #204]	; (800355c <HAL_LTDC_Init+0x19c>)
 8003490:	400b      	ands	r3, r1
 8003492:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003498:	041b      	lsls	r3, r3, #16
 800349a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6919      	ldr	r1, [r3, #16]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	431a      	orrs	r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	430a      	orrs	r2, r1
 80034b0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	6959      	ldr	r1, [r3, #20]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	4b27      	ldr	r3, [pc, #156]	; (800355c <HAL_LTDC_Init+0x19c>)
 80034be:	400b      	ands	r3, r1
 80034c0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c6:	041b      	lsls	r3, r3, #16
 80034c8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	6959      	ldr	r1, [r3, #20]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	431a      	orrs	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	430a      	orrs	r2, r1
 80034de:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034e6:	021b      	lsls	r3, r3, #8
 80034e8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80034f0:	041b      	lsls	r3, r3, #16
 80034f2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003502:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800350a:	68ba      	ldr	r2, [r7, #8]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	4313      	orrs	r3, r2
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003516:	431a      	orrs	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	430a      	orrs	r2, r1
 800351e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f042 0206 	orr.w	r2, r2, #6
 800352e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	699a      	ldr	r2, [r3, #24]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f042 0201 	orr.w	r2, r2, #1
 800353e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	f000f800 	.word	0xf000f800

08003560 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003560:	b5b0      	push	{r4, r5, r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003572:	2b01      	cmp	r3, #1
 8003574:	d101      	bne.n	800357a <HAL_LTDC_ConfigLayer+0x1a>
 8003576:	2302      	movs	r3, #2
 8003578:	e02c      	b.n	80035d4 <HAL_LTDC_ConfigLayer+0x74>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2201      	movs	r2, #1
 800357e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2202      	movs	r2, #2
 8003586:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2134      	movs	r1, #52	; 0x34
 8003590:	fb01 f303 	mul.w	r3, r1, r3
 8003594:	4413      	add	r3, r2
 8003596:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	4614      	mov	r4, r2
 800359e:	461d      	mov	r5, r3
 80035a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035ac:	682b      	ldr	r3, [r5, #0]
 80035ae:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	68b9      	ldr	r1, [r7, #8]
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	f000 f811 	bl	80035dc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2201      	movs	r2, #1
 80035c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bdb0      	pop	{r4, r5, r7, pc}

080035dc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80035dc:	b480      	push	{r7}
 80035de:	b089      	sub	sp, #36	; 0x24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	0c1b      	lsrs	r3, r3, #16
 80035f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035f8:	4413      	add	r3, r2
 80035fa:	041b      	lsls	r3, r3, #16
 80035fc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	461a      	mov	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	01db      	lsls	r3, r3, #7
 8003608:	4413      	add	r3, r2
 800360a:	3384      	adds	r3, #132	; 0x84
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	6812      	ldr	r2, [r2, #0]
 8003612:	4611      	mov	r1, r2
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	01d2      	lsls	r2, r2, #7
 8003618:	440a      	add	r2, r1
 800361a:	3284      	adds	r2, #132	; 0x84
 800361c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003620:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	0c1b      	lsrs	r3, r3, #16
 800362e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003632:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003634:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4619      	mov	r1, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	01db      	lsls	r3, r3, #7
 8003640:	440b      	add	r3, r1
 8003642:	3384      	adds	r3, #132	; 0x84
 8003644:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800364a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	68da      	ldr	r2, [r3, #12]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800365a:	4413      	add	r3, r2
 800365c:	041b      	lsls	r3, r3, #16
 800365e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	461a      	mov	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	01db      	lsls	r3, r3, #7
 800366a:	4413      	add	r3, r2
 800366c:	3384      	adds	r3, #132	; 0x84
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	6812      	ldr	r2, [r2, #0]
 8003674:	4611      	mov	r1, r2
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	01d2      	lsls	r2, r2, #7
 800367a:	440a      	add	r2, r1
 800367c:	3284      	adds	r2, #132	; 0x84
 800367e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003682:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	689a      	ldr	r2, [r3, #8]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003692:	4413      	add	r3, r2
 8003694:	1c5a      	adds	r2, r3, #1
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4619      	mov	r1, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	01db      	lsls	r3, r3, #7
 80036a0:	440b      	add	r3, r1
 80036a2:	3384      	adds	r3, #132	; 0x84
 80036a4:	4619      	mov	r1, r3
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	461a      	mov	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	01db      	lsls	r3, r3, #7
 80036b6:	4413      	add	r3, r2
 80036b8:	3384      	adds	r3, #132	; 0x84
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	6812      	ldr	r2, [r2, #0]
 80036c0:	4611      	mov	r1, r2
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	01d2      	lsls	r2, r2, #7
 80036c6:	440a      	add	r2, r1
 80036c8:	3284      	adds	r2, #132	; 0x84
 80036ca:	f023 0307 	bic.w	r3, r3, #7
 80036ce:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	461a      	mov	r2, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	01db      	lsls	r3, r3, #7
 80036da:	4413      	add	r3, r2
 80036dc:	3384      	adds	r3, #132	; 0x84
 80036de:	461a      	mov	r2, r3
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80036ec:	021b      	lsls	r3, r3, #8
 80036ee:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80036f6:	041b      	lsls	r3, r3, #16
 80036f8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	061b      	lsls	r3, r3, #24
 8003700:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	461a      	mov	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	01db      	lsls	r3, r3, #7
 800370c:	4413      	add	r3, r2
 800370e:	3384      	adds	r3, #132	; 0x84
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	461a      	mov	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	01db      	lsls	r3, r3, #7
 800371c:	4413      	add	r3, r2
 800371e:	3384      	adds	r3, #132	; 0x84
 8003720:	461a      	mov	r2, r3
 8003722:	2300      	movs	r3, #0
 8003724:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800372c:	461a      	mov	r2, r3
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	431a      	orrs	r2, r3
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	431a      	orrs	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4619      	mov	r1, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	01db      	lsls	r3, r3, #7
 8003740:	440b      	add	r3, r1
 8003742:	3384      	adds	r3, #132	; 0x84
 8003744:	4619      	mov	r1, r3
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	4313      	orrs	r3, r2
 800374a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	461a      	mov	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	01db      	lsls	r3, r3, #7
 8003756:	4413      	add	r3, r2
 8003758:	3384      	adds	r3, #132	; 0x84
 800375a:	695b      	ldr	r3, [r3, #20]
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	6812      	ldr	r2, [r2, #0]
 8003760:	4611      	mov	r1, r2
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	01d2      	lsls	r2, r2, #7
 8003766:	440a      	add	r2, r1
 8003768:	3284      	adds	r2, #132	; 0x84
 800376a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800376e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	461a      	mov	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	01db      	lsls	r3, r3, #7
 800377a:	4413      	add	r3, r2
 800377c:	3384      	adds	r3, #132	; 0x84
 800377e:	461a      	mov	r2, r3
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	461a      	mov	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	01db      	lsls	r3, r3, #7
 8003790:	4413      	add	r3, r2
 8003792:	3384      	adds	r3, #132	; 0x84
 8003794:	69da      	ldr	r2, [r3, #28]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4619      	mov	r1, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	01db      	lsls	r3, r3, #7
 80037a0:	440b      	add	r3, r1
 80037a2:	3384      	adds	r3, #132	; 0x84
 80037a4:	4619      	mov	r1, r3
 80037a6:	4b58      	ldr	r3, [pc, #352]	; (8003908 <LTDC_SetConfig+0x32c>)
 80037a8:	4013      	ands	r3, r2
 80037aa:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	69da      	ldr	r2, [r3, #28]
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	6a1b      	ldr	r3, [r3, #32]
 80037b4:	68f9      	ldr	r1, [r7, #12]
 80037b6:	6809      	ldr	r1, [r1, #0]
 80037b8:	4608      	mov	r0, r1
 80037ba:	6879      	ldr	r1, [r7, #4]
 80037bc:	01c9      	lsls	r1, r1, #7
 80037be:	4401      	add	r1, r0
 80037c0:	3184      	adds	r1, #132	; 0x84
 80037c2:	4313      	orrs	r3, r2
 80037c4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	461a      	mov	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	01db      	lsls	r3, r3, #7
 80037d0:	4413      	add	r3, r2
 80037d2:	3384      	adds	r3, #132	; 0x84
 80037d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	461a      	mov	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	01db      	lsls	r3, r3, #7
 80037e0:	4413      	add	r3, r2
 80037e2:	3384      	adds	r3, #132	; 0x84
 80037e4:	461a      	mov	r2, r3
 80037e6:	2300      	movs	r3, #0
 80037e8:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	461a      	mov	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	01db      	lsls	r3, r3, #7
 80037f4:	4413      	add	r3, r2
 80037f6:	3384      	adds	r3, #132	; 0x84
 80037f8:	461a      	mov	r2, r3
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fe:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d102      	bne.n	800380e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8003808:	2304      	movs	r3, #4
 800380a:	61fb      	str	r3, [r7, #28]
 800380c:	e01b      	b.n	8003846 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d102      	bne.n	800381c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8003816:	2303      	movs	r3, #3
 8003818:	61fb      	str	r3, [r7, #28]
 800381a:	e014      	b.n	8003846 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	2b04      	cmp	r3, #4
 8003822:	d00b      	beq.n	800383c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003828:	2b02      	cmp	r3, #2
 800382a:	d007      	beq.n	800383c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003830:	2b03      	cmp	r3, #3
 8003832:	d003      	beq.n	800383c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003838:	2b07      	cmp	r3, #7
 800383a:	d102      	bne.n	8003842 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800383c:	2302      	movs	r3, #2
 800383e:	61fb      	str	r3, [r7, #28]
 8003840:	e001      	b.n	8003846 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8003842:	2301      	movs	r3, #1
 8003844:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	461a      	mov	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	01db      	lsls	r3, r3, #7
 8003850:	4413      	add	r3, r2
 8003852:	3384      	adds	r3, #132	; 0x84
 8003854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	6812      	ldr	r2, [r2, #0]
 800385a:	4611      	mov	r1, r2
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	01d2      	lsls	r2, r2, #7
 8003860:	440a      	add	r2, r1
 8003862:	3284      	adds	r2, #132	; 0x84
 8003864:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003868:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386e:	69fa      	ldr	r2, [r7, #28]
 8003870:	fb02 f303 	mul.w	r3, r2, r3
 8003874:	041a      	lsls	r2, r3, #16
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	6859      	ldr	r1, [r3, #4]
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	1acb      	subs	r3, r1, r3
 8003880:	69f9      	ldr	r1, [r7, #28]
 8003882:	fb01 f303 	mul.w	r3, r1, r3
 8003886:	3307      	adds	r3, #7
 8003888:	68f9      	ldr	r1, [r7, #12]
 800388a:	6809      	ldr	r1, [r1, #0]
 800388c:	4608      	mov	r0, r1
 800388e:	6879      	ldr	r1, [r7, #4]
 8003890:	01c9      	lsls	r1, r1, #7
 8003892:	4401      	add	r1, r0
 8003894:	3184      	adds	r1, #132	; 0x84
 8003896:	4313      	orrs	r3, r2
 8003898:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	461a      	mov	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	01db      	lsls	r3, r3, #7
 80038a4:	4413      	add	r3, r2
 80038a6:	3384      	adds	r3, #132	; 0x84
 80038a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4619      	mov	r1, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	01db      	lsls	r3, r3, #7
 80038b4:	440b      	add	r3, r1
 80038b6:	3384      	adds	r3, #132	; 0x84
 80038b8:	4619      	mov	r1, r3
 80038ba:	4b14      	ldr	r3, [pc, #80]	; (800390c <LTDC_SetConfig+0x330>)
 80038bc:	4013      	ands	r3, r2
 80038be:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	461a      	mov	r2, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	01db      	lsls	r3, r3, #7
 80038ca:	4413      	add	r3, r2
 80038cc:	3384      	adds	r3, #132	; 0x84
 80038ce:	461a      	mov	r2, r3
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	461a      	mov	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	01db      	lsls	r3, r3, #7
 80038e0:	4413      	add	r3, r2
 80038e2:	3384      	adds	r3, #132	; 0x84
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	6812      	ldr	r2, [r2, #0]
 80038ea:	4611      	mov	r1, r2
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	01d2      	lsls	r2, r2, #7
 80038f0:	440a      	add	r2, r1
 80038f2:	3284      	adds	r2, #132	; 0x84
 80038f4:	f043 0301 	orr.w	r3, r3, #1
 80038f8:	6013      	str	r3, [r2, #0]
}
 80038fa:	bf00      	nop
 80038fc:	3724      	adds	r7, #36	; 0x24
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	fffff8f8 	.word	0xfffff8f8
 800390c:	fffff800 	.word	0xfffff800

08003910 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b086      	sub	sp, #24
 8003914:	af02      	add	r7, sp, #8
 8003916:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003918:	2300      	movs	r3, #0
 800391a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800391c:	f7fd fef0 	bl	8001700 <HAL_GetTick>
 8003920:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d102      	bne.n	800392e <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	73fb      	strb	r3, [r7, #15]
 800392c:	e0a5      	b.n	8003a7a <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY    (hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP         (hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003938:	2b00      	cmp	r3, #0
 800393a:	f040 809e 	bne.w	8003a7a <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f7fd fbde 	bl	8001100 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8003944:	f241 3188 	movw	r1, #5000	; 0x1388
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 f89d 	bl	8003a88 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	689a      	ldr	r2, [r3, #8]
 8003954:	4b4b      	ldr	r3, [pc, #300]	; (8003a84 <HAL_OSPI_Init+0x174>)
 8003956:	4013      	ands	r3, r2
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	68d1      	ldr	r1, [r2, #12]
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	6912      	ldr	r2, [r2, #16]
 8003960:	3a01      	subs	r2, #1
 8003962:	0412      	lsls	r2, r2, #16
 8003964:	4311      	orrs	r1, r2
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	6952      	ldr	r2, [r2, #20]
 800396a:	3a01      	subs	r2, #1
 800396c:	0212      	lsls	r2, r2, #8
 800396e:	4311      	orrs	r1, r2
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003974:	4311      	orrs	r1, r2
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	69d2      	ldr	r2, [r2, #28]
 800397a:	4311      	orrs	r1, r2
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	6812      	ldr	r2, [r2, #0]
 8003980:	430b      	orrs	r3, r1
 8003982:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a1a      	ldr	r2, [r3, #32]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	430a      	orrs	r2, r1
 8003998:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399e:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	430a      	orrs	r2, r1
 80039aa:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80039b4:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	3b01      	subs	r3, #1
 80039c6:	021a      	lsls	r2, r3, #8
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	430a      	orrs	r2, r1
 80039ce:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d4:	9300      	str	r3, [sp, #0]
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	2200      	movs	r2, #0
 80039da:	2120      	movs	r1, #32
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 fd4b 	bl	8004478 <OSPI_WaitFlagStateUntilTimeout>
 80039e2:	4603      	mov	r3, r0
 80039e4:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80039e6:	7bfb      	ldrb	r3, [r7, #15]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d146      	bne.n	8003a7a <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fa:	1e5a      	subs	r2, r3, #1
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	430a      	orrs	r2, r1
 8003a02:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	689a      	ldr	r2, [r3, #8]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	430a      	orrs	r2, r1
 8003a18:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003a22:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	430a      	orrs	r2, r1
 8003a36:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f042 0201 	orr.w	r2, r2, #1
 8003a48:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d107      	bne.n	8003a62 <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	689a      	ldr	r2, [r3, #8]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f042 0202 	orr.w	r2, r2, #2
 8003a60:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a6a:	d103      	bne.n	8003a74 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	651a      	str	r2, [r3, #80]	; 0x50
 8003a72:	e002      	b.n	8003a7a <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2202      	movs	r2, #2
 8003a78:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }
  }

  /* Return function status */
  return status;
 8003a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3710      	adds	r7, #16
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	f8e0f8f4 	.word	0xf8e0f8f4

08003a88 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	683a      	ldr	r2, [r7, #0]
 8003a96:	659a      	str	r2, [r3, #88]	; 0x58
  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	370c      	adds	r7, #12
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
	...

08003aa8 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b094      	sub	sp, #80	; 0x50
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8003aba:	2300      	movs	r3, #0
 8003abc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a9d      	ldr	r2, [pc, #628]	; (8003d3c <HAL_OSPIM_Config+0x294>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d105      	bne.n	8003ad6 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8003aca:	2300      	movs	r3, #0
 8003acc:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 1U;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8003ad4:	e004      	b.n	8003ae0 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 0U;
 8003ada:	2300      	movs	r3, #0
 8003adc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003ae6:	e01d      	b.n	8003b24 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 8003ae8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003aec:	3301      	adds	r3, #1
 8003aee:	b2d8      	uxtb	r0, r3
 8003af0:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8003af4:	f107 0114 	add.w	r1, r7, #20
 8003af8:	4613      	mov	r3, r2
 8003afa:	005b      	lsls	r3, r3, #1
 8003afc:	4413      	add	r3, r2
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	440b      	add	r3, r1
 8003b02:	4619      	mov	r1, r3
 8003b04:	f000 fcf0 	bl	80044e8 <OSPIM_GetConfig>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d005      	beq.n	8003b1a <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2208      	movs	r2, #8
 8003b18:	655a      	str	r2, [r3, #84]	; 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003b1a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003b1e:	3301      	adds	r3, #1
 8003b20:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003b24:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d9dd      	bls.n	8003ae8 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8003b2c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f040 8495 	bne.w	8004460 <HAL_OSPIM_Config+0x9b8>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8003b36:	4b81      	ldr	r3, [pc, #516]	; (8003d3c <HAL_OSPIM_Config+0x294>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00b      	beq.n	8003b5a <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8003b42:	4b7e      	ldr	r3, [pc, #504]	; (8003d3c <HAL_OSPIM_Config+0x294>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a7d      	ldr	r2, [pc, #500]	; (8003d3c <HAL_OSPIM_Config+0x294>)
 8003b48:	f023 0301 	bic.w	r3, r3, #1
 8003b4c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8003b4e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003b52:	f043 0301 	orr.w	r3, r3, #1
 8003b56:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8003b5a:	4b79      	ldr	r3, [pc, #484]	; (8003d40 <HAL_OSPIM_Config+0x298>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00b      	beq.n	8003b7e <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003b66:	4b76      	ldr	r3, [pc, #472]	; (8003d40 <HAL_OSPIM_Config+0x298>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a75      	ldr	r2, [pc, #468]	; (8003d40 <HAL_OSPIM_Config+0x298>)
 8003b6c:	f023 0301 	bic.w	r3, r3, #1
 8003b70:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8003b72:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003b76:	f043 0302 	orr.w	r3, r3, #2
 8003b7a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8003b7e:	4971      	ldr	r1, [pc, #452]	; (8003d44 <HAL_OSPIM_Config+0x29c>)
 8003b80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b82:	4613      	mov	r3, r2
 8003b84:	005b      	lsls	r3, r3, #1
 8003b86:	4413      	add	r3, r2
 8003b88:	00db      	lsls	r3, r3, #3
 8003b8a:	3350      	adds	r3, #80	; 0x50
 8003b8c:	443b      	add	r3, r7
 8003b8e:	3b34      	subs	r3, #52	; 0x34
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	3b01      	subs	r3, #1
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	440b      	add	r3, r1
 8003b98:	6859      	ldr	r1, [r3, #4]
 8003b9a:	486a      	ldr	r0, [pc, #424]	; (8003d44 <HAL_OSPIM_Config+0x29c>)
 8003b9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	005b      	lsls	r3, r3, #1
 8003ba2:	4413      	add	r3, r2
 8003ba4:	00db      	lsls	r3, r3, #3
 8003ba6:	3350      	adds	r3, #80	; 0x50
 8003ba8:	443b      	add	r3, r7
 8003baa:	3b34      	subs	r3, #52	; 0x34
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	4403      	add	r3, r0
 8003bb8:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8003bba:	4b62      	ldr	r3, [pc, #392]	; (8003d44 <HAL_OSPIM_Config+0x29c>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	f000 80c0 	beq.w	8003d48 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8003bc8:	4b5e      	ldr	r3, [pc, #376]	; (8003d44 <HAL_OSPIM_Config+0x29c>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a5d      	ldr	r2, [pc, #372]	; (8003d44 <HAL_OSPIM_Config+0x29c>)
 8003bce:	f023 0301 	bic.w	r3, r3, #1
 8003bd2:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 8003bd4:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	f040 8162 	bne.w	8003ea2 <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKSRC);
 8003bde:	4959      	ldr	r1, [pc, #356]	; (8003d44 <HAL_OSPIM_Config+0x29c>)
 8003be0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003be4:	4613      	mov	r3, r2
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	4413      	add	r3, r2
 8003bea:	00db      	lsls	r3, r3, #3
 8003bec:	3350      	adds	r3, #80	; 0x50
 8003bee:	443b      	add	r3, r7
 8003bf0:	3b3c      	subs	r3, #60	; 0x3c
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	440b      	add	r3, r1
 8003bfa:	6859      	ldr	r1, [r3, #4]
 8003bfc:	4851      	ldr	r0, [pc, #324]	; (8003d44 <HAL_OSPIM_Config+0x29c>)
 8003bfe:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003c02:	4613      	mov	r3, r2
 8003c04:	005b      	lsls	r3, r3, #1
 8003c06:	4413      	add	r3, r2
 8003c08:	00db      	lsls	r3, r3, #3
 8003c0a:	3350      	adds	r3, #80	; 0x50
 8003c0c:	443b      	add	r3, r7
 8003c0e:	3b3c      	subs	r3, #60	; 0x3c
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	3b01      	subs	r3, #1
 8003c14:	f041 0202 	orr.w	r2, r1, #2
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	4403      	add	r3, r0
 8003c1c:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8003c1e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003c22:	4613      	mov	r3, r2
 8003c24:	005b      	lsls	r3, r3, #1
 8003c26:	4413      	add	r3, r2
 8003c28:	00db      	lsls	r3, r3, #3
 8003c2a:	3350      	adds	r3, #80	; 0x50
 8003c2c:	443b      	add	r3, r7
 8003c2e:	3b38      	subs	r3, #56	; 0x38
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d01f      	beq.n	8003c76 <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSSRC);
 8003c36:	4943      	ldr	r1, [pc, #268]	; (8003d44 <HAL_OSPIM_Config+0x29c>)
 8003c38:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	005b      	lsls	r3, r3, #1
 8003c40:	4413      	add	r3, r2
 8003c42:	00db      	lsls	r3, r3, #3
 8003c44:	3350      	adds	r3, #80	; 0x50
 8003c46:	443b      	add	r3, r7
 8003c48:	3b38      	subs	r3, #56	; 0x38
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	440b      	add	r3, r1
 8003c52:	6859      	ldr	r1, [r3, #4]
 8003c54:	483b      	ldr	r0, [pc, #236]	; (8003d44 <HAL_OSPIM_Config+0x29c>)
 8003c56:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	005b      	lsls	r3, r3, #1
 8003c5e:	4413      	add	r3, r2
 8003c60:	00db      	lsls	r3, r3, #3
 8003c62:	3350      	adds	r3, #80	; 0x50
 8003c64:	443b      	add	r3, r7
 8003c66:	3b38      	subs	r3, #56	; 0x38
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	f041 0220 	orr.w	r2, r1, #32
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	4403      	add	r3, r0
 8003c74:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003c76:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	4413      	add	r3, r2
 8003c80:	00db      	lsls	r3, r3, #3
 8003c82:	3350      	adds	r3, #80	; 0x50
 8003c84:	443b      	add	r3, r7
 8003c86:	3b30      	subs	r3, #48	; 0x30
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d023      	beq.n	8003cd6 <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLSRC_1);
 8003c8e:	492d      	ldr	r1, [pc, #180]	; (8003d44 <HAL_OSPIM_Config+0x29c>)
 8003c90:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003c94:	4613      	mov	r3, r2
 8003c96:	005b      	lsls	r3, r3, #1
 8003c98:	4413      	add	r3, r2
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	3350      	adds	r3, #80	; 0x50
 8003c9e:	443b      	add	r3, r7
 8003ca0:	3b30      	subs	r3, #48	; 0x30
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	440b      	add	r3, r1
 8003cae:	6859      	ldr	r1, [r3, #4]
 8003cb0:	4824      	ldr	r0, [pc, #144]	; (8003d44 <HAL_OSPIM_Config+0x29c>)
 8003cb2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	005b      	lsls	r3, r3, #1
 8003cba:	4413      	add	r3, r2
 8003cbc:	00db      	lsls	r3, r3, #3
 8003cbe:	3350      	adds	r3, #80	; 0x50
 8003cc0:	443b      	add	r3, r7
 8003cc2:	3b30      	subs	r3, #48	; 0x30
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	f003 0301 	and.w	r3, r3, #1
 8003ccc:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	4403      	add	r3, r0
 8003cd4:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003cd6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003cda:	4613      	mov	r3, r2
 8003cdc:	005b      	lsls	r3, r3, #1
 8003cde:	4413      	add	r3, r2
 8003ce0:	00db      	lsls	r3, r3, #3
 8003ce2:	3350      	adds	r3, #80	; 0x50
 8003ce4:	443b      	add	r3, r7
 8003ce6:	3b2c      	subs	r3, #44	; 0x2c
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f000 80d9 	beq.w	8003ea2 <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHSRC_1);
 8003cf0:	4914      	ldr	r1, [pc, #80]	; (8003d44 <HAL_OSPIM_Config+0x29c>)
 8003cf2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	005b      	lsls	r3, r3, #1
 8003cfa:	4413      	add	r3, r2
 8003cfc:	00db      	lsls	r3, r3, #3
 8003cfe:	3350      	adds	r3, #80	; 0x50
 8003d00:	443b      	add	r3, r7
 8003d02:	3b2c      	subs	r3, #44	; 0x2c
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	3b01      	subs	r3, #1
 8003d08:	f003 0301 	and.w	r3, r3, #1
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	440b      	add	r3, r1
 8003d10:	6859      	ldr	r1, [r3, #4]
 8003d12:	480c      	ldr	r0, [pc, #48]	; (8003d44 <HAL_OSPIM_Config+0x29c>)
 8003d14:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003d18:	4613      	mov	r3, r2
 8003d1a:	005b      	lsls	r3, r3, #1
 8003d1c:	4413      	add	r3, r2
 8003d1e:	00db      	lsls	r3, r3, #3
 8003d20:	3350      	adds	r3, #80	; 0x50
 8003d22:	443b      	add	r3, r7
 8003d24:	3b2c      	subs	r3, #44	; 0x2c
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	f041 6280 	orr.w	r2, r1, #67108864	; 0x4000000
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	4403      	add	r3, r0
 8003d36:	605a      	str	r2, [r3, #4]
 8003d38:	e0b3      	b.n	8003ea2 <HAL_OSPIM_Config+0x3fa>
 8003d3a:	bf00      	nop
 8003d3c:	52005000 	.word	0x52005000
 8003d40:	5200a000 	.word	0x5200a000
 8003d44:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8003d48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	005b      	lsls	r3, r3, #1
 8003d4e:	4413      	add	r3, r2
 8003d50:	00db      	lsls	r3, r3, #3
 8003d52:	3350      	adds	r3, #80	; 0x50
 8003d54:	443b      	add	r3, r7
 8003d56:	3b3c      	subs	r3, #60	; 0x3c
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f000 80a1 	beq.w	8003ea2 <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8003d60:	4993      	ldr	r1, [pc, #588]	; (8003fb0 <HAL_OSPIM_Config+0x508>)
 8003d62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d64:	4613      	mov	r3, r2
 8003d66:	005b      	lsls	r3, r3, #1
 8003d68:	4413      	add	r3, r2
 8003d6a:	00db      	lsls	r3, r3, #3
 8003d6c:	3350      	adds	r3, #80	; 0x50
 8003d6e:	443b      	add	r3, r7
 8003d70:	3b3c      	subs	r3, #60	; 0x3c
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	3b01      	subs	r3, #1
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	440b      	add	r3, r1
 8003d7a:	6859      	ldr	r1, [r3, #4]
 8003d7c:	488c      	ldr	r0, [pc, #560]	; (8003fb0 <HAL_OSPIM_Config+0x508>)
 8003d7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d80:	4613      	mov	r3, r2
 8003d82:	005b      	lsls	r3, r3, #1
 8003d84:	4413      	add	r3, r2
 8003d86:	00db      	lsls	r3, r3, #3
 8003d88:	3350      	adds	r3, #80	; 0x50
 8003d8a:	443b      	add	r3, r7
 8003d8c:	3b3c      	subs	r3, #60	; 0x3c
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	3b01      	subs	r3, #1
 8003d92:	f021 0201 	bic.w	r2, r1, #1
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4403      	add	r3, r0
 8003d9a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8003d9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d9e:	4613      	mov	r3, r2
 8003da0:	005b      	lsls	r3, r3, #1
 8003da2:	4413      	add	r3, r2
 8003da4:	00db      	lsls	r3, r3, #3
 8003da6:	3350      	adds	r3, #80	; 0x50
 8003da8:	443b      	add	r3, r7
 8003daa:	3b38      	subs	r3, #56	; 0x38
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d01d      	beq.n	8003dee <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8003db2:	497f      	ldr	r1, [pc, #508]	; (8003fb0 <HAL_OSPIM_Config+0x508>)
 8003db4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003db6:	4613      	mov	r3, r2
 8003db8:	005b      	lsls	r3, r3, #1
 8003dba:	4413      	add	r3, r2
 8003dbc:	00db      	lsls	r3, r3, #3
 8003dbe:	3350      	adds	r3, #80	; 0x50
 8003dc0:	443b      	add	r3, r7
 8003dc2:	3b38      	subs	r3, #56	; 0x38
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	440b      	add	r3, r1
 8003dcc:	6859      	ldr	r1, [r3, #4]
 8003dce:	4878      	ldr	r0, [pc, #480]	; (8003fb0 <HAL_OSPIM_Config+0x508>)
 8003dd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	4413      	add	r3, r2
 8003dd8:	00db      	lsls	r3, r3, #3
 8003dda:	3350      	adds	r3, #80	; 0x50
 8003ddc:	443b      	add	r3, r7
 8003dde:	3b38      	subs	r3, #56	; 0x38
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	3b01      	subs	r3, #1
 8003de4:	f021 0210 	bic.w	r2, r1, #16
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	4403      	add	r3, r0
 8003dec:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003dee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003df0:	4613      	mov	r3, r2
 8003df2:	005b      	lsls	r3, r3, #1
 8003df4:	4413      	add	r3, r2
 8003df6:	00db      	lsls	r3, r3, #3
 8003df8:	3350      	adds	r3, #80	; 0x50
 8003dfa:	443b      	add	r3, r7
 8003dfc:	3b30      	subs	r3, #48	; 0x30
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d021      	beq.n	8003e48 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8003e04:	496a      	ldr	r1, [pc, #424]	; (8003fb0 <HAL_OSPIM_Config+0x508>)
 8003e06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e08:	4613      	mov	r3, r2
 8003e0a:	005b      	lsls	r3, r3, #1
 8003e0c:	4413      	add	r3, r2
 8003e0e:	00db      	lsls	r3, r3, #3
 8003e10:	3350      	adds	r3, #80	; 0x50
 8003e12:	443b      	add	r3, r7
 8003e14:	3b30      	subs	r3, #48	; 0x30
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	440b      	add	r3, r1
 8003e22:	6859      	ldr	r1, [r3, #4]
 8003e24:	4862      	ldr	r0, [pc, #392]	; (8003fb0 <HAL_OSPIM_Config+0x508>)
 8003e26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e28:	4613      	mov	r3, r2
 8003e2a:	005b      	lsls	r3, r3, #1
 8003e2c:	4413      	add	r3, r2
 8003e2e:	00db      	lsls	r3, r3, #3
 8003e30:	3350      	adds	r3, #80	; 0x50
 8003e32:	443b      	add	r3, r7
 8003e34:	3b30      	subs	r3, #48	; 0x30
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	4403      	add	r3, r0
 8003e46:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003e48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	005b      	lsls	r3, r3, #1
 8003e4e:	4413      	add	r3, r2
 8003e50:	00db      	lsls	r3, r3, #3
 8003e52:	3350      	adds	r3, #80	; 0x50
 8003e54:	443b      	add	r3, r7
 8003e56:	3b2c      	subs	r3, #44	; 0x2c
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d021      	beq.n	8003ea2 <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8003e5e:	4954      	ldr	r1, [pc, #336]	; (8003fb0 <HAL_OSPIM_Config+0x508>)
 8003e60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e62:	4613      	mov	r3, r2
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	4413      	add	r3, r2
 8003e68:	00db      	lsls	r3, r3, #3
 8003e6a:	3350      	adds	r3, #80	; 0x50
 8003e6c:	443b      	add	r3, r7
 8003e6e:	3b2c      	subs	r3, #44	; 0x2c
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	3b01      	subs	r3, #1
 8003e74:	f003 0301 	and.w	r3, r3, #1
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	440b      	add	r3, r1
 8003e7c:	6859      	ldr	r1, [r3, #4]
 8003e7e:	484c      	ldr	r0, [pc, #304]	; (8003fb0 <HAL_OSPIM_Config+0x508>)
 8003e80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e82:	4613      	mov	r3, r2
 8003e84:	005b      	lsls	r3, r3, #1
 8003e86:	4413      	add	r3, r2
 8003e88:	00db      	lsls	r3, r3, #3
 8003e8a:	3350      	adds	r3, #80	; 0x50
 8003e8c:	443b      	add	r3, r7
 8003e8e:	3b2c      	subs	r3, #44	; 0x2c
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	3b01      	subs	r3, #1
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	4403      	add	r3, r0
 8003ea0:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	6819      	ldr	r1, [r3, #0]
 8003ea6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003eaa:	4613      	mov	r3, r2
 8003eac:	005b      	lsls	r3, r3, #1
 8003eae:	4413      	add	r3, r2
 8003eb0:	00db      	lsls	r3, r3, #3
 8003eb2:	3350      	adds	r3, #80	; 0x50
 8003eb4:	443b      	add	r3, r7
 8003eb6:	3b3c      	subs	r3, #60	; 0x3c
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4299      	cmp	r1, r3
 8003ebc:	d038      	beq.n	8003f30 <HAL_OSPIM_Config+0x488>
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	6859      	ldr	r1, [r3, #4]
 8003ec2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	005b      	lsls	r3, r3, #1
 8003eca:	4413      	add	r3, r2
 8003ecc:	00db      	lsls	r3, r3, #3
 8003ece:	3350      	adds	r3, #80	; 0x50
 8003ed0:	443b      	add	r3, r7
 8003ed2:	3b38      	subs	r3, #56	; 0x38
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4299      	cmp	r1, r3
 8003ed8:	d02a      	beq.n	8003f30 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	6899      	ldr	r1, [r3, #8]
 8003ede:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	005b      	lsls	r3, r3, #1
 8003ee6:	4413      	add	r3, r2
 8003ee8:	00db      	lsls	r3, r3, #3
 8003eea:	3350      	adds	r3, #80	; 0x50
 8003eec:	443b      	add	r3, r7
 8003eee:	3b34      	subs	r3, #52	; 0x34
 8003ef0:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8003ef2:	4299      	cmp	r1, r3
 8003ef4:	d01c      	beq.n	8003f30 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	68d9      	ldr	r1, [r3, #12]
 8003efa:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003efe:	4613      	mov	r3, r2
 8003f00:	005b      	lsls	r3, r3, #1
 8003f02:	4413      	add	r3, r2
 8003f04:	00db      	lsls	r3, r3, #3
 8003f06:	3350      	adds	r3, #80	; 0x50
 8003f08:	443b      	add	r3, r7
 8003f0a:	3b30      	subs	r3, #48	; 0x30
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4299      	cmp	r1, r3
 8003f10:	d00e      	beq.n	8003f30 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	6919      	ldr	r1, [r3, #16]
 8003f16:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	4413      	add	r3, r2
 8003f20:	00db      	lsls	r3, r3, #3
 8003f22:	3350      	adds	r3, #80	; 0x50
 8003f24:	443b      	add	r3, r7
 8003f26:	3b2c      	subs	r3, #44	; 0x2c
 8003f28:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003f2a:	4299      	cmp	r1, r3
 8003f2c:	f040 810e 	bne.w	800414c <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	6819      	ldr	r1, [r3, #0]
 8003f34:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003f38:	4613      	mov	r3, r2
 8003f3a:	005b      	lsls	r3, r3, #1
 8003f3c:	4413      	add	r3, r2
 8003f3e:	00db      	lsls	r3, r3, #3
 8003f40:	3350      	adds	r3, #80	; 0x50
 8003f42:	443b      	add	r3, r7
 8003f44:	3b3c      	subs	r3, #60	; 0x3c
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4299      	cmp	r1, r3
 8003f4a:	d133      	bne.n	8003fb4 <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	6859      	ldr	r1, [r3, #4]
 8003f50:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003f54:	4613      	mov	r3, r2
 8003f56:	005b      	lsls	r3, r3, #1
 8003f58:	4413      	add	r3, r2
 8003f5a:	00db      	lsls	r3, r3, #3
 8003f5c:	3350      	adds	r3, #80	; 0x50
 8003f5e:	443b      	add	r3, r7
 8003f60:	3b38      	subs	r3, #56	; 0x38
 8003f62:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8003f64:	4299      	cmp	r1, r3
 8003f66:	d125      	bne.n	8003fb4 <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	68d9      	ldr	r1, [r3, #12]
 8003f6c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003f70:	4613      	mov	r3, r2
 8003f72:	005b      	lsls	r3, r3, #1
 8003f74:	4413      	add	r3, r2
 8003f76:	00db      	lsls	r3, r3, #3
 8003f78:	3350      	adds	r3, #80	; 0x50
 8003f7a:	443b      	add	r3, r7
 8003f7c:	3b30      	subs	r3, #48	; 0x30
 8003f7e:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8003f80:	4299      	cmp	r1, r3
 8003f82:	d117      	bne.n	8003fb4 <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	6919      	ldr	r1, [r3, #16]
 8003f88:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	005b      	lsls	r3, r3, #1
 8003f90:	4413      	add	r3, r2
 8003f92:	00db      	lsls	r3, r3, #3
 8003f94:	3350      	adds	r3, #80	; 0x50
 8003f96:	443b      	add	r3, r7
 8003f98:	3b2c      	subs	r3, #44	; 0x2c
 8003f9a:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8003f9c:	4299      	cmp	r1, r3
 8003f9e:	d109      	bne.n	8003fb4 <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8003fa0:	4b03      	ldr	r3, [pc, #12]	; (8003fb0 <HAL_OSPIM_Config+0x508>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a02      	ldr	r2, [pc, #8]	; (8003fb0 <HAL_OSPIM_Config+0x508>)
 8003fa6:	f043 0301 	orr.w	r3, r3, #1
 8003faa:	6013      	str	r3, [r2, #0]
 8003fac:	e0ce      	b.n	800414c <HAL_OSPIM_Config+0x6a4>
 8003fae:	bf00      	nop
 8003fb0:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8003fb4:	49bb      	ldr	r1, [pc, #748]	; (80042a4 <HAL_OSPIM_Config+0x7fc>)
 8003fb6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003fba:	4613      	mov	r3, r2
 8003fbc:	005b      	lsls	r3, r3, #1
 8003fbe:	4413      	add	r3, r2
 8003fc0:	00db      	lsls	r3, r3, #3
 8003fc2:	3350      	adds	r3, #80	; 0x50
 8003fc4:	443b      	add	r3, r7
 8003fc6:	3b3c      	subs	r3, #60	; 0x3c
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	440b      	add	r3, r1
 8003fd0:	6859      	ldr	r1, [r3, #4]
 8003fd2:	48b4      	ldr	r0, [pc, #720]	; (80042a4 <HAL_OSPIM_Config+0x7fc>)
 8003fd4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003fd8:	4613      	mov	r3, r2
 8003fda:	005b      	lsls	r3, r3, #1
 8003fdc:	4413      	add	r3, r2
 8003fde:	00db      	lsls	r3, r3, #3
 8003fe0:	3350      	adds	r3, #80	; 0x50
 8003fe2:	443b      	add	r3, r7
 8003fe4:	3b3c      	subs	r3, #60	; 0x3c
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	f021 0201 	bic.w	r2, r1, #1
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	4403      	add	r3, r0
 8003ff2:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8003ff4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	005b      	lsls	r3, r3, #1
 8003ffc:	4413      	add	r3, r2
 8003ffe:	00db      	lsls	r3, r3, #3
 8004000:	3350      	adds	r3, #80	; 0x50
 8004002:	443b      	add	r3, r7
 8004004:	3b38      	subs	r3, #56	; 0x38
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d01f      	beq.n	800404c <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 800400c:	49a5      	ldr	r1, [pc, #660]	; (80042a4 <HAL_OSPIM_Config+0x7fc>)
 800400e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004012:	4613      	mov	r3, r2
 8004014:	005b      	lsls	r3, r3, #1
 8004016:	4413      	add	r3, r2
 8004018:	00db      	lsls	r3, r3, #3
 800401a:	3350      	adds	r3, #80	; 0x50
 800401c:	443b      	add	r3, r7
 800401e:	3b38      	subs	r3, #56	; 0x38
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	3b01      	subs	r3, #1
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	440b      	add	r3, r1
 8004028:	6859      	ldr	r1, [r3, #4]
 800402a:	489e      	ldr	r0, [pc, #632]	; (80042a4 <HAL_OSPIM_Config+0x7fc>)
 800402c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004030:	4613      	mov	r3, r2
 8004032:	005b      	lsls	r3, r3, #1
 8004034:	4413      	add	r3, r2
 8004036:	00db      	lsls	r3, r3, #3
 8004038:	3350      	adds	r3, #80	; 0x50
 800403a:	443b      	add	r3, r7
 800403c:	3b38      	subs	r3, #56	; 0x38
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	3b01      	subs	r3, #1
 8004042:	f021 0210 	bic.w	r2, r1, #16
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	4403      	add	r3, r0
 800404a:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 800404c:	4995      	ldr	r1, [pc, #596]	; (80042a4 <HAL_OSPIM_Config+0x7fc>)
 800404e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004052:	4613      	mov	r3, r2
 8004054:	005b      	lsls	r3, r3, #1
 8004056:	4413      	add	r3, r2
 8004058:	00db      	lsls	r3, r3, #3
 800405a:	3350      	adds	r3, #80	; 0x50
 800405c:	443b      	add	r3, r7
 800405e:	3b34      	subs	r3, #52	; 0x34
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	3b01      	subs	r3, #1
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	440b      	add	r3, r1
 8004068:	6859      	ldr	r1, [r3, #4]
 800406a:	488e      	ldr	r0, [pc, #568]	; (80042a4 <HAL_OSPIM_Config+0x7fc>)
 800406c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004070:	4613      	mov	r3, r2
 8004072:	005b      	lsls	r3, r3, #1
 8004074:	4413      	add	r3, r2
 8004076:	00db      	lsls	r3, r3, #3
 8004078:	3350      	adds	r3, #80	; 0x50
 800407a:	443b      	add	r3, r7
 800407c:	3b34      	subs	r3, #52	; 0x34
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	3b01      	subs	r3, #1
 8004082:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	4403      	add	r3, r0
 800408a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800408c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004090:	4613      	mov	r3, r2
 8004092:	005b      	lsls	r3, r3, #1
 8004094:	4413      	add	r3, r2
 8004096:	00db      	lsls	r3, r3, #3
 8004098:	3350      	adds	r3, #80	; 0x50
 800409a:	443b      	add	r3, r7
 800409c:	3b30      	subs	r3, #48	; 0x30
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d023      	beq.n	80040ec <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80040a4:	497f      	ldr	r1, [pc, #508]	; (80042a4 <HAL_OSPIM_Config+0x7fc>)
 80040a6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80040aa:	4613      	mov	r3, r2
 80040ac:	005b      	lsls	r3, r3, #1
 80040ae:	4413      	add	r3, r2
 80040b0:	00db      	lsls	r3, r3, #3
 80040b2:	3350      	adds	r3, #80	; 0x50
 80040b4:	443b      	add	r3, r7
 80040b6:	3b30      	subs	r3, #48	; 0x30
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	3b01      	subs	r3, #1
 80040bc:	f003 0301 	and.w	r3, r3, #1
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	440b      	add	r3, r1
 80040c4:	6859      	ldr	r1, [r3, #4]
 80040c6:	4877      	ldr	r0, [pc, #476]	; (80042a4 <HAL_OSPIM_Config+0x7fc>)
 80040c8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80040cc:	4613      	mov	r3, r2
 80040ce:	005b      	lsls	r3, r3, #1
 80040d0:	4413      	add	r3, r2
 80040d2:	00db      	lsls	r3, r3, #3
 80040d4:	3350      	adds	r3, #80	; 0x50
 80040d6:	443b      	add	r3, r7
 80040d8:	3b30      	subs	r3, #48	; 0x30
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	3b01      	subs	r3, #1
 80040de:	f003 0301 	and.w	r3, r3, #1
 80040e2:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	4403      	add	r3, r0
 80040ea:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80040ec:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80040f0:	4613      	mov	r3, r2
 80040f2:	005b      	lsls	r3, r3, #1
 80040f4:	4413      	add	r3, r2
 80040f6:	00db      	lsls	r3, r3, #3
 80040f8:	3350      	adds	r3, #80	; 0x50
 80040fa:	443b      	add	r3, r7
 80040fc:	3b2c      	subs	r3, #44	; 0x2c
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d023      	beq.n	800414c <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8004104:	4967      	ldr	r1, [pc, #412]	; (80042a4 <HAL_OSPIM_Config+0x7fc>)
 8004106:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800410a:	4613      	mov	r3, r2
 800410c:	005b      	lsls	r3, r3, #1
 800410e:	4413      	add	r3, r2
 8004110:	00db      	lsls	r3, r3, #3
 8004112:	3350      	adds	r3, #80	; 0x50
 8004114:	443b      	add	r3, r7
 8004116:	3b2c      	subs	r3, #44	; 0x2c
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	3b01      	subs	r3, #1
 800411c:	f003 0301 	and.w	r3, r3, #1
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	440b      	add	r3, r1
 8004124:	6859      	ldr	r1, [r3, #4]
 8004126:	485f      	ldr	r0, [pc, #380]	; (80042a4 <HAL_OSPIM_Config+0x7fc>)
 8004128:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800412c:	4613      	mov	r3, r2
 800412e:	005b      	lsls	r3, r3, #1
 8004130:	4413      	add	r3, r2
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	3350      	adds	r3, #80	; 0x50
 8004136:	443b      	add	r3, r7
 8004138:	3b2c      	subs	r3, #44	; 0x2c
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	3b01      	subs	r3, #1
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	4403      	add	r3, r0
 800414a:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 800414c:	4a55      	ldr	r2, [pc, #340]	; (80042a4 <HAL_OSPIM_Config+0x7fc>)
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	3b01      	subs	r3, #1
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	4413      	add	r3, r2
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800415e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004160:	025b      	lsls	r3, r3, #9
 8004162:	431a      	orrs	r2, r3
 8004164:	494f      	ldr	r1, [pc, #316]	; (80042a4 <HAL_OSPIM_Config+0x7fc>)
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	3b01      	subs	r3, #1
 800416c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	440b      	add	r3, r1
 8004174:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	1e5a      	subs	r2, r3, #1
 800417c:	4b49      	ldr	r3, [pc, #292]	; (80042a4 <HAL_OSPIM_Config+0x7fc>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	0c1b      	lsrs	r3, r3, #16
 8004182:	b2db      	uxtb	r3, r3
 8004184:	429a      	cmp	r2, r3
 8004186:	d90a      	bls.n	800419e <HAL_OSPIM_Config+0x6f6>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8004188:	4b46      	ldr	r3, [pc, #280]	; (80042a4 <HAL_OSPIM_Config+0x7fc>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	695b      	ldr	r3, [r3, #20]
 8004194:	3b01      	subs	r3, #1
 8004196:	041b      	lsls	r3, r3, #16
 8004198:	4942      	ldr	r1, [pc, #264]	; (80042a4 <HAL_OSPIM_Config+0x7fc>)
 800419a:	4313      	orrs	r3, r2
 800419c:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 800419e:	4b41      	ldr	r3, [pc, #260]	; (80042a4 <HAL_OSPIM_Config+0x7fc>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f000 809a 	beq.w	80042e0 <HAL_OSPIM_Config+0x838>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 80041ac:	4a3d      	ldr	r2, [pc, #244]	; (80042a4 <HAL_OSPIM_Config+0x7fc>)
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	3b01      	subs	r3, #1
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	4413      	add	r3, r2
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f023 0203 	bic.w	r2, r3, #3
 80041be:	4939      	ldr	r1, [pc, #228]	; (80042a4 <HAL_OSPIM_Config+0x7fc>)
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	3b01      	subs	r3, #1
 80041c6:	f042 0201 	orr.w	r2, r2, #1
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	440b      	add	r3, r1
 80041ce:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d011      	beq.n	80041fc <HAL_OSPIM_Config+0x754>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 80041d8:	4a32      	ldr	r2, [pc, #200]	; (80042a4 <HAL_OSPIM_Config+0x7fc>)
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	3b01      	subs	r3, #1
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	4413      	add	r3, r2
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80041ea:	492e      	ldr	r1, [pc, #184]	; (80042a4 <HAL_OSPIM_Config+0x7fc>)
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	3b01      	subs	r3, #1
 80041f2:	f042 0210 	orr.w	r2, r2, #16
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	440b      	add	r3, r1
 80041fa:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d016      	beq.n	8004236 <HAL_OSPIM_Config+0x78e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8004208:	4a26      	ldr	r2, [pc, #152]	; (80042a4 <HAL_OSPIM_Config+0x7fc>)
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	3b01      	subs	r3, #1
 8004210:	f003 0301 	and.w	r3, r3, #1
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	4413      	add	r3, r2
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800421e:	4921      	ldr	r1, [pc, #132]	; (80042a4 <HAL_OSPIM_Config+0x7fc>)
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	3b01      	subs	r3, #1
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	440b      	add	r3, r1
 8004232:	605a      	str	r2, [r3, #4]
 8004234:	e019      	b.n	800426a <HAL_OSPIM_Config+0x7c2>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d015      	beq.n	800426a <HAL_OSPIM_Config+0x7c2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800423e:	4a19      	ldr	r2, [pc, #100]	; (80042a4 <HAL_OSPIM_Config+0x7fc>)
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	3b01      	subs	r3, #1
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	4413      	add	r3, r2
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004254:	4913      	ldr	r1, [pc, #76]	; (80042a4 <HAL_OSPIM_Config+0x7fc>)
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	3b01      	subs	r3, #1
 800425c:	f003 0301 	and.w	r3, r3, #1
 8004260:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	440b      	add	r3, r1
 8004268:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d018      	beq.n	80042a8 <HAL_OSPIM_Config+0x800>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8004276:	4a0b      	ldr	r2, [pc, #44]	; (80042a4 <HAL_OSPIM_Config+0x7fc>)
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	691b      	ldr	r3, [r3, #16]
 800427c:	3b01      	subs	r3, #1
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	4413      	add	r3, r2
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800428c:	4905      	ldr	r1, [pc, #20]	; (80042a4 <HAL_OSPIM_Config+0x7fc>)
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	3b01      	subs	r3, #1
 8004294:	f003 0301 	and.w	r3, r3, #1
 8004298:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	440b      	add	r3, r1
 80042a0:	605a      	str	r2, [r3, #4]
 80042a2:	e0c5      	b.n	8004430 <HAL_OSPIM_Config+0x988>
 80042a4:	5200b400 	.word	0x5200b400
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f000 80bf 	beq.w	8004430 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80042b2:	4a6e      	ldr	r2, [pc, #440]	; (800446c <HAL_OSPIM_Config+0x9c4>)
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	3b01      	subs	r3, #1
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	4413      	add	r3, r2
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80042c8:	4968      	ldr	r1, [pc, #416]	; (800446c <HAL_OSPIM_Config+0x9c4>)
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	3b01      	subs	r3, #1
 80042d0:	f003 0301 	and.w	r3, r3, #1
 80042d4:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	440b      	add	r3, r1
 80042dc:	605a      	str	r2, [r3, #4]
 80042de:	e0a7      	b.n	8004430 <HAL_OSPIM_Config+0x988>
         /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 80042e0:	4a62      	ldr	r2, [pc, #392]	; (800446c <HAL_OSPIM_Config+0x9c4>)
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	3b01      	subs	r3, #1
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	4413      	add	r3, r2
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f023 0203 	bic.w	r2, r3, #3
 80042f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042f4:	005b      	lsls	r3, r3, #1
 80042f6:	431a      	orrs	r2, r3
 80042f8:	495c      	ldr	r1, [pc, #368]	; (800446c <HAL_OSPIM_Config+0x9c4>)
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	3b01      	subs	r3, #1
 8004300:	f042 0201 	orr.w	r2, r2, #1
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	440b      	add	r3, r1
 8004308:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d014      	beq.n	800433c <HAL_OSPIM_Config+0x894>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8004312:	4a56      	ldr	r2, [pc, #344]	; (800446c <HAL_OSPIM_Config+0x9c4>)
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	3b01      	subs	r3, #1
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	4413      	add	r3, r2
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004324:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004326:	015b      	lsls	r3, r3, #5
 8004328:	431a      	orrs	r2, r3
 800432a:	4950      	ldr	r1, [pc, #320]	; (800446c <HAL_OSPIM_Config+0x9c4>)
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	3b01      	subs	r3, #1
 8004332:	f042 0210 	orr.w	r2, r2, #16
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	440b      	add	r3, r1
 800433a:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d019      	beq.n	800437c <HAL_OSPIM_Config+0x8d4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8004348:	4a48      	ldr	r2, [pc, #288]	; (800446c <HAL_OSPIM_Config+0x9c4>)
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	3b01      	subs	r3, #1
 8004350:	f003 0301 	and.w	r3, r3, #1
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	4413      	add	r3, r2
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800435e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004360:	049b      	lsls	r3, r3, #18
 8004362:	431a      	orrs	r2, r3
 8004364:	4941      	ldr	r1, [pc, #260]	; (800446c <HAL_OSPIM_Config+0x9c4>)
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	3b01      	subs	r3, #1
 800436c:	f003 0301 	and.w	r3, r3, #1
 8004370:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	440b      	add	r3, r1
 8004378:	605a      	str	r2, [r3, #4]
 800437a:	e01c      	b.n	80043b6 <HAL_OSPIM_Config+0x90e>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d018      	beq.n	80043b6 <HAL_OSPIM_Config+0x90e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8004384:	4a39      	ldr	r2, [pc, #228]	; (800446c <HAL_OSPIM_Config+0x9c4>)
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	3b01      	subs	r3, #1
 800438c:	f003 0301 	and.w	r3, r3, #1
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	4413      	add	r3, r2
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800439a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800439c:	069b      	lsls	r3, r3, #26
 800439e:	431a      	orrs	r2, r3
 80043a0:	4932      	ldr	r1, [pc, #200]	; (800446c <HAL_OSPIM_Config+0x9c4>)
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	3b01      	subs	r3, #1
 80043a8:	f003 0301 	and.w	r3, r3, #1
 80043ac:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	440b      	add	r3, r1
 80043b4:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d019      	beq.n	80043f6 <HAL_OSPIM_Config+0x94e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80043c2:	4a2a      	ldr	r2, [pc, #168]	; (800446c <HAL_OSPIM_Config+0x9c4>)
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	3b01      	subs	r3, #1
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	4413      	add	r3, r2
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80043d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043da:	049b      	lsls	r3, r3, #18
 80043dc:	431a      	orrs	r2, r3
 80043de:	4923      	ldr	r1, [pc, #140]	; (800446c <HAL_OSPIM_Config+0x9c4>)
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	3b01      	subs	r3, #1
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	440b      	add	r3, r1
 80043f2:	605a      	str	r2, [r3, #4]
 80043f4:	e01c      	b.n	8004430 <HAL_OSPIM_Config+0x988>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d018      	beq.n	8004430 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80043fe:	4a1b      	ldr	r2, [pc, #108]	; (800446c <HAL_OSPIM_Config+0x9c4>)
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	3b01      	subs	r3, #1
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	4413      	add	r3, r2
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004414:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004416:	069b      	lsls	r3, r3, #26
 8004418:	431a      	orrs	r2, r3
 800441a:	4914      	ldr	r1, [pc, #80]	; (800446c <HAL_OSPIM_Config+0x9c4>)
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	3b01      	subs	r3, #1
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	440b      	add	r3, r1
 800442e:	605a      	str	r2, [r3, #4]
         /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8004430:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004434:	f003 0301 	and.w	r3, r3, #1
 8004438:	2b00      	cmp	r3, #0
 800443a:	d005      	beq.n	8004448 <HAL_OSPIM_Config+0x9a0>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800443c:	4b0c      	ldr	r3, [pc, #48]	; (8004470 <HAL_OSPIM_Config+0x9c8>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a0b      	ldr	r2, [pc, #44]	; (8004470 <HAL_OSPIM_Config+0x9c8>)
 8004442:	f043 0301 	orr.w	r3, r3, #1
 8004446:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8004448:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800444c:	f003 0302 	and.w	r3, r3, #2
 8004450:	2b00      	cmp	r3, #0
 8004452:	d005      	beq.n	8004460 <HAL_OSPIM_Config+0x9b8>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8004454:	4b07      	ldr	r3, [pc, #28]	; (8004474 <HAL_OSPIM_Config+0x9cc>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a06      	ldr	r2, [pc, #24]	; (8004474 <HAL_OSPIM_Config+0x9cc>)
 800445a:	f043 0301 	orr.w	r3, r3, #1
 800445e:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8004460:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8004464:	4618      	mov	r0, r3
 8004466:	3750      	adds	r7, #80	; 0x50
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	5200b400 	.word	0x5200b400
 8004470:	52005000 	.word	0x52005000
 8004474:	5200a000 	.word	0x5200a000

08004478 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	603b      	str	r3, [r7, #0]
 8004484:	4613      	mov	r3, r2
 8004486:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004488:	e01a      	b.n	80044c0 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004490:	d016      	beq.n	80044c0 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004492:	f7fd f935 	bl	8001700 <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	69ba      	ldr	r2, [r7, #24]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d302      	bcc.n	80044a8 <OSPI_WaitFlagStateUntilTimeout+0x30>
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d10b      	bne.n	80044c0 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044ae:	651a      	str	r2, [r3, #80]	; 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b4:	f043 0201 	orr.w	r2, r3, #1
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	655a      	str	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e00e      	b.n	80044de <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	6a1a      	ldr	r2, [r3, #32]
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	4013      	ands	r3, r2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	bf14      	ite	ne
 80044ce:	2301      	movne	r3, #1
 80044d0:	2300      	moveq	r3, #0
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	461a      	mov	r2, r3
 80044d6:	79fb      	ldrb	r3, [r7, #7]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d1d6      	bne.n	800448a <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
	...

080044e8 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b087      	sub	sp, #28
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	4603      	mov	r3, r0
 80044f0:	6039      	str	r1, [r7, #0]
 80044f2:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80044f4:	2300      	movs	r3, #0
 80044f6:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 80044f8:	2300      	movs	r3, #0
 80044fa:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 80044fc:	79fb      	ldrb	r3, [r7, #7]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d005      	beq.n	800450e <OSPIM_GetConfig+0x26>
 8004502:	79fb      	ldrb	r3, [r7, #7]
 8004504:	2b02      	cmp	r3, #2
 8004506:	d802      	bhi.n	800450e <OSPIM_GetConfig+0x26>
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d102      	bne.n	8004514 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	75fb      	strb	r3, [r7, #23]
 8004512:	e098      	b.n	8004646 <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	2200      	movs	r2, #0
 8004518:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	2200      	movs	r2, #0
 800451e:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	2200      	movs	r2, #0
 8004524:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2200      	movs	r2, #0
 800452a:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	2200      	movs	r2, #0
 8004530:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8004532:	79fb      	ldrb	r3, [r7, #7]
 8004534:	2b02      	cmp	r3, #2
 8004536:	d10b      	bne.n	8004550 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8004538:	4b46      	ldr	r3, [pc, #280]	; (8004654 <OSPIM_GetConfig+0x16c>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0301 	and.w	r3, r3, #1
 8004540:	2b00      	cmp	r3, #0
 8004542:	d102      	bne.n	800454a <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8004544:	4b44      	ldr	r3, [pc, #272]	; (8004658 <OSPIM_GetConfig+0x170>)
 8004546:	613b      	str	r3, [r7, #16]
 8004548:	e002      	b.n	8004550 <OSPIM_GetConfig+0x68>
               | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 800454a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800454e:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8004550:	2300      	movs	r3, #0
 8004552:	60fb      	str	r3, [r7, #12]
 8004554:	e074      	b.n	8004640 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 8004556:	4a3f      	ldr	r2, [pc, #252]	; (8004654 <OSPIM_GetConfig+0x16c>)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	4413      	add	r3, r2
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	f003 0301 	and.w	r3, r3, #1
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00a      	beq.n	8004582 <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 800456c:	68ba      	ldr	r2, [r7, #8]
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	4053      	eors	r3, r2
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	2b00      	cmp	r3, #0
 8004578:	d103      	bne.n	8004582 <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	1c5a      	adds	r2, r3, #1
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	f003 0310 	and.w	r3, r3, #16
 8004588:	2b00      	cmp	r3, #0
 800458a:	d00a      	beq.n	80045a2 <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	4053      	eors	r3, r2
 8004592:	f003 0320 	and.w	r3, r3, #32
 8004596:	2b00      	cmp	r3, #0
 8004598:	d103      	bne.n	80045a2 <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	1c5a      	adds	r2, r3, #1
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d00a      	beq.n	80045c2 <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	4053      	eors	r3, r2
 80045b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d103      	bne.n	80045c2 <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	1c5a      	adds	r2, r3, #1
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d018      	beq.n	80045fe <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 80045cc:	68ba      	ldr	r2, [r7, #8]
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	4053      	eors	r3, r2
 80045d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d111      	bne.n	80045fe <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d106      	bne.n	80045f2 <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	3301      	adds	r3, #1
 80045e8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	60da      	str	r2, [r3, #12]
 80045f0:	e005      	b.n	80045fe <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	3301      	adds	r3, #1
 80045f6:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d018      	beq.n	800463a <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8004608:	68ba      	ldr	r2, [r7, #8]
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	4053      	eors	r3, r2
 800460e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d111      	bne.n	800463a <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d106      	bne.n	800462e <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	3301      	adds	r3, #1
 8004624:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	611a      	str	r2, [r3, #16]
 800462c:	e005      	b.n	800463a <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	3301      	adds	r3, #1
 8004632:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	3301      	adds	r3, #1
 800463e:	60fb      	str	r3, [r7, #12]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2b01      	cmp	r3, #1
 8004644:	d987      	bls.n	8004556 <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 8004646:	7dfb      	ldrb	r3, [r7, #23]
}
 8004648:	4618      	mov	r0, r3
 800464a:	371c      	adds	r7, #28
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr
 8004654:	5200b400 	.word	0x5200b400
 8004658:	04040222 	.word	0x04040222

0800465c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004664:	4b29      	ldr	r3, [pc, #164]	; (800470c <HAL_PWREx_ConfigSupply+0xb0>)
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	f003 0307 	and.w	r3, r3, #7
 800466c:	2b06      	cmp	r3, #6
 800466e:	d00a      	beq.n	8004686 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004670:	4b26      	ldr	r3, [pc, #152]	; (800470c <HAL_PWREx_ConfigSupply+0xb0>)
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	429a      	cmp	r2, r3
 800467c:	d001      	beq.n	8004682 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e040      	b.n	8004704 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004682:	2300      	movs	r3, #0
 8004684:	e03e      	b.n	8004704 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004686:	4b21      	ldr	r3, [pc, #132]	; (800470c <HAL_PWREx_ConfigSupply+0xb0>)
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800468e:	491f      	ldr	r1, [pc, #124]	; (800470c <HAL_PWREx_ConfigSupply+0xb0>)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4313      	orrs	r3, r2
 8004694:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004696:	f7fd f833 	bl	8001700 <HAL_GetTick>
 800469a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800469c:	e009      	b.n	80046b2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800469e:	f7fd f82f 	bl	8001700 <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046ac:	d901      	bls.n	80046b2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e028      	b.n	8004704 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80046b2:	4b16      	ldr	r3, [pc, #88]	; (800470c <HAL_PWREx_ConfigSupply+0xb0>)
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046be:	d1ee      	bne.n	800469e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2b1e      	cmp	r3, #30
 80046c4:	d008      	beq.n	80046d8 <HAL_PWREx_ConfigSupply+0x7c>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2b2e      	cmp	r3, #46	; 0x2e
 80046ca:	d005      	beq.n	80046d8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b1d      	cmp	r3, #29
 80046d0:	d002      	beq.n	80046d8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2b2d      	cmp	r3, #45	; 0x2d
 80046d6:	d114      	bne.n	8004702 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80046d8:	f7fd f812 	bl	8001700 <HAL_GetTick>
 80046dc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80046de:	e009      	b.n	80046f4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80046e0:	f7fd f80e 	bl	8001700 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046ee:	d901      	bls.n	80046f4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e007      	b.n	8004704 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80046f4:	4b05      	ldr	r3, [pc, #20]	; (800470c <HAL_PWREx_ConfigSupply+0xb0>)
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004700:	d1ee      	bne.n	80046e0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	3710      	adds	r7, #16
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	58024800 	.word	0x58024800

08004710 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b08c      	sub	sp, #48	; 0x30
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d101      	bne.n	8004722 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e3f4      	b.n	8004f0c <HAL_RCC_OscConfig+0x7fc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b00      	cmp	r3, #0
 800472c:	f000 80b3 	beq.w	8004896 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004730:	4b95      	ldr	r3, [pc, #596]	; (8004988 <HAL_RCC_OscConfig+0x278>)
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004738:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800473a:	4b93      	ldr	r3, [pc, #588]	; (8004988 <HAL_RCC_OscConfig+0x278>)
 800473c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004742:	2b10      	cmp	r3, #16
 8004744:	d007      	beq.n	8004756 <HAL_RCC_OscConfig+0x46>
 8004746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004748:	2b18      	cmp	r3, #24
 800474a:	d112      	bne.n	8004772 <HAL_RCC_OscConfig+0x62>
 800474c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474e:	f003 0303 	and.w	r3, r3, #3
 8004752:	2b02      	cmp	r3, #2
 8004754:	d10d      	bne.n	8004772 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004756:	4b8c      	ldr	r3, [pc, #560]	; (8004988 <HAL_RCC_OscConfig+0x278>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800475e:	2b00      	cmp	r3, #0
 8004760:	f000 8098 	beq.w	8004894 <HAL_RCC_OscConfig+0x184>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	2b00      	cmp	r3, #0
 800476a:	f040 8093 	bne.w	8004894 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e3cc      	b.n	8004f0c <HAL_RCC_OscConfig+0x7fc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800477a:	d106      	bne.n	800478a <HAL_RCC_OscConfig+0x7a>
 800477c:	4b82      	ldr	r3, [pc, #520]	; (8004988 <HAL_RCC_OscConfig+0x278>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a81      	ldr	r2, [pc, #516]	; (8004988 <HAL_RCC_OscConfig+0x278>)
 8004782:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004786:	6013      	str	r3, [r2, #0]
 8004788:	e058      	b.n	800483c <HAL_RCC_OscConfig+0x12c>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d112      	bne.n	80047b8 <HAL_RCC_OscConfig+0xa8>
 8004792:	4b7d      	ldr	r3, [pc, #500]	; (8004988 <HAL_RCC_OscConfig+0x278>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a7c      	ldr	r2, [pc, #496]	; (8004988 <HAL_RCC_OscConfig+0x278>)
 8004798:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800479c:	6013      	str	r3, [r2, #0]
 800479e:	4b7a      	ldr	r3, [pc, #488]	; (8004988 <HAL_RCC_OscConfig+0x278>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a79      	ldr	r2, [pc, #484]	; (8004988 <HAL_RCC_OscConfig+0x278>)
 80047a4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80047a8:	6013      	str	r3, [r2, #0]
 80047aa:	4b77      	ldr	r3, [pc, #476]	; (8004988 <HAL_RCC_OscConfig+0x278>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a76      	ldr	r2, [pc, #472]	; (8004988 <HAL_RCC_OscConfig+0x278>)
 80047b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047b4:	6013      	str	r3, [r2, #0]
 80047b6:	e041      	b.n	800483c <HAL_RCC_OscConfig+0x12c>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047c0:	d112      	bne.n	80047e8 <HAL_RCC_OscConfig+0xd8>
 80047c2:	4b71      	ldr	r3, [pc, #452]	; (8004988 <HAL_RCC_OscConfig+0x278>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a70      	ldr	r2, [pc, #448]	; (8004988 <HAL_RCC_OscConfig+0x278>)
 80047c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047cc:	6013      	str	r3, [r2, #0]
 80047ce:	4b6e      	ldr	r3, [pc, #440]	; (8004988 <HAL_RCC_OscConfig+0x278>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a6d      	ldr	r2, [pc, #436]	; (8004988 <HAL_RCC_OscConfig+0x278>)
 80047d4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80047d8:	6013      	str	r3, [r2, #0]
 80047da:	4b6b      	ldr	r3, [pc, #428]	; (8004988 <HAL_RCC_OscConfig+0x278>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a6a      	ldr	r2, [pc, #424]	; (8004988 <HAL_RCC_OscConfig+0x278>)
 80047e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047e4:	6013      	str	r3, [r2, #0]
 80047e6:	e029      	b.n	800483c <HAL_RCC_OscConfig+0x12c>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80047f0:	d112      	bne.n	8004818 <HAL_RCC_OscConfig+0x108>
 80047f2:	4b65      	ldr	r3, [pc, #404]	; (8004988 <HAL_RCC_OscConfig+0x278>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a64      	ldr	r2, [pc, #400]	; (8004988 <HAL_RCC_OscConfig+0x278>)
 80047f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047fc:	6013      	str	r3, [r2, #0]
 80047fe:	4b62      	ldr	r3, [pc, #392]	; (8004988 <HAL_RCC_OscConfig+0x278>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a61      	ldr	r2, [pc, #388]	; (8004988 <HAL_RCC_OscConfig+0x278>)
 8004804:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004808:	6013      	str	r3, [r2, #0]
 800480a:	4b5f      	ldr	r3, [pc, #380]	; (8004988 <HAL_RCC_OscConfig+0x278>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a5e      	ldr	r2, [pc, #376]	; (8004988 <HAL_RCC_OscConfig+0x278>)
 8004810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004814:	6013      	str	r3, [r2, #0]
 8004816:	e011      	b.n	800483c <HAL_RCC_OscConfig+0x12c>
 8004818:	4b5b      	ldr	r3, [pc, #364]	; (8004988 <HAL_RCC_OscConfig+0x278>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a5a      	ldr	r2, [pc, #360]	; (8004988 <HAL_RCC_OscConfig+0x278>)
 800481e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004822:	6013      	str	r3, [r2, #0]
 8004824:	4b58      	ldr	r3, [pc, #352]	; (8004988 <HAL_RCC_OscConfig+0x278>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a57      	ldr	r2, [pc, #348]	; (8004988 <HAL_RCC_OscConfig+0x278>)
 800482a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800482e:	6013      	str	r3, [r2, #0]
 8004830:	4b55      	ldr	r3, [pc, #340]	; (8004988 <HAL_RCC_OscConfig+0x278>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a54      	ldr	r2, [pc, #336]	; (8004988 <HAL_RCC_OscConfig+0x278>)
 8004836:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800483a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d013      	beq.n	800486c <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004844:	f7fc ff5c 	bl	8001700 <HAL_GetTick>
 8004848:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800484a:	e008      	b.n	800485e <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800484c:	f7fc ff58 	bl	8001700 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	2b64      	cmp	r3, #100	; 0x64
 8004858:	d901      	bls.n	800485e <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e356      	b.n	8004f0c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800485e:	4b4a      	ldr	r3, [pc, #296]	; (8004988 <HAL_RCC_OscConfig+0x278>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d0f0      	beq.n	800484c <HAL_RCC_OscConfig+0x13c>
 800486a:	e014      	b.n	8004896 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800486c:	f7fc ff48 	bl	8001700 <HAL_GetTick>
 8004870:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004872:	e008      	b.n	8004886 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004874:	f7fc ff44 	bl	8001700 <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	2b64      	cmp	r3, #100	; 0x64
 8004880:	d901      	bls.n	8004886 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e342      	b.n	8004f0c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004886:	4b40      	ldr	r3, [pc, #256]	; (8004988 <HAL_RCC_OscConfig+0x278>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1f0      	bne.n	8004874 <HAL_RCC_OscConfig+0x164>
 8004892:	e000      	b.n	8004896 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004894:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f000 808d 	beq.w	80049be <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048a4:	4b38      	ldr	r3, [pc, #224]	; (8004988 <HAL_RCC_OscConfig+0x278>)
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048ac:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80048ae:	4b36      	ldr	r3, [pc, #216]	; (8004988 <HAL_RCC_OscConfig+0x278>)
 80048b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80048b4:	6a3b      	ldr	r3, [r7, #32]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d007      	beq.n	80048ca <HAL_RCC_OscConfig+0x1ba>
 80048ba:	6a3b      	ldr	r3, [r7, #32]
 80048bc:	2b18      	cmp	r3, #24
 80048be:	d137      	bne.n	8004930 <HAL_RCC_OscConfig+0x220>
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	f003 0303 	and.w	r3, r3, #3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d132      	bne.n	8004930 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048ca:	4b2f      	ldr	r3, [pc, #188]	; (8004988 <HAL_RCC_OscConfig+0x278>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0304 	and.w	r3, r3, #4
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d005      	beq.n	80048e2 <HAL_RCC_OscConfig+0x1d2>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d101      	bne.n	80048e2 <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e314      	b.n	8004f0c <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80048e2:	4b29      	ldr	r3, [pc, #164]	; (8004988 <HAL_RCC_OscConfig+0x278>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f023 0219 	bic.w	r2, r3, #25
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	4926      	ldr	r1, [pc, #152]	; (8004988 <HAL_RCC_OscConfig+0x278>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80048f4:	f7fc ff04 	bl	8001700 <HAL_GetTick>
 80048f8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80048fa:	e008      	b.n	800490e <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048fc:	f7fc ff00 	bl	8001700 <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	2b02      	cmp	r3, #2
 8004908:	d901      	bls.n	800490e <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e2fe      	b.n	8004f0c <HAL_RCC_OscConfig+0x7fc>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800490e:	4b1e      	ldr	r3, [pc, #120]	; (8004988 <HAL_RCC_OscConfig+0x278>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0304 	and.w	r3, r3, #4
 8004916:	2b00      	cmp	r3, #0
 8004918:	d0f0      	beq.n	80048fc <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800491a:	4b1b      	ldr	r3, [pc, #108]	; (8004988 <HAL_RCC_OscConfig+0x278>)
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	061b      	lsls	r3, r3, #24
 8004928:	4917      	ldr	r1, [pc, #92]	; (8004988 <HAL_RCC_OscConfig+0x278>)
 800492a:	4313      	orrs	r3, r2
 800492c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800492e:	e046      	b.n	80049be <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d029      	beq.n	800498c <HAL_RCC_OscConfig+0x27c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004938:	4b13      	ldr	r3, [pc, #76]	; (8004988 <HAL_RCC_OscConfig+0x278>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f023 0219 	bic.w	r2, r3, #25
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	4910      	ldr	r1, [pc, #64]	; (8004988 <HAL_RCC_OscConfig+0x278>)
 8004946:	4313      	orrs	r3, r2
 8004948:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800494a:	f7fc fed9 	bl	8001700 <HAL_GetTick>
 800494e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004950:	e008      	b.n	8004964 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004952:	f7fc fed5 	bl	8001700 <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	2b02      	cmp	r3, #2
 800495e:	d901      	bls.n	8004964 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	e2d3      	b.n	8004f0c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004964:	4b08      	ldr	r3, [pc, #32]	; (8004988 <HAL_RCC_OscConfig+0x278>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0304 	and.w	r3, r3, #4
 800496c:	2b00      	cmp	r3, #0
 800496e:	d0f0      	beq.n	8004952 <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004970:	4b05      	ldr	r3, [pc, #20]	; (8004988 <HAL_RCC_OscConfig+0x278>)
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	061b      	lsls	r3, r3, #24
 800497e:	4902      	ldr	r1, [pc, #8]	; (8004988 <HAL_RCC_OscConfig+0x278>)
 8004980:	4313      	orrs	r3, r2
 8004982:	604b      	str	r3, [r1, #4]
 8004984:	e01b      	b.n	80049be <HAL_RCC_OscConfig+0x2ae>
 8004986:	bf00      	nop
 8004988:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800498c:	4b97      	ldr	r3, [pc, #604]	; (8004bec <HAL_RCC_OscConfig+0x4dc>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a96      	ldr	r2, [pc, #600]	; (8004bec <HAL_RCC_OscConfig+0x4dc>)
 8004992:	f023 0301 	bic.w	r3, r3, #1
 8004996:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004998:	f7fc feb2 	bl	8001700 <HAL_GetTick>
 800499c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800499e:	e008      	b.n	80049b2 <HAL_RCC_OscConfig+0x2a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049a0:	f7fc feae 	bl	8001700 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d901      	bls.n	80049b2 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e2ac      	b.n	8004f0c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80049b2:	4b8e      	ldr	r3, [pc, #568]	; (8004bec <HAL_RCC_OscConfig+0x4dc>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0304 	and.w	r3, r3, #4
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1f0      	bne.n	80049a0 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0310 	and.w	r3, r3, #16
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d06a      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049ca:	4b88      	ldr	r3, [pc, #544]	; (8004bec <HAL_RCC_OscConfig+0x4dc>)
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049d2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80049d4:	4b85      	ldr	r3, [pc, #532]	; (8004bec <HAL_RCC_OscConfig+0x4dc>)
 80049d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	2b08      	cmp	r3, #8
 80049de:	d007      	beq.n	80049f0 <HAL_RCC_OscConfig+0x2e0>
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	2b18      	cmp	r3, #24
 80049e4:	d11b      	bne.n	8004a1e <HAL_RCC_OscConfig+0x30e>
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	f003 0303 	and.w	r3, r3, #3
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d116      	bne.n	8004a1e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80049f0:	4b7e      	ldr	r3, [pc, #504]	; (8004bec <HAL_RCC_OscConfig+0x4dc>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d005      	beq.n	8004a08 <HAL_RCC_OscConfig+0x2f8>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	69db      	ldr	r3, [r3, #28]
 8004a00:	2b80      	cmp	r3, #128	; 0x80
 8004a02:	d001      	beq.n	8004a08 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e281      	b.n	8004f0c <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004a08:	4b78      	ldr	r3, [pc, #480]	; (8004bec <HAL_RCC_OscConfig+0x4dc>)
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a1b      	ldr	r3, [r3, #32]
 8004a14:	061b      	lsls	r3, r3, #24
 8004a16:	4975      	ldr	r1, [pc, #468]	; (8004bec <HAL_RCC_OscConfig+0x4dc>)
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004a1c:	e040      	b.n	8004aa0 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	69db      	ldr	r3, [r3, #28]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d023      	beq.n	8004a6e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004a26:	4b71      	ldr	r3, [pc, #452]	; (8004bec <HAL_RCC_OscConfig+0x4dc>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a70      	ldr	r2, [pc, #448]	; (8004bec <HAL_RCC_OscConfig+0x4dc>)
 8004a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a32:	f7fc fe65 	bl	8001700 <HAL_GetTick>
 8004a36:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004a38:	e008      	b.n	8004a4c <HAL_RCC_OscConfig+0x33c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004a3a:	f7fc fe61 	bl	8001700 <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d901      	bls.n	8004a4c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e25f      	b.n	8004f0c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004a4c:	4b67      	ldr	r3, [pc, #412]	; (8004bec <HAL_RCC_OscConfig+0x4dc>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d0f0      	beq.n	8004a3a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004a58:	4b64      	ldr	r3, [pc, #400]	; (8004bec <HAL_RCC_OscConfig+0x4dc>)
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a1b      	ldr	r3, [r3, #32]
 8004a64:	061b      	lsls	r3, r3, #24
 8004a66:	4961      	ldr	r1, [pc, #388]	; (8004bec <HAL_RCC_OscConfig+0x4dc>)
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	60cb      	str	r3, [r1, #12]
 8004a6c:	e018      	b.n	8004aa0 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004a6e:	4b5f      	ldr	r3, [pc, #380]	; (8004bec <HAL_RCC_OscConfig+0x4dc>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a5e      	ldr	r2, [pc, #376]	; (8004bec <HAL_RCC_OscConfig+0x4dc>)
 8004a74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a7a:	f7fc fe41 	bl	8001700 <HAL_GetTick>
 8004a7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004a80:	e008      	b.n	8004a94 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004a82:	f7fc fe3d 	bl	8001700 <HAL_GetTick>
 8004a86:	4602      	mov	r2, r0
 8004a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	d901      	bls.n	8004a94 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8004a90:	2303      	movs	r3, #3
 8004a92:	e23b      	b.n	8004f0c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004a94:	4b55      	ldr	r3, [pc, #340]	; (8004bec <HAL_RCC_OscConfig+0x4dc>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d1f0      	bne.n	8004a82 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0308 	and.w	r3, r3, #8
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d036      	beq.n	8004b1a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	695b      	ldr	r3, [r3, #20]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d019      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ab4:	4b4d      	ldr	r3, [pc, #308]	; (8004bec <HAL_RCC_OscConfig+0x4dc>)
 8004ab6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ab8:	4a4c      	ldr	r2, [pc, #304]	; (8004bec <HAL_RCC_OscConfig+0x4dc>)
 8004aba:	f043 0301 	orr.w	r3, r3, #1
 8004abe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ac0:	f7fc fe1e 	bl	8001700 <HAL_GetTick>
 8004ac4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004ac6:	e008      	b.n	8004ada <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ac8:	f7fc fe1a 	bl	8001700 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e218      	b.n	8004f0c <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004ada:	4b44      	ldr	r3, [pc, #272]	; (8004bec <HAL_RCC_OscConfig+0x4dc>)
 8004adc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ade:	f003 0302 	and.w	r3, r3, #2
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d0f0      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x3b8>
 8004ae6:	e018      	b.n	8004b1a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ae8:	4b40      	ldr	r3, [pc, #256]	; (8004bec <HAL_RCC_OscConfig+0x4dc>)
 8004aea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aec:	4a3f      	ldr	r2, [pc, #252]	; (8004bec <HAL_RCC_OscConfig+0x4dc>)
 8004aee:	f023 0301 	bic.w	r3, r3, #1
 8004af2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004af4:	f7fc fe04 	bl	8001700 <HAL_GetTick>
 8004af8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004afa:	e008      	b.n	8004b0e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004afc:	f7fc fe00 	bl	8001700 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d901      	bls.n	8004b0e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e1fe      	b.n	8004f0c <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004b0e:	4b37      	ldr	r3, [pc, #220]	; (8004bec <HAL_RCC_OscConfig+0x4dc>)
 8004b10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b12:	f003 0302 	and.w	r3, r3, #2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1f0      	bne.n	8004afc <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0320 	and.w	r3, r3, #32
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d036      	beq.n	8004b94 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d019      	beq.n	8004b62 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004b2e:	4b2f      	ldr	r3, [pc, #188]	; (8004bec <HAL_RCC_OscConfig+0x4dc>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a2e      	ldr	r2, [pc, #184]	; (8004bec <HAL_RCC_OscConfig+0x4dc>)
 8004b34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004b38:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004b3a:	f7fc fde1 	bl	8001700 <HAL_GetTick>
 8004b3e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004b40:	e008      	b.n	8004b54 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004b42:	f7fc fddd 	bl	8001700 <HAL_GetTick>
 8004b46:	4602      	mov	r2, r0
 8004b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d901      	bls.n	8004b54 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	e1db      	b.n	8004f0c <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004b54:	4b25      	ldr	r3, [pc, #148]	; (8004bec <HAL_RCC_OscConfig+0x4dc>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d0f0      	beq.n	8004b42 <HAL_RCC_OscConfig+0x432>
 8004b60:	e018      	b.n	8004b94 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004b62:	4b22      	ldr	r3, [pc, #136]	; (8004bec <HAL_RCC_OscConfig+0x4dc>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a21      	ldr	r2, [pc, #132]	; (8004bec <HAL_RCC_OscConfig+0x4dc>)
 8004b68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b6c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004b6e:	f7fc fdc7 	bl	8001700 <HAL_GetTick>
 8004b72:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004b74:	e008      	b.n	8004b88 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004b76:	f7fc fdc3 	bl	8001700 <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d901      	bls.n	8004b88 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e1c1      	b.n	8004f0c <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004b88:	4b18      	ldr	r3, [pc, #96]	; (8004bec <HAL_RCC_OscConfig+0x4dc>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d1f0      	bne.n	8004b76 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0304 	and.w	r3, r3, #4
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	f000 80af 	beq.w	8004d00 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004ba2:	4b13      	ldr	r3, [pc, #76]	; (8004bf0 <HAL_RCC_OscConfig+0x4e0>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a12      	ldr	r2, [pc, #72]	; (8004bf0 <HAL_RCC_OscConfig+0x4e0>)
 8004ba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004bae:	f7fc fda7 	bl	8001700 <HAL_GetTick>
 8004bb2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004bb4:	e008      	b.n	8004bc8 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004bb6:	f7fc fda3 	bl	8001700 <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	2b64      	cmp	r3, #100	; 0x64
 8004bc2:	d901      	bls.n	8004bc8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e1a1      	b.n	8004f0c <HAL_RCC_OscConfig+0x7fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004bc8:	4b09      	ldr	r3, [pc, #36]	; (8004bf0 <HAL_RCC_OscConfig+0x4e0>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d0f0      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d10b      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x4e4>
 8004bdc:	4b03      	ldr	r3, [pc, #12]	; (8004bec <HAL_RCC_OscConfig+0x4dc>)
 8004bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be0:	4a02      	ldr	r2, [pc, #8]	; (8004bec <HAL_RCC_OscConfig+0x4dc>)
 8004be2:	f043 0301 	orr.w	r3, r3, #1
 8004be6:	6713      	str	r3, [r2, #112]	; 0x70
 8004be8:	e05b      	b.n	8004ca2 <HAL_RCC_OscConfig+0x592>
 8004bea:	bf00      	nop
 8004bec:	58024400 	.word	0x58024400
 8004bf0:	58024800 	.word	0x58024800
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d112      	bne.n	8004c22 <HAL_RCC_OscConfig+0x512>
 8004bfc:	4b9d      	ldr	r3, [pc, #628]	; (8004e74 <HAL_RCC_OscConfig+0x764>)
 8004bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c00:	4a9c      	ldr	r2, [pc, #624]	; (8004e74 <HAL_RCC_OscConfig+0x764>)
 8004c02:	f023 0301 	bic.w	r3, r3, #1
 8004c06:	6713      	str	r3, [r2, #112]	; 0x70
 8004c08:	4b9a      	ldr	r3, [pc, #616]	; (8004e74 <HAL_RCC_OscConfig+0x764>)
 8004c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c0c:	4a99      	ldr	r2, [pc, #612]	; (8004e74 <HAL_RCC_OscConfig+0x764>)
 8004c0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c12:	6713      	str	r3, [r2, #112]	; 0x70
 8004c14:	4b97      	ldr	r3, [pc, #604]	; (8004e74 <HAL_RCC_OscConfig+0x764>)
 8004c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c18:	4a96      	ldr	r2, [pc, #600]	; (8004e74 <HAL_RCC_OscConfig+0x764>)
 8004c1a:	f023 0304 	bic.w	r3, r3, #4
 8004c1e:	6713      	str	r3, [r2, #112]	; 0x70
 8004c20:	e03f      	b.n	8004ca2 <HAL_RCC_OscConfig+0x592>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	2b05      	cmp	r3, #5
 8004c28:	d112      	bne.n	8004c50 <HAL_RCC_OscConfig+0x540>
 8004c2a:	4b92      	ldr	r3, [pc, #584]	; (8004e74 <HAL_RCC_OscConfig+0x764>)
 8004c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c2e:	4a91      	ldr	r2, [pc, #580]	; (8004e74 <HAL_RCC_OscConfig+0x764>)
 8004c30:	f043 0304 	orr.w	r3, r3, #4
 8004c34:	6713      	str	r3, [r2, #112]	; 0x70
 8004c36:	4b8f      	ldr	r3, [pc, #572]	; (8004e74 <HAL_RCC_OscConfig+0x764>)
 8004c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c3a:	4a8e      	ldr	r2, [pc, #568]	; (8004e74 <HAL_RCC_OscConfig+0x764>)
 8004c3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c40:	6713      	str	r3, [r2, #112]	; 0x70
 8004c42:	4b8c      	ldr	r3, [pc, #560]	; (8004e74 <HAL_RCC_OscConfig+0x764>)
 8004c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c46:	4a8b      	ldr	r2, [pc, #556]	; (8004e74 <HAL_RCC_OscConfig+0x764>)
 8004c48:	f043 0301 	orr.w	r3, r3, #1
 8004c4c:	6713      	str	r3, [r2, #112]	; 0x70
 8004c4e:	e028      	b.n	8004ca2 <HAL_RCC_OscConfig+0x592>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	2b85      	cmp	r3, #133	; 0x85
 8004c56:	d112      	bne.n	8004c7e <HAL_RCC_OscConfig+0x56e>
 8004c58:	4b86      	ldr	r3, [pc, #536]	; (8004e74 <HAL_RCC_OscConfig+0x764>)
 8004c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c5c:	4a85      	ldr	r2, [pc, #532]	; (8004e74 <HAL_RCC_OscConfig+0x764>)
 8004c5e:	f043 0304 	orr.w	r3, r3, #4
 8004c62:	6713      	str	r3, [r2, #112]	; 0x70
 8004c64:	4b83      	ldr	r3, [pc, #524]	; (8004e74 <HAL_RCC_OscConfig+0x764>)
 8004c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c68:	4a82      	ldr	r2, [pc, #520]	; (8004e74 <HAL_RCC_OscConfig+0x764>)
 8004c6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c6e:	6713      	str	r3, [r2, #112]	; 0x70
 8004c70:	4b80      	ldr	r3, [pc, #512]	; (8004e74 <HAL_RCC_OscConfig+0x764>)
 8004c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c74:	4a7f      	ldr	r2, [pc, #508]	; (8004e74 <HAL_RCC_OscConfig+0x764>)
 8004c76:	f043 0301 	orr.w	r3, r3, #1
 8004c7a:	6713      	str	r3, [r2, #112]	; 0x70
 8004c7c:	e011      	b.n	8004ca2 <HAL_RCC_OscConfig+0x592>
 8004c7e:	4b7d      	ldr	r3, [pc, #500]	; (8004e74 <HAL_RCC_OscConfig+0x764>)
 8004c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c82:	4a7c      	ldr	r2, [pc, #496]	; (8004e74 <HAL_RCC_OscConfig+0x764>)
 8004c84:	f023 0301 	bic.w	r3, r3, #1
 8004c88:	6713      	str	r3, [r2, #112]	; 0x70
 8004c8a:	4b7a      	ldr	r3, [pc, #488]	; (8004e74 <HAL_RCC_OscConfig+0x764>)
 8004c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c8e:	4a79      	ldr	r2, [pc, #484]	; (8004e74 <HAL_RCC_OscConfig+0x764>)
 8004c90:	f023 0304 	bic.w	r3, r3, #4
 8004c94:	6713      	str	r3, [r2, #112]	; 0x70
 8004c96:	4b77      	ldr	r3, [pc, #476]	; (8004e74 <HAL_RCC_OscConfig+0x764>)
 8004c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c9a:	4a76      	ldr	r2, [pc, #472]	; (8004e74 <HAL_RCC_OscConfig+0x764>)
 8004c9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ca0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d015      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004caa:	f7fc fd29 	bl	8001700 <HAL_GetTick>
 8004cae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004cb0:	e00a      	b.n	8004cc8 <HAL_RCC_OscConfig+0x5b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cb2:	f7fc fd25 	bl	8001700 <HAL_GetTick>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d901      	bls.n	8004cc8 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	e121      	b.n	8004f0c <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004cc8:	4b6a      	ldr	r3, [pc, #424]	; (8004e74 <HAL_RCC_OscConfig+0x764>)
 8004cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ccc:	f003 0302 	and.w	r3, r3, #2
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d0ee      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x5a2>
 8004cd4:	e014      	b.n	8004d00 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cd6:	f7fc fd13 	bl	8001700 <HAL_GetTick>
 8004cda:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004cdc:	e00a      	b.n	8004cf4 <HAL_RCC_OscConfig+0x5e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cde:	f7fc fd0f 	bl	8001700 <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d901      	bls.n	8004cf4 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e10b      	b.n	8004f0c <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004cf4:	4b5f      	ldr	r3, [pc, #380]	; (8004e74 <HAL_RCC_OscConfig+0x764>)
 8004cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cf8:	f003 0302 	and.w	r3, r3, #2
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d1ee      	bne.n	8004cde <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	f000 8100 	beq.w	8004f0a <HAL_RCC_OscConfig+0x7fa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004d0a:	4b5a      	ldr	r3, [pc, #360]	; (8004e74 <HAL_RCC_OscConfig+0x764>)
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d12:	2b18      	cmp	r3, #24
 8004d14:	f000 80bb 	beq.w	8004e8e <HAL_RCC_OscConfig+0x77e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	f040 8095 	bne.w	8004e4c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d22:	4b54      	ldr	r3, [pc, #336]	; (8004e74 <HAL_RCC_OscConfig+0x764>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a53      	ldr	r2, [pc, #332]	; (8004e74 <HAL_RCC_OscConfig+0x764>)
 8004d28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d2e:	f7fc fce7 	bl	8001700 <HAL_GetTick>
 8004d32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d34:	e008      	b.n	8004d48 <HAL_RCC_OscConfig+0x638>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d36:	f7fc fce3 	bl	8001700 <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d901      	bls.n	8004d48 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e0e1      	b.n	8004f0c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d48:	4b4a      	ldr	r3, [pc, #296]	; (8004e74 <HAL_RCC_OscConfig+0x764>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1f0      	bne.n	8004d36 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d54:	4b47      	ldr	r3, [pc, #284]	; (8004e74 <HAL_RCC_OscConfig+0x764>)
 8004d56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d58:	4b47      	ldr	r3, [pc, #284]	; (8004e78 <HAL_RCC_OscConfig+0x768>)
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004d64:	0112      	lsls	r2, r2, #4
 8004d66:	430a      	orrs	r2, r1
 8004d68:	4942      	ldr	r1, [pc, #264]	; (8004e74 <HAL_RCC_OscConfig+0x764>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	628b      	str	r3, [r1, #40]	; 0x28
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d72:	3b01      	subs	r3, #1
 8004d74:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	025b      	lsls	r3, r3, #9
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	431a      	orrs	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	041b      	lsls	r3, r3, #16
 8004d8c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004d90:	431a      	orrs	r2, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d96:	3b01      	subs	r3, #1
 8004d98:	061b      	lsls	r3, r3, #24
 8004d9a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004d9e:	4935      	ldr	r1, [pc, #212]	; (8004e74 <HAL_RCC_OscConfig+0x764>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004da4:	4b33      	ldr	r3, [pc, #204]	; (8004e74 <HAL_RCC_OscConfig+0x764>)
 8004da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da8:	4a32      	ldr	r2, [pc, #200]	; (8004e74 <HAL_RCC_OscConfig+0x764>)
 8004daa:	f023 0301 	bic.w	r3, r3, #1
 8004dae:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004db0:	4b30      	ldr	r3, [pc, #192]	; (8004e74 <HAL_RCC_OscConfig+0x764>)
 8004db2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004db4:	4b31      	ldr	r3, [pc, #196]	; (8004e7c <HAL_RCC_OscConfig+0x76c>)
 8004db6:	4013      	ands	r3, r2
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004dbc:	00d2      	lsls	r2, r2, #3
 8004dbe:	492d      	ldr	r1, [pc, #180]	; (8004e74 <HAL_RCC_OscConfig+0x764>)
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004dc4:	4b2b      	ldr	r3, [pc, #172]	; (8004e74 <HAL_RCC_OscConfig+0x764>)
 8004dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc8:	f023 020c 	bic.w	r2, r3, #12
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd0:	4928      	ldr	r1, [pc, #160]	; (8004e74 <HAL_RCC_OscConfig+0x764>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004dd6:	4b27      	ldr	r3, [pc, #156]	; (8004e74 <HAL_RCC_OscConfig+0x764>)
 8004dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dda:	f023 0202 	bic.w	r2, r3, #2
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de2:	4924      	ldr	r1, [pc, #144]	; (8004e74 <HAL_RCC_OscConfig+0x764>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004de8:	4b22      	ldr	r3, [pc, #136]	; (8004e74 <HAL_RCC_OscConfig+0x764>)
 8004dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dec:	4a21      	ldr	r2, [pc, #132]	; (8004e74 <HAL_RCC_OscConfig+0x764>)
 8004dee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004df2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004df4:	4b1f      	ldr	r3, [pc, #124]	; (8004e74 <HAL_RCC_OscConfig+0x764>)
 8004df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df8:	4a1e      	ldr	r2, [pc, #120]	; (8004e74 <HAL_RCC_OscConfig+0x764>)
 8004dfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dfe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004e00:	4b1c      	ldr	r3, [pc, #112]	; (8004e74 <HAL_RCC_OscConfig+0x764>)
 8004e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e04:	4a1b      	ldr	r2, [pc, #108]	; (8004e74 <HAL_RCC_OscConfig+0x764>)
 8004e06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004e0c:	4b19      	ldr	r3, [pc, #100]	; (8004e74 <HAL_RCC_OscConfig+0x764>)
 8004e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e10:	4a18      	ldr	r2, [pc, #96]	; (8004e74 <HAL_RCC_OscConfig+0x764>)
 8004e12:	f043 0301 	orr.w	r3, r3, #1
 8004e16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e18:	4b16      	ldr	r3, [pc, #88]	; (8004e74 <HAL_RCC_OscConfig+0x764>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a15      	ldr	r2, [pc, #84]	; (8004e74 <HAL_RCC_OscConfig+0x764>)
 8004e1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e24:	f7fc fc6c 	bl	8001700 <HAL_GetTick>
 8004e28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e2a:	e008      	b.n	8004e3e <HAL_RCC_OscConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e2c:	f7fc fc68 	bl	8001700 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d901      	bls.n	8004e3e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e066      	b.n	8004f0c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e3e:	4b0d      	ldr	r3, [pc, #52]	; (8004e74 <HAL_RCC_OscConfig+0x764>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d0f0      	beq.n	8004e2c <HAL_RCC_OscConfig+0x71c>
 8004e4a:	e05e      	b.n	8004f0a <HAL_RCC_OscConfig+0x7fa>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e4c:	4b09      	ldr	r3, [pc, #36]	; (8004e74 <HAL_RCC_OscConfig+0x764>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a08      	ldr	r2, [pc, #32]	; (8004e74 <HAL_RCC_OscConfig+0x764>)
 8004e52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e58:	f7fc fc52 	bl	8001700 <HAL_GetTick>
 8004e5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e5e:	e00f      	b.n	8004e80 <HAL_RCC_OscConfig+0x770>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e60:	f7fc fc4e 	bl	8001700 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d908      	bls.n	8004e80 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e04c      	b.n	8004f0c <HAL_RCC_OscConfig+0x7fc>
 8004e72:	bf00      	nop
 8004e74:	58024400 	.word	0x58024400
 8004e78:	fffffc0c 	.word	0xfffffc0c
 8004e7c:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e80:	4b24      	ldr	r3, [pc, #144]	; (8004f14 <HAL_RCC_OscConfig+0x804>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1e9      	bne.n	8004e60 <HAL_RCC_OscConfig+0x750>
 8004e8c:	e03d      	b.n	8004f0a <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004e8e:	4b21      	ldr	r3, [pc, #132]	; (8004f14 <HAL_RCC_OscConfig+0x804>)
 8004e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e92:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004e94:	4b1f      	ldr	r3, [pc, #124]	; (8004f14 <HAL_RCC_OscConfig+0x804>)
 8004e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e98:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d031      	beq.n	8004f06 <HAL_RCC_OscConfig+0x7f6>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	f003 0203 	and.w	r2, r3, #3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d12a      	bne.n	8004f06 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	091b      	lsrs	r3, r3, #4
 8004eb4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d122      	bne.n	8004f06 <HAL_RCC_OscConfig+0x7f6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eca:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d11a      	bne.n	8004f06 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	0a5b      	lsrs	r3, r3, #9
 8004ed4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004edc:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d111      	bne.n	8004f06 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	0c1b      	lsrs	r3, r3, #16
 8004ee6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eee:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d108      	bne.n	8004f06 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	0e1b      	lsrs	r3, r3, #24
 8004ef8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f00:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d001      	beq.n	8004f0a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e000      	b.n	8004f0c <HAL_RCC_OscConfig+0x7fc>
      }
    }
  }
  return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3730      	adds	r7, #48	; 0x30
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	58024400 	.word	0x58024400

08004f18 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b086      	sub	sp, #24
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d101      	bne.n	8004f2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e19c      	b.n	8005266 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f2c:	4b8a      	ldr	r3, [pc, #552]	; (8005158 <HAL_RCC_ClockConfig+0x240>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 030f 	and.w	r3, r3, #15
 8004f34:	683a      	ldr	r2, [r7, #0]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d910      	bls.n	8004f5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f3a:	4b87      	ldr	r3, [pc, #540]	; (8005158 <HAL_RCC_ClockConfig+0x240>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f023 020f 	bic.w	r2, r3, #15
 8004f42:	4985      	ldr	r1, [pc, #532]	; (8005158 <HAL_RCC_ClockConfig+0x240>)
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f4a:	4b83      	ldr	r3, [pc, #524]	; (8005158 <HAL_RCC_ClockConfig+0x240>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 030f 	and.w	r3, r3, #15
 8004f52:	683a      	ldr	r2, [r7, #0]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d001      	beq.n	8004f5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e184      	b.n	8005266 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0304 	and.w	r3, r3, #4
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d010      	beq.n	8004f8a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	691a      	ldr	r2, [r3, #16]
 8004f6c:	4b7b      	ldr	r3, [pc, #492]	; (800515c <HAL_RCC_ClockConfig+0x244>)
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d908      	bls.n	8004f8a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004f78:	4b78      	ldr	r3, [pc, #480]	; (800515c <HAL_RCC_ClockConfig+0x244>)
 8004f7a:	699b      	ldr	r3, [r3, #24]
 8004f7c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	4975      	ldr	r1, [pc, #468]	; (800515c <HAL_RCC_ClockConfig+0x244>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0308 	and.w	r3, r3, #8
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d010      	beq.n	8004fb8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	695a      	ldr	r2, [r3, #20]
 8004f9a:	4b70      	ldr	r3, [pc, #448]	; (800515c <HAL_RCC_ClockConfig+0x244>)
 8004f9c:	69db      	ldr	r3, [r3, #28]
 8004f9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d908      	bls.n	8004fb8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004fa6:	4b6d      	ldr	r3, [pc, #436]	; (800515c <HAL_RCC_ClockConfig+0x244>)
 8004fa8:	69db      	ldr	r3, [r3, #28]
 8004faa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	496a      	ldr	r1, [pc, #424]	; (800515c <HAL_RCC_ClockConfig+0x244>)
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0310 	and.w	r3, r3, #16
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d010      	beq.n	8004fe6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	699a      	ldr	r2, [r3, #24]
 8004fc8:	4b64      	ldr	r3, [pc, #400]	; (800515c <HAL_RCC_ClockConfig+0x244>)
 8004fca:	69db      	ldr	r3, [r3, #28]
 8004fcc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d908      	bls.n	8004fe6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004fd4:	4b61      	ldr	r3, [pc, #388]	; (800515c <HAL_RCC_ClockConfig+0x244>)
 8004fd6:	69db      	ldr	r3, [r3, #28]
 8004fd8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	699b      	ldr	r3, [r3, #24]
 8004fe0:	495e      	ldr	r1, [pc, #376]	; (800515c <HAL_RCC_ClockConfig+0x244>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0320 	and.w	r3, r3, #32
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d010      	beq.n	8005014 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	69da      	ldr	r2, [r3, #28]
 8004ff6:	4b59      	ldr	r3, [pc, #356]	; (800515c <HAL_RCC_ClockConfig+0x244>)
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d908      	bls.n	8005014 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005002:	4b56      	ldr	r3, [pc, #344]	; (800515c <HAL_RCC_ClockConfig+0x244>)
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	69db      	ldr	r3, [r3, #28]
 800500e:	4953      	ldr	r1, [pc, #332]	; (800515c <HAL_RCC_ClockConfig+0x244>)
 8005010:	4313      	orrs	r3, r2
 8005012:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0302 	and.w	r3, r3, #2
 800501c:	2b00      	cmp	r3, #0
 800501e:	d010      	beq.n	8005042 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	68da      	ldr	r2, [r3, #12]
 8005024:	4b4d      	ldr	r3, [pc, #308]	; (800515c <HAL_RCC_ClockConfig+0x244>)
 8005026:	699b      	ldr	r3, [r3, #24]
 8005028:	f003 030f 	and.w	r3, r3, #15
 800502c:	429a      	cmp	r2, r3
 800502e:	d908      	bls.n	8005042 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005030:	4b4a      	ldr	r3, [pc, #296]	; (800515c <HAL_RCC_ClockConfig+0x244>)
 8005032:	699b      	ldr	r3, [r3, #24]
 8005034:	f023 020f 	bic.w	r2, r3, #15
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	4947      	ldr	r1, [pc, #284]	; (800515c <HAL_RCC_ClockConfig+0x244>)
 800503e:	4313      	orrs	r3, r2
 8005040:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0301 	and.w	r3, r3, #1
 800504a:	2b00      	cmp	r3, #0
 800504c:	d055      	beq.n	80050fa <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800504e:	4b43      	ldr	r3, [pc, #268]	; (800515c <HAL_RCC_ClockConfig+0x244>)
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	4940      	ldr	r1, [pc, #256]	; (800515c <HAL_RCC_ClockConfig+0x244>)
 800505c:	4313      	orrs	r3, r2
 800505e:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	2b02      	cmp	r3, #2
 8005066:	d107      	bne.n	8005078 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005068:	4b3c      	ldr	r3, [pc, #240]	; (800515c <HAL_RCC_ClockConfig+0x244>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005070:	2b00      	cmp	r3, #0
 8005072:	d121      	bne.n	80050b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e0f6      	b.n	8005266 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	2b03      	cmp	r3, #3
 800507e:	d107      	bne.n	8005090 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005080:	4b36      	ldr	r3, [pc, #216]	; (800515c <HAL_RCC_ClockConfig+0x244>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d115      	bne.n	80050b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e0ea      	b.n	8005266 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	2b01      	cmp	r3, #1
 8005096:	d107      	bne.n	80050a8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005098:	4b30      	ldr	r3, [pc, #192]	; (800515c <HAL_RCC_ClockConfig+0x244>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d109      	bne.n	80050b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e0de      	b.n	8005266 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80050a8:	4b2c      	ldr	r3, [pc, #176]	; (800515c <HAL_RCC_ClockConfig+0x244>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0304 	and.w	r3, r3, #4
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d101      	bne.n	80050b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e0d6      	b.n	8005266 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80050b8:	4b28      	ldr	r3, [pc, #160]	; (800515c <HAL_RCC_ClockConfig+0x244>)
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	f023 0207 	bic.w	r2, r3, #7
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	4925      	ldr	r1, [pc, #148]	; (800515c <HAL_RCC_ClockConfig+0x244>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050ca:	f7fc fb19 	bl	8001700 <HAL_GetTick>
 80050ce:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050d0:	e00a      	b.n	80050e8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050d2:	f7fc fb15 	bl	8001700 <HAL_GetTick>
 80050d6:	4602      	mov	r2, r0
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d901      	bls.n	80050e8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e0be      	b.n	8005266 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050e8:	4b1c      	ldr	r3, [pc, #112]	; (800515c <HAL_RCC_ClockConfig+0x244>)
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	00db      	lsls	r3, r3, #3
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d1eb      	bne.n	80050d2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0302 	and.w	r3, r3, #2
 8005102:	2b00      	cmp	r3, #0
 8005104:	d010      	beq.n	8005128 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	68da      	ldr	r2, [r3, #12]
 800510a:	4b14      	ldr	r3, [pc, #80]	; (800515c <HAL_RCC_ClockConfig+0x244>)
 800510c:	699b      	ldr	r3, [r3, #24]
 800510e:	f003 030f 	and.w	r3, r3, #15
 8005112:	429a      	cmp	r2, r3
 8005114:	d208      	bcs.n	8005128 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005116:	4b11      	ldr	r3, [pc, #68]	; (800515c <HAL_RCC_ClockConfig+0x244>)
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	f023 020f 	bic.w	r2, r3, #15
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	490e      	ldr	r1, [pc, #56]	; (800515c <HAL_RCC_ClockConfig+0x244>)
 8005124:	4313      	orrs	r3, r2
 8005126:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005128:	4b0b      	ldr	r3, [pc, #44]	; (8005158 <HAL_RCC_ClockConfig+0x240>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 030f 	and.w	r3, r3, #15
 8005130:	683a      	ldr	r2, [r7, #0]
 8005132:	429a      	cmp	r2, r3
 8005134:	d214      	bcs.n	8005160 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005136:	4b08      	ldr	r3, [pc, #32]	; (8005158 <HAL_RCC_ClockConfig+0x240>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f023 020f 	bic.w	r2, r3, #15
 800513e:	4906      	ldr	r1, [pc, #24]	; (8005158 <HAL_RCC_ClockConfig+0x240>)
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	4313      	orrs	r3, r2
 8005144:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005146:	4b04      	ldr	r3, [pc, #16]	; (8005158 <HAL_RCC_ClockConfig+0x240>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 030f 	and.w	r3, r3, #15
 800514e:	683a      	ldr	r2, [r7, #0]
 8005150:	429a      	cmp	r2, r3
 8005152:	d005      	beq.n	8005160 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e086      	b.n	8005266 <HAL_RCC_ClockConfig+0x34e>
 8005158:	52002000 	.word	0x52002000
 800515c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0304 	and.w	r3, r3, #4
 8005168:	2b00      	cmp	r3, #0
 800516a:	d010      	beq.n	800518e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	691a      	ldr	r2, [r3, #16]
 8005170:	4b3f      	ldr	r3, [pc, #252]	; (8005270 <HAL_RCC_ClockConfig+0x358>)
 8005172:	699b      	ldr	r3, [r3, #24]
 8005174:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005178:	429a      	cmp	r2, r3
 800517a:	d208      	bcs.n	800518e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800517c:	4b3c      	ldr	r3, [pc, #240]	; (8005270 <HAL_RCC_ClockConfig+0x358>)
 800517e:	699b      	ldr	r3, [r3, #24]
 8005180:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	4939      	ldr	r1, [pc, #228]	; (8005270 <HAL_RCC_ClockConfig+0x358>)
 800518a:	4313      	orrs	r3, r2
 800518c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0308 	and.w	r3, r3, #8
 8005196:	2b00      	cmp	r3, #0
 8005198:	d010      	beq.n	80051bc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	695a      	ldr	r2, [r3, #20]
 800519e:	4b34      	ldr	r3, [pc, #208]	; (8005270 <HAL_RCC_ClockConfig+0x358>)
 80051a0:	69db      	ldr	r3, [r3, #28]
 80051a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d208      	bcs.n	80051bc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80051aa:	4b31      	ldr	r3, [pc, #196]	; (8005270 <HAL_RCC_ClockConfig+0x358>)
 80051ac:	69db      	ldr	r3, [r3, #28]
 80051ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	492e      	ldr	r1, [pc, #184]	; (8005270 <HAL_RCC_ClockConfig+0x358>)
 80051b8:	4313      	orrs	r3, r2
 80051ba:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0310 	and.w	r3, r3, #16
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d010      	beq.n	80051ea <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	699a      	ldr	r2, [r3, #24]
 80051cc:	4b28      	ldr	r3, [pc, #160]	; (8005270 <HAL_RCC_ClockConfig+0x358>)
 80051ce:	69db      	ldr	r3, [r3, #28]
 80051d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d208      	bcs.n	80051ea <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80051d8:	4b25      	ldr	r3, [pc, #148]	; (8005270 <HAL_RCC_ClockConfig+0x358>)
 80051da:	69db      	ldr	r3, [r3, #28]
 80051dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	699b      	ldr	r3, [r3, #24]
 80051e4:	4922      	ldr	r1, [pc, #136]	; (8005270 <HAL_RCC_ClockConfig+0x358>)
 80051e6:	4313      	orrs	r3, r2
 80051e8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0320 	and.w	r3, r3, #32
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d010      	beq.n	8005218 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	69da      	ldr	r2, [r3, #28]
 80051fa:	4b1d      	ldr	r3, [pc, #116]	; (8005270 <HAL_RCC_ClockConfig+0x358>)
 80051fc:	6a1b      	ldr	r3, [r3, #32]
 80051fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005202:	429a      	cmp	r2, r3
 8005204:	d208      	bcs.n	8005218 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005206:	4b1a      	ldr	r3, [pc, #104]	; (8005270 <HAL_RCC_ClockConfig+0x358>)
 8005208:	6a1b      	ldr	r3, [r3, #32]
 800520a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	69db      	ldr	r3, [r3, #28]
 8005212:	4917      	ldr	r1, [pc, #92]	; (8005270 <HAL_RCC_ClockConfig+0x358>)
 8005214:	4313      	orrs	r3, r2
 8005216:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8005218:	f000 f89e 	bl	8005358 <HAL_RCC_GetSysClockFreq>
 800521c:	4602      	mov	r2, r0
 800521e:	4b14      	ldr	r3, [pc, #80]	; (8005270 <HAL_RCC_ClockConfig+0x358>)
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	0a1b      	lsrs	r3, r3, #8
 8005224:	f003 030f 	and.w	r3, r3, #15
 8005228:	4912      	ldr	r1, [pc, #72]	; (8005274 <HAL_RCC_ClockConfig+0x35c>)
 800522a:	5ccb      	ldrb	r3, [r1, r3]
 800522c:	f003 031f 	and.w	r3, r3, #31
 8005230:	fa22 f303 	lsr.w	r3, r2, r3
 8005234:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005236:	4b0e      	ldr	r3, [pc, #56]	; (8005270 <HAL_RCC_ClockConfig+0x358>)
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	f003 030f 	and.w	r3, r3, #15
 800523e:	4a0d      	ldr	r2, [pc, #52]	; (8005274 <HAL_RCC_ClockConfig+0x35c>)
 8005240:	5cd3      	ldrb	r3, [r2, r3]
 8005242:	f003 031f 	and.w	r3, r3, #31
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	fa22 f303 	lsr.w	r3, r2, r3
 800524c:	4a0a      	ldr	r2, [pc, #40]	; (8005278 <HAL_RCC_ClockConfig+0x360>)
 800524e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005250:	4a0a      	ldr	r2, [pc, #40]	; (800527c <HAL_RCC_ClockConfig+0x364>)
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005256:	4b0a      	ldr	r3, [pc, #40]	; (8005280 <HAL_RCC_ClockConfig+0x368>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4618      	mov	r0, r3
 800525c:	f7fc f8b2 	bl	80013c4 <HAL_InitTick>
 8005260:	4603      	mov	r3, r0
 8005262:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005264:	7bfb      	ldrb	r3, [r7, #15]
}
 8005266:	4618      	mov	r0, r3
 8005268:	3718      	adds	r7, #24
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	58024400 	.word	0x58024400
 8005274:	080070f4 	.word	0x080070f4
 8005278:	24000004 	.word	0x24000004
 800527c:	24000000 	.word	0x24000000
 8005280:	24000008 	.word	0x24000008

08005284 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b08c      	sub	sp, #48	; 0x30
 8005288:	af00      	add	r7, sp, #0
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d12a      	bne.n	80052ec <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8005296:	4b2d      	ldr	r3, [pc, #180]	; (800534c <HAL_RCC_MCOConfig+0xc8>)
 8005298:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800529c:	4a2b      	ldr	r2, [pc, #172]	; (800534c <HAL_RCC_MCOConfig+0xc8>)
 800529e:	f043 0301 	orr.w	r3, r3, #1
 80052a2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80052a6:	4b29      	ldr	r3, [pc, #164]	; (800534c <HAL_RCC_MCOConfig+0xc8>)
 80052a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80052ac:	f003 0301 	and.w	r3, r3, #1
 80052b0:	61bb      	str	r3, [r7, #24]
 80052b2:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80052b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052ba:	2302      	movs	r3, #2
 80052bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052be:	2303      	movs	r3, #3
 80052c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052c2:	2300      	movs	r3, #0
 80052c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80052c6:	2300      	movs	r3, #0
 80052c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80052ca:	f107 031c 	add.w	r3, r7, #28
 80052ce:	4619      	mov	r1, r3
 80052d0:	481f      	ldr	r0, [pc, #124]	; (8005350 <HAL_RCC_MCOConfig+0xcc>)
 80052d2:	f7fd fd69 	bl	8002da8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80052d6:	4b1d      	ldr	r3, [pc, #116]	; (800534c <HAL_RCC_MCOConfig+0xc8>)
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 80052de:	68b9      	ldr	r1, [r7, #8]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	430b      	orrs	r3, r1
 80052e4:	4919      	ldr	r1, [pc, #100]	; (800534c <HAL_RCC_MCOConfig+0xc8>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 80052ea:	e02a      	b.n	8005342 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 80052ec:	4b17      	ldr	r3, [pc, #92]	; (800534c <HAL_RCC_MCOConfig+0xc8>)
 80052ee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80052f2:	4a16      	ldr	r2, [pc, #88]	; (800534c <HAL_RCC_MCOConfig+0xc8>)
 80052f4:	f043 0304 	orr.w	r3, r3, #4
 80052f8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80052fc:	4b13      	ldr	r3, [pc, #76]	; (800534c <HAL_RCC_MCOConfig+0xc8>)
 80052fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005302:	f003 0304 	and.w	r3, r3, #4
 8005306:	617b      	str	r3, [r7, #20]
 8005308:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800530a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800530e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005310:	2302      	movs	r3, #2
 8005312:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005314:	2303      	movs	r3, #3
 8005316:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005318:	2300      	movs	r3, #0
 800531a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800531c:	2300      	movs	r3, #0
 800531e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8005320:	f107 031c 	add.w	r3, r7, #28
 8005324:	4619      	mov	r1, r3
 8005326:	480b      	ldr	r0, [pc, #44]	; (8005354 <HAL_RCC_MCOConfig+0xd0>)
 8005328:	f7fd fd3e 	bl	8002da8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800532c:	4b07      	ldr	r3, [pc, #28]	; (800534c <HAL_RCC_MCOConfig+0xc8>)
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	01d9      	lsls	r1, r3, #7
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	430b      	orrs	r3, r1
 800533c:	4903      	ldr	r1, [pc, #12]	; (800534c <HAL_RCC_MCOConfig+0xc8>)
 800533e:	4313      	orrs	r3, r2
 8005340:	610b      	str	r3, [r1, #16]
}
 8005342:	bf00      	nop
 8005344:	3730      	adds	r7, #48	; 0x30
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	58024400 	.word	0x58024400
 8005350:	58020000 	.word	0x58020000
 8005354:	58020800 	.word	0x58020800

08005358 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005358:	b480      	push	{r7}
 800535a:	b089      	sub	sp, #36	; 0x24
 800535c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800535e:	4bb3      	ldr	r3, [pc, #716]	; (800562c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005366:	2b18      	cmp	r3, #24
 8005368:	f200 8155 	bhi.w	8005616 <HAL_RCC_GetSysClockFreq+0x2be>
 800536c:	a201      	add	r2, pc, #4	; (adr r2, 8005374 <HAL_RCC_GetSysClockFreq+0x1c>)
 800536e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005372:	bf00      	nop
 8005374:	080053d9 	.word	0x080053d9
 8005378:	08005617 	.word	0x08005617
 800537c:	08005617 	.word	0x08005617
 8005380:	08005617 	.word	0x08005617
 8005384:	08005617 	.word	0x08005617
 8005388:	08005617 	.word	0x08005617
 800538c:	08005617 	.word	0x08005617
 8005390:	08005617 	.word	0x08005617
 8005394:	080053ff 	.word	0x080053ff
 8005398:	08005617 	.word	0x08005617
 800539c:	08005617 	.word	0x08005617
 80053a0:	08005617 	.word	0x08005617
 80053a4:	08005617 	.word	0x08005617
 80053a8:	08005617 	.word	0x08005617
 80053ac:	08005617 	.word	0x08005617
 80053b0:	08005617 	.word	0x08005617
 80053b4:	08005405 	.word	0x08005405
 80053b8:	08005617 	.word	0x08005617
 80053bc:	08005617 	.word	0x08005617
 80053c0:	08005617 	.word	0x08005617
 80053c4:	08005617 	.word	0x08005617
 80053c8:	08005617 	.word	0x08005617
 80053cc:	08005617 	.word	0x08005617
 80053d0:	08005617 	.word	0x08005617
 80053d4:	0800540b 	.word	0x0800540b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053d8:	4b94      	ldr	r3, [pc, #592]	; (800562c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0320 	and.w	r3, r3, #32
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d009      	beq.n	80053f8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80053e4:	4b91      	ldr	r3, [pc, #580]	; (800562c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	08db      	lsrs	r3, r3, #3
 80053ea:	f003 0303 	and.w	r3, r3, #3
 80053ee:	4a90      	ldr	r2, [pc, #576]	; (8005630 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80053f0:	fa22 f303 	lsr.w	r3, r2, r3
 80053f4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80053f6:	e111      	b.n	800561c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80053f8:	4b8d      	ldr	r3, [pc, #564]	; (8005630 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80053fa:	61bb      	str	r3, [r7, #24]
    break;
 80053fc:	e10e      	b.n	800561c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80053fe:	4b8d      	ldr	r3, [pc, #564]	; (8005634 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005400:	61bb      	str	r3, [r7, #24]
    break;
 8005402:	e10b      	b.n	800561c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005404:	4b8c      	ldr	r3, [pc, #560]	; (8005638 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005406:	61bb      	str	r3, [r7, #24]
    break;
 8005408:	e108      	b.n	800561c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800540a:	4b88      	ldr	r3, [pc, #544]	; (800562c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800540c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800540e:	f003 0303 	and.w	r3, r3, #3
 8005412:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005414:	4b85      	ldr	r3, [pc, #532]	; (800562c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005418:	091b      	lsrs	r3, r3, #4
 800541a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800541e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005420:	4b82      	ldr	r3, [pc, #520]	; (800562c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005424:	f003 0301 	and.w	r3, r3, #1
 8005428:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800542a:	4b80      	ldr	r3, [pc, #512]	; (800562c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800542c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800542e:	08db      	lsrs	r3, r3, #3
 8005430:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	fb02 f303 	mul.w	r3, r2, r3
 800543a:	ee07 3a90 	vmov	s15, r3
 800543e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005442:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	2b00      	cmp	r3, #0
 800544a:	f000 80e1 	beq.w	8005610 <HAL_RCC_GetSysClockFreq+0x2b8>
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	2b02      	cmp	r3, #2
 8005452:	f000 8083 	beq.w	800555c <HAL_RCC_GetSysClockFreq+0x204>
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	2b02      	cmp	r3, #2
 800545a:	f200 80a1 	bhi.w	80055a0 <HAL_RCC_GetSysClockFreq+0x248>
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d003      	beq.n	800546c <HAL_RCC_GetSysClockFreq+0x114>
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	2b01      	cmp	r3, #1
 8005468:	d056      	beq.n	8005518 <HAL_RCC_GetSysClockFreq+0x1c0>
 800546a:	e099      	b.n	80055a0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800546c:	4b6f      	ldr	r3, [pc, #444]	; (800562c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0320 	and.w	r3, r3, #32
 8005474:	2b00      	cmp	r3, #0
 8005476:	d02d      	beq.n	80054d4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005478:	4b6c      	ldr	r3, [pc, #432]	; (800562c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	08db      	lsrs	r3, r3, #3
 800547e:	f003 0303 	and.w	r3, r3, #3
 8005482:	4a6b      	ldr	r2, [pc, #428]	; (8005630 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005484:	fa22 f303 	lsr.w	r3, r2, r3
 8005488:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	ee07 3a90 	vmov	s15, r3
 8005490:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	ee07 3a90 	vmov	s15, r3
 800549a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800549e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054a2:	4b62      	ldr	r3, [pc, #392]	; (800562c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054aa:	ee07 3a90 	vmov	s15, r3
 80054ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80054b6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800563c <HAL_RCC_GetSysClockFreq+0x2e4>
 80054ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054ce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80054d2:	e087      	b.n	80055e4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	ee07 3a90 	vmov	s15, r3
 80054da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054de:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005640 <HAL_RCC_GetSysClockFreq+0x2e8>
 80054e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054e6:	4b51      	ldr	r3, [pc, #324]	; (800562c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054ee:	ee07 3a90 	vmov	s15, r3
 80054f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80054fa:	eddf 5a50 	vldr	s11, [pc, #320]	; 800563c <HAL_RCC_GetSysClockFreq+0x2e4>
 80054fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005502:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005506:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800550a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800550e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005512:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005516:	e065      	b.n	80055e4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	ee07 3a90 	vmov	s15, r3
 800551e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005522:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005644 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005526:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800552a:	4b40      	ldr	r3, [pc, #256]	; (800562c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800552c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800552e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005532:	ee07 3a90 	vmov	s15, r3
 8005536:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800553a:	ed97 6a02 	vldr	s12, [r7, #8]
 800553e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800563c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005542:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005546:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800554a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800554e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005556:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800555a:	e043      	b.n	80055e4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	ee07 3a90 	vmov	s15, r3
 8005562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005566:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005648 <HAL_RCC_GetSysClockFreq+0x2f0>
 800556a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800556e:	4b2f      	ldr	r3, [pc, #188]	; (800562c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005576:	ee07 3a90 	vmov	s15, r3
 800557a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800557e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005582:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800563c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005586:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800558a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800558e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005592:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800559a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800559e:	e021      	b.n	80055e4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	ee07 3a90 	vmov	s15, r3
 80055a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055aa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005644 <HAL_RCC_GetSysClockFreq+0x2ec>
 80055ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055b2:	4b1e      	ldr	r3, [pc, #120]	; (800562c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055ba:	ee07 3a90 	vmov	s15, r3
 80055be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80055c6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800563c <HAL_RCC_GetSysClockFreq+0x2e4>
 80055ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80055e2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80055e4:	4b11      	ldr	r3, [pc, #68]	; (800562c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e8:	0a5b      	lsrs	r3, r3, #9
 80055ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055ee:	3301      	adds	r3, #1
 80055f0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	ee07 3a90 	vmov	s15, r3
 80055f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80055fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8005600:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005604:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005608:	ee17 3a90 	vmov	r3, s15
 800560c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800560e:	e005      	b.n	800561c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005610:	2300      	movs	r3, #0
 8005612:	61bb      	str	r3, [r7, #24]
    break;
 8005614:	e002      	b.n	800561c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005616:	4b07      	ldr	r3, [pc, #28]	; (8005634 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005618:	61bb      	str	r3, [r7, #24]
    break;
 800561a:	bf00      	nop
  }

  return sysclockfreq;
 800561c:	69bb      	ldr	r3, [r7, #24]
}
 800561e:	4618      	mov	r0, r3
 8005620:	3724      	adds	r7, #36	; 0x24
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop
 800562c:	58024400 	.word	0x58024400
 8005630:	03d09000 	.word	0x03d09000
 8005634:	003d0900 	.word	0x003d0900
 8005638:	016e3600 	.word	0x016e3600
 800563c:	46000000 	.word	0x46000000
 8005640:	4c742400 	.word	0x4c742400
 8005644:	4a742400 	.word	0x4a742400
 8005648:	4bb71b00 	.word	0x4bb71b00

0800564c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8005652:	f7ff fe81 	bl	8005358 <HAL_RCC_GetSysClockFreq>
 8005656:	4602      	mov	r2, r0
 8005658:	4b10      	ldr	r3, [pc, #64]	; (800569c <HAL_RCC_GetHCLKFreq+0x50>)
 800565a:	699b      	ldr	r3, [r3, #24]
 800565c:	0a1b      	lsrs	r3, r3, #8
 800565e:	f003 030f 	and.w	r3, r3, #15
 8005662:	490f      	ldr	r1, [pc, #60]	; (80056a0 <HAL_RCC_GetHCLKFreq+0x54>)
 8005664:	5ccb      	ldrb	r3, [r1, r3]
 8005666:	f003 031f 	and.w	r3, r3, #31
 800566a:	fa22 f303 	lsr.w	r3, r2, r3
 800566e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005670:	4b0a      	ldr	r3, [pc, #40]	; (800569c <HAL_RCC_GetHCLKFreq+0x50>)
 8005672:	699b      	ldr	r3, [r3, #24]
 8005674:	f003 030f 	and.w	r3, r3, #15
 8005678:	4a09      	ldr	r2, [pc, #36]	; (80056a0 <HAL_RCC_GetHCLKFreq+0x54>)
 800567a:	5cd3      	ldrb	r3, [r2, r3]
 800567c:	f003 031f 	and.w	r3, r3, #31
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	fa22 f303 	lsr.w	r3, r2, r3
 8005686:	4a07      	ldr	r2, [pc, #28]	; (80056a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8005688:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800568a:	4a07      	ldr	r2, [pc, #28]	; (80056a8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005690:	4b04      	ldr	r3, [pc, #16]	; (80056a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8005692:	681b      	ldr	r3, [r3, #0]
}
 8005694:	4618      	mov	r0, r3
 8005696:	3708      	adds	r7, #8
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}
 800569c:	58024400 	.word	0x58024400
 80056a0:	080070f4 	.word	0x080070f4
 80056a4:	24000004 	.word	0x24000004
 80056a8:	24000000 	.word	0x24000000

080056ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80056b0:	f7ff ffcc 	bl	800564c <HAL_RCC_GetHCLKFreq>
 80056b4:	4602      	mov	r2, r0
 80056b6:	4b06      	ldr	r3, [pc, #24]	; (80056d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80056b8:	69db      	ldr	r3, [r3, #28]
 80056ba:	091b      	lsrs	r3, r3, #4
 80056bc:	f003 0307 	and.w	r3, r3, #7
 80056c0:	4904      	ldr	r1, [pc, #16]	; (80056d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80056c2:	5ccb      	ldrb	r3, [r1, r3]
 80056c4:	f003 031f 	and.w	r3, r3, #31
 80056c8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	bd80      	pop	{r7, pc}
 80056d0:	58024400 	.word	0x58024400
 80056d4:	080070f4 	.word	0x080070f4

080056d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	223f      	movs	r2, #63	; 0x3f
 80056e6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80056e8:	4b1a      	ldr	r3, [pc, #104]	; (8005754 <HAL_RCC_GetClockConfig+0x7c>)
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	f003 0207 	and.w	r2, r3, #7
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 80056f4:	4b17      	ldr	r3, [pc, #92]	; (8005754 <HAL_RCC_GetClockConfig+0x7c>)
 80056f6:	699b      	ldr	r3, [r3, #24]
 80056f8:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 8005700:	4b14      	ldr	r3, [pc, #80]	; (8005754 <HAL_RCC_GetClockConfig+0x7c>)
 8005702:	699b      	ldr	r3, [r3, #24]
 8005704:	f003 020f 	and.w	r2, r3, #15
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 800570c:	4b11      	ldr	r3, [pc, #68]	; (8005754 <HAL_RCC_GetClockConfig+0x7c>)
 800570e:	699b      	ldr	r3, [r3, #24]
 8005710:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 8005718:	4b0e      	ldr	r3, [pc, #56]	; (8005754 <HAL_RCC_GetClockConfig+0x7c>)
 800571a:	69db      	ldr	r3, [r3, #28]
 800571c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 8005724:	4b0b      	ldr	r3, [pc, #44]	; (8005754 <HAL_RCC_GetClockConfig+0x7c>)
 8005726:	69db      	ldr	r3, [r3, #28]
 8005728:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 8005730:	4b08      	ldr	r3, [pc, #32]	; (8005754 <HAL_RCC_GetClockConfig+0x7c>)
 8005732:	6a1b      	ldr	r3, [r3, #32]
 8005734:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800573c:	4b06      	ldr	r3, [pc, #24]	; (8005758 <HAL_RCC_GetClockConfig+0x80>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 020f 	and.w	r2, r3, #15
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	601a      	str	r2, [r3, #0]
}
 8005748:	bf00      	nop
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr
 8005754:	58024400 	.word	0x58024400
 8005758:	52002000 	.word	0x52002000

0800575c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b086      	sub	sp, #24
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005764:	2300      	movs	r3, #0
 8005766:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005768:	2300      	movs	r3, #0
 800576a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005774:	2b00      	cmp	r3, #0
 8005776:	d03f      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800577c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005780:	d02a      	beq.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005782:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005786:	d824      	bhi.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005788:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800578c:	d018      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800578e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005792:	d81e      	bhi.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005794:	2b00      	cmp	r3, #0
 8005796:	d003      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005798:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800579c:	d007      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x52>
 800579e:	e018      	b.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057a0:	4b9f      	ldr	r3, [pc, #636]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80057a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a4:	4a9e      	ldr	r2, [pc, #632]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80057a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80057ac:	e015      	b.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	3304      	adds	r3, #4
 80057b2:	2102      	movs	r1, #2
 80057b4:	4618      	mov	r0, r3
 80057b6:	f000 fedd 	bl	8006574 <RCCEx_PLL2_Config>
 80057ba:	4603      	mov	r3, r0
 80057bc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80057be:	e00c      	b.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	3324      	adds	r3, #36	; 0x24
 80057c4:	2102      	movs	r1, #2
 80057c6:	4618      	mov	r0, r3
 80057c8:	f000 ff86 	bl	80066d8 <RCCEx_PLL3_Config>
 80057cc:	4603      	mov	r3, r0
 80057ce:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80057d0:	e003      	b.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	75fb      	strb	r3, [r7, #23]
      break;
 80057d6:	e000      	b.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80057d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057da:	7dfb      	ldrb	r3, [r7, #23]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d109      	bne.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80057e0:	4b8f      	ldr	r3, [pc, #572]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80057e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057ec:	498c      	ldr	r1, [pc, #560]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	650b      	str	r3, [r1, #80]	; 0x50
 80057f2:	e001      	b.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057f4:	7dfb      	ldrb	r3, [r7, #23]
 80057f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005800:	2b00      	cmp	r3, #0
 8005802:	d03d      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005808:	2b04      	cmp	r3, #4
 800580a:	d826      	bhi.n	800585a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800580c:	a201      	add	r2, pc, #4	; (adr r2, 8005814 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800580e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005812:	bf00      	nop
 8005814:	08005829 	.word	0x08005829
 8005818:	08005837 	.word	0x08005837
 800581c:	08005849 	.word	0x08005849
 8005820:	08005861 	.word	0x08005861
 8005824:	08005861 	.word	0x08005861
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005828:	4b7d      	ldr	r3, [pc, #500]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800582a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582c:	4a7c      	ldr	r2, [pc, #496]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800582e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005832:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005834:	e015      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	3304      	adds	r3, #4
 800583a:	2100      	movs	r1, #0
 800583c:	4618      	mov	r0, r3
 800583e:	f000 fe99 	bl	8006574 <RCCEx_PLL2_Config>
 8005842:	4603      	mov	r3, r0
 8005844:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005846:	e00c      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	3324      	adds	r3, #36	; 0x24
 800584c:	2100      	movs	r1, #0
 800584e:	4618      	mov	r0, r3
 8005850:	f000 ff42 	bl	80066d8 <RCCEx_PLL3_Config>
 8005854:	4603      	mov	r3, r0
 8005856:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005858:	e003      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	75fb      	strb	r3, [r7, #23]
      break;
 800585e:	e000      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005860:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005862:	7dfb      	ldrb	r3, [r7, #23]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d109      	bne.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005868:	4b6d      	ldr	r3, [pc, #436]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800586a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800586c:	f023 0207 	bic.w	r2, r3, #7
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005874:	496a      	ldr	r1, [pc, #424]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005876:	4313      	orrs	r3, r2
 8005878:	650b      	str	r3, [r1, #80]	; 0x50
 800587a:	e001      	b.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800587c:	7dfb      	ldrb	r3, [r7, #23]
 800587e:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005888:	2b00      	cmp	r3, #0
 800588a:	d04a      	beq.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005890:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005894:	d031      	beq.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8005896:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800589a:	d82b      	bhi.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800589c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058a0:	d02d      	beq.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80058a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058a6:	d825      	bhi.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80058a8:	2bc0      	cmp	r3, #192	; 0xc0
 80058aa:	d02a      	beq.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80058ac:	2bc0      	cmp	r3, #192	; 0xc0
 80058ae:	d821      	bhi.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80058b0:	2b80      	cmp	r3, #128	; 0x80
 80058b2:	d016      	beq.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80058b4:	2b80      	cmp	r3, #128	; 0x80
 80058b6:	d81d      	bhi.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d002      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80058bc:	2b40      	cmp	r3, #64	; 0x40
 80058be:	d007      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x174>
 80058c0:	e018      	b.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058c2:	4b57      	ldr	r3, [pc, #348]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80058c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c6:	4a56      	ldr	r2, [pc, #344]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80058c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80058ce:	e019      	b.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	3304      	adds	r3, #4
 80058d4:	2100      	movs	r1, #0
 80058d6:	4618      	mov	r0, r3
 80058d8:	f000 fe4c 	bl	8006574 <RCCEx_PLL2_Config>
 80058dc:	4603      	mov	r3, r0
 80058de:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80058e0:	e010      	b.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	3324      	adds	r3, #36	; 0x24
 80058e6:	2100      	movs	r1, #0
 80058e8:	4618      	mov	r0, r3
 80058ea:	f000 fef5 	bl	80066d8 <RCCEx_PLL3_Config>
 80058ee:	4603      	mov	r3, r0
 80058f0:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80058f2:	e007      	b.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	75fb      	strb	r3, [r7, #23]
      break;
 80058f8:	e004      	b.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80058fa:	bf00      	nop
 80058fc:	e002      	b.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80058fe:	bf00      	nop
 8005900:	e000      	b.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8005902:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005904:	7dfb      	ldrb	r3, [r7, #23]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d109      	bne.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800590a:	4b45      	ldr	r3, [pc, #276]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800590c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800590e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005916:	4942      	ldr	r1, [pc, #264]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005918:	4313      	orrs	r3, r2
 800591a:	650b      	str	r3, [r1, #80]	; 0x50
 800591c:	e001      	b.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800591e:	7dfb      	ldrb	r3, [r7, #23]
 8005920:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800592a:	2b00      	cmp	r3, #0
 800592c:	d04f      	beq.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005932:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005936:	d036      	beq.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8005938:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800593c:	d830      	bhi.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800593e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005942:	d032      	beq.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8005944:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005948:	d82a      	bhi.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800594a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800594e:	d02e      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x252>
 8005950:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005954:	d824      	bhi.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8005956:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800595a:	d018      	beq.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x232>
 800595c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005960:	d81e      	bhi.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8005962:	2b00      	cmp	r3, #0
 8005964:	d003      	beq.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x212>
 8005966:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800596a:	d007      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x220>
 800596c:	e018      	b.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800596e:	4b2c      	ldr	r3, [pc, #176]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005972:	4a2b      	ldr	r2, [pc, #172]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005978:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800597a:	e019      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	3304      	adds	r3, #4
 8005980:	2100      	movs	r1, #0
 8005982:	4618      	mov	r0, r3
 8005984:	f000 fdf6 	bl	8006574 <RCCEx_PLL2_Config>
 8005988:	4603      	mov	r3, r0
 800598a:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800598c:	e010      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	3324      	adds	r3, #36	; 0x24
 8005992:	2100      	movs	r1, #0
 8005994:	4618      	mov	r0, r3
 8005996:	f000 fe9f 	bl	80066d8 <RCCEx_PLL3_Config>
 800599a:	4603      	mov	r3, r0
 800599c:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800599e:	e007      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	75fb      	strb	r3, [r7, #23]
      break;
 80059a4:	e004      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80059a6:	bf00      	nop
 80059a8:	e002      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80059aa:	bf00      	nop
 80059ac:	e000      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80059ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059b0:	7dfb      	ldrb	r3, [r7, #23]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d109      	bne.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80059b6:	4b1a      	ldr	r3, [pc, #104]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80059b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059ba:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059c2:	4917      	ldr	r1, [pc, #92]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80059c4:	4313      	orrs	r3, r2
 80059c6:	650b      	str	r3, [r1, #80]	; 0x50
 80059c8:	e001      	b.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059ca:	7dfb      	ldrb	r3, [r7, #23]
 80059cc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d034      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059de:	2b30      	cmp	r3, #48	; 0x30
 80059e0:	d01c      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 80059e2:	2b30      	cmp	r3, #48	; 0x30
 80059e4:	d817      	bhi.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80059e6:	2b20      	cmp	r3, #32
 80059e8:	d00c      	beq.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80059ea:	2b20      	cmp	r3, #32
 80059ec:	d813      	bhi.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d018      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 80059f2:	2b10      	cmp	r3, #16
 80059f4:	d10f      	bne.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059f6:	4b0a      	ldr	r3, [pc, #40]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80059f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059fa:	4a09      	ldr	r2, [pc, #36]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80059fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a00:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8005a02:	e010      	b.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x2ca>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	3304      	adds	r3, #4
 8005a08:	2102      	movs	r1, #2
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f000 fdb2 	bl	8006574 <RCCEx_PLL2_Config>
 8005a10:	4603      	mov	r3, r0
 8005a12:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8005a14:	e007      	b.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	75fb      	strb	r3, [r7, #23]
      break;
 8005a1a:	e004      	b.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      break;
 8005a1c:	bf00      	nop
 8005a1e:	e002      	b.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005a20:	58024400 	.word	0x58024400
      break;
 8005a24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a26:	7dfb      	ldrb	r3, [r7, #23]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d109      	bne.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005a2c:	4b9b      	ldr	r3, [pc, #620]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a30:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a38:	4998      	ldr	r1, [pc, #608]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005a3e:	e001      	b.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a40:	7dfb      	ldrb	r3, [r7, #23]
 8005a42:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d047      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a58:	d030      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005a5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a5e:	d82a      	bhi.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8005a60:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005a64:	d02c      	beq.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8005a66:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005a6a:	d824      	bhi.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8005a6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a70:	d018      	beq.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8005a72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a76:	d81e      	bhi.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d003      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8005a7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a80:	d007      	beq.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8005a82:	e018      	b.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a84:	4b85      	ldr	r3, [pc, #532]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a88:	4a84      	ldr	r2, [pc, #528]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005a8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005a90:	e017      	b.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	3304      	adds	r3, #4
 8005a96:	2100      	movs	r1, #0
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f000 fd6b 	bl	8006574 <RCCEx_PLL2_Config>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005aa2:	e00e      	b.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	3324      	adds	r3, #36	; 0x24
 8005aa8:	2100      	movs	r1, #0
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f000 fe14 	bl	80066d8 <RCCEx_PLL3_Config>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005ab4:	e005      	b.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	75fb      	strb	r3, [r7, #23]
      break;
 8005aba:	e002      	b.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8005abc:	bf00      	nop
 8005abe:	e000      	b.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8005ac0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ac2:	7dfb      	ldrb	r3, [r7, #23]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d109      	bne.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005ac8:	4b74      	ldr	r3, [pc, #464]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005aca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005acc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ad4:	4971      	ldr	r1, [pc, #452]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	650b      	str	r3, [r1, #80]	; 0x50
 8005ada:	e001      	b.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005adc:	7dfb      	ldrb	r3, [r7, #23]
 8005ade:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d049      	beq.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005af0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005af4:	d02e      	beq.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005af6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005afa:	d828      	bhi.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005afc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b00:	d02a      	beq.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8005b02:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b06:	d822      	bhi.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005b08:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005b0c:	d026      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8005b0e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005b12:	d81c      	bhi.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005b14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b18:	d010      	beq.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005b1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b1e:	d816      	bhi.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d01d      	beq.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8005b24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b28:	d111      	bne.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	3304      	adds	r3, #4
 8005b2e:	2101      	movs	r1, #1
 8005b30:	4618      	mov	r0, r3
 8005b32:	f000 fd1f 	bl	8006574 <RCCEx_PLL2_Config>
 8005b36:	4603      	mov	r3, r0
 8005b38:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005b3a:	e012      	b.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	3324      	adds	r3, #36	; 0x24
 8005b40:	2101      	movs	r1, #1
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 fdc8 	bl	80066d8 <RCCEx_PLL3_Config>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005b4c:	e009      	b.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	75fb      	strb	r3, [r7, #23]
      break;
 8005b52:	e006      	b.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8005b54:	bf00      	nop
 8005b56:	e004      	b.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8005b58:	bf00      	nop
 8005b5a:	e002      	b.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8005b5c:	bf00      	nop
 8005b5e:	e000      	b.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8005b60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b62:	7dfb      	ldrb	r3, [r7, #23]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d109      	bne.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005b68:	4b4c      	ldr	r3, [pc, #304]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005b6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b6c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b74:	4949      	ldr	r1, [pc, #292]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005b76:	4313      	orrs	r3, r2
 8005b78:	650b      	str	r3, [r1, #80]	; 0x50
 8005b7a:	e001      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b7c:	7dfb      	ldrb	r3, [r7, #23]
 8005b7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d053      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005b92:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005b96:	d034      	beq.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005b98:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005b9c:	d82e      	bhi.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8005b9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ba2:	d030      	beq.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8005ba4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ba8:	d828      	bhi.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8005baa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bae:	d02c      	beq.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8005bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bb4:	d822      	bhi.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8005bb6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005bba:	d028      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8005bbc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005bc0:	d81c      	bhi.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8005bc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bc6:	d010      	beq.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8005bc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bcc:	d816      	bhi.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d01f      	beq.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8005bd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005bd6:	d111      	bne.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	3304      	adds	r3, #4
 8005bdc:	2101      	movs	r1, #1
 8005bde:	4618      	mov	r0, r3
 8005be0:	f000 fcc8 	bl	8006574 <RCCEx_PLL2_Config>
 8005be4:	4603      	mov	r3, r0
 8005be6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005be8:	e014      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	3324      	adds	r3, #36	; 0x24
 8005bee:	2101      	movs	r1, #1
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f000 fd71 	bl	80066d8 <RCCEx_PLL3_Config>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005bfa:	e00b      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	75fb      	strb	r3, [r7, #23]
      break;
 8005c00:	e008      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8005c02:	bf00      	nop
 8005c04:	e006      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8005c06:	bf00      	nop
 8005c08:	e004      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8005c0a:	bf00      	nop
 8005c0c:	e002      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8005c0e:	bf00      	nop
 8005c10:	e000      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8005c12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c14:	7dfb      	ldrb	r3, [r7, #23]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d10a      	bne.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005c1a:	4b20      	ldr	r3, [pc, #128]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c1e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005c28:	491c      	ldr	r1, [pc, #112]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	658b      	str	r3, [r1, #88]	; 0x58
 8005c2e:	e001      	b.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c30:	7dfb      	ldrb	r3, [r7, #23]
 8005c32:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d031      	beq.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c48:	d00e      	beq.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8005c4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c4e:	d814      	bhi.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d015      	beq.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005c54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c58:	d10f      	bne.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c5a:	4b10      	ldr	r3, [pc, #64]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5e:	4a0f      	ldr	r2, [pc, #60]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c64:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005c66:	e00c      	b.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	3304      	adds	r3, #4
 8005c6c:	2101      	movs	r1, #1
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f000 fc80 	bl	8006574 <RCCEx_PLL2_Config>
 8005c74:	4603      	mov	r3, r0
 8005c76:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005c78:	e003      	b.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	75fb      	strb	r3, [r7, #23]
      break;
 8005c7e:	e000      	b.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8005c80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c82:	7dfb      	ldrb	r3, [r7, #23]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d10b      	bne.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005c88:	4b04      	ldr	r3, [pc, #16]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005c8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c8c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c94:	4901      	ldr	r1, [pc, #4]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005c96:	4313      	orrs	r3, r2
 8005c98:	650b      	str	r3, [r1, #80]	; 0x50
 8005c9a:	e003      	b.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x548>
 8005c9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ca0:	7dfb      	ldrb	r3, [r7, #23]
 8005ca2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d032      	beq.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cb4:	2b03      	cmp	r3, #3
 8005cb6:	d81b      	bhi.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8005cb8:	a201      	add	r2, pc, #4	; (adr r2, 8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8005cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cbe:	bf00      	nop
 8005cc0:	08005cf7 	.word	0x08005cf7
 8005cc4:	08005cd1 	.word	0x08005cd1
 8005cc8:	08005cdf 	.word	0x08005cdf
 8005ccc:	08005cf7 	.word	0x08005cf7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cd0:	4bb2      	ldr	r3, [pc, #712]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd4:	4ab1      	ldr	r2, [pc, #708]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005cd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cda:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005cdc:	e00c      	b.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	3304      	adds	r3, #4
 8005ce2:	2102      	movs	r1, #2
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f000 fc45 	bl	8006574 <RCCEx_PLL2_Config>
 8005cea:	4603      	mov	r3, r0
 8005cec:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005cee:	e003      	b.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	75fb      	strb	r3, [r7, #23]
      break;
 8005cf4:	e000      	b.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8005cf6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cf8:	7dfb      	ldrb	r3, [r7, #23]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d109      	bne.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005cfe:	4ba7      	ldr	r3, [pc, #668]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d02:	f023 0203 	bic.w	r2, r3, #3
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d0a:	49a4      	ldr	r1, [pc, #656]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005d10:	e001      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d12:	7dfb      	ldrb	r3, [r7, #23]
 8005d14:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	f000 8086 	beq.w	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d24:	4b9e      	ldr	r3, [pc, #632]	; (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a9d      	ldr	r2, [pc, #628]	; (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8005d2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d2e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d30:	f7fb fce6 	bl	8001700 <HAL_GetTick>
 8005d34:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d36:	e009      	b.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d38:	f7fb fce2 	bl	8001700 <HAL_GetTick>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	2b64      	cmp	r3, #100	; 0x64
 8005d44:	d902      	bls.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      {
        ret = HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	75fb      	strb	r3, [r7, #23]
        break;
 8005d4a:	e005      	b.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d4c:	4b94      	ldr	r3, [pc, #592]	; (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d0ef      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8005d58:	7dfb      	ldrb	r3, [r7, #23]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d166      	bne.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005d5e:	4b8f      	ldr	r3, [pc, #572]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005d60:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005d68:	4053      	eors	r3, r2
 8005d6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d013      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x63e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d72:	4b8a      	ldr	r3, [pc, #552]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d7a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005d7c:	4b87      	ldr	r3, [pc, #540]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d80:	4a86      	ldr	r2, [pc, #536]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005d82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d86:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005d88:	4b84      	ldr	r3, [pc, #528]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d8c:	4a83      	ldr	r2, [pc, #524]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005d8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d92:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005d94:	4a81      	ldr	r2, [pc, #516]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005da0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005da4:	d115      	bne.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005da6:	f7fb fcab 	bl	8001700 <HAL_GetTick>
 8005daa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005dac:	e00b      	b.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dae:	f7fb fca7 	bl	8001700 <HAL_GetTick>
 8005db2:	4602      	mov	r2, r0
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	1ad3      	subs	r3, r2, r3
 8005db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d902      	bls.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
          {
            ret = HAL_TIMEOUT;
 8005dc0:	2303      	movs	r3, #3
 8005dc2:	75fb      	strb	r3, [r7, #23]
            break;
 8005dc4:	e005      	b.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x676>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005dc6:	4b75      	ldr	r3, [pc, #468]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dca:	f003 0302 	and.w	r3, r3, #2
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d0ed      	beq.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if(ret == HAL_OK)
 8005dd2:	7dfb      	ldrb	r3, [r7, #23]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d126      	bne.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005dde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005de2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005de6:	d10d      	bne.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 8005de8:	4b6c      	ldr	r3, [pc, #432]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005df6:	0919      	lsrs	r1, r3, #4
 8005df8:	4b6a      	ldr	r3, [pc, #424]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005dfa:	400b      	ands	r3, r1
 8005dfc:	4967      	ldr	r1, [pc, #412]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	610b      	str	r3, [r1, #16]
 8005e02:	e005      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 8005e04:	4b65      	ldr	r3, [pc, #404]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	4a64      	ldr	r2, [pc, #400]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005e0a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005e0e:	6113      	str	r3, [r2, #16]
 8005e10:	4b62      	ldr	r3, [pc, #392]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005e12:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e1e:	495f      	ldr	r1, [pc, #380]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005e20:	4313      	orrs	r3, r2
 8005e22:	670b      	str	r3, [r1, #112]	; 0x70
 8005e24:	e004      	b.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005e26:	7dfb      	ldrb	r3, [r7, #23]
 8005e28:	75bb      	strb	r3, [r7, #22]
 8005e2a:	e001      	b.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e2c:	7dfb      	ldrb	r3, [r7, #23]
 8005e2e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 0301 	and.w	r3, r3, #1
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d07f      	beq.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x7e0>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e42:	2b28      	cmp	r3, #40	; 0x28
 8005e44:	d866      	bhi.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 8005e46:	a201      	add	r2, pc, #4	; (adr r2, 8005e4c <HAL_RCCEx_PeriphCLKConfig+0x6f0>)
 8005e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e4c:	08005f1b 	.word	0x08005f1b
 8005e50:	08005f15 	.word	0x08005f15
 8005e54:	08005f15 	.word	0x08005f15
 8005e58:	08005f15 	.word	0x08005f15
 8005e5c:	08005f15 	.word	0x08005f15
 8005e60:	08005f15 	.word	0x08005f15
 8005e64:	08005f15 	.word	0x08005f15
 8005e68:	08005f15 	.word	0x08005f15
 8005e6c:	08005ef1 	.word	0x08005ef1
 8005e70:	08005f15 	.word	0x08005f15
 8005e74:	08005f15 	.word	0x08005f15
 8005e78:	08005f15 	.word	0x08005f15
 8005e7c:	08005f15 	.word	0x08005f15
 8005e80:	08005f15 	.word	0x08005f15
 8005e84:	08005f15 	.word	0x08005f15
 8005e88:	08005f15 	.word	0x08005f15
 8005e8c:	08005f03 	.word	0x08005f03
 8005e90:	08005f15 	.word	0x08005f15
 8005e94:	08005f15 	.word	0x08005f15
 8005e98:	08005f15 	.word	0x08005f15
 8005e9c:	08005f15 	.word	0x08005f15
 8005ea0:	08005f15 	.word	0x08005f15
 8005ea4:	08005f15 	.word	0x08005f15
 8005ea8:	08005f15 	.word	0x08005f15
 8005eac:	08005f1b 	.word	0x08005f1b
 8005eb0:	08005f15 	.word	0x08005f15
 8005eb4:	08005f15 	.word	0x08005f15
 8005eb8:	08005f15 	.word	0x08005f15
 8005ebc:	08005f15 	.word	0x08005f15
 8005ec0:	08005f15 	.word	0x08005f15
 8005ec4:	08005f15 	.word	0x08005f15
 8005ec8:	08005f15 	.word	0x08005f15
 8005ecc:	08005f1b 	.word	0x08005f1b
 8005ed0:	08005f15 	.word	0x08005f15
 8005ed4:	08005f15 	.word	0x08005f15
 8005ed8:	08005f15 	.word	0x08005f15
 8005edc:	08005f15 	.word	0x08005f15
 8005ee0:	08005f15 	.word	0x08005f15
 8005ee4:	08005f15 	.word	0x08005f15
 8005ee8:	08005f15 	.word	0x08005f15
 8005eec:	08005f1b 	.word	0x08005f1b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	3304      	adds	r3, #4
 8005ef4:	2101      	movs	r1, #1
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f000 fb3c 	bl	8006574 <RCCEx_PLL2_Config>
 8005efc:	4603      	mov	r3, r0
 8005efe:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005f00:	e00c      	b.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x7c0>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	3324      	adds	r3, #36	; 0x24
 8005f06:	2101      	movs	r1, #1
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f000 fbe5 	bl	80066d8 <RCCEx_PLL3_Config>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005f12:	e003      	b.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	75fb      	strb	r3, [r7, #23]
      break;
 8005f18:	e000      	b.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      break;
 8005f1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f1c:	7dfb      	ldrb	r3, [r7, #23]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d10a      	bne.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005f22:	4b1e      	ldr	r3, [pc, #120]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f26:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f30:	491a      	ldr	r1, [pc, #104]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005f32:	4313      	orrs	r3, r2
 8005f34:	654b      	str	r3, [r1, #84]	; 0x54
 8005f36:	e001      	b.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f38:	7dfb      	ldrb	r3, [r7, #23]
 8005f3a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 0302 	and.w	r3, r3, #2
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d03f      	beq.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f4c:	2b05      	cmp	r3, #5
 8005f4e:	d821      	bhi.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8005f50:	a201      	add	r2, pc, #4	; (adr r2, 8005f58 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8005f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f56:	bf00      	nop
 8005f58:	08005fa9 	.word	0x08005fa9
 8005f5c:	08005f71 	.word	0x08005f71
 8005f60:	08005f83 	.word	0x08005f83
 8005f64:	08005fa9 	.word	0x08005fa9
 8005f68:	08005fa9 	.word	0x08005fa9
 8005f6c:	08005fa9 	.word	0x08005fa9
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	3304      	adds	r3, #4
 8005f74:	2101      	movs	r1, #1
 8005f76:	4618      	mov	r0, r3
 8005f78:	f000 fafc 	bl	8006574 <RCCEx_PLL2_Config>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005f80:	e013      	b.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	3324      	adds	r3, #36	; 0x24
 8005f86:	2101      	movs	r1, #1
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f000 fba5 	bl	80066d8 <RCCEx_PLL3_Config>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005f92:	e00a      	b.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	75fb      	strb	r3, [r7, #23]
      break;
 8005f98:	e007      	b.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8005f9a:	bf00      	nop
 8005f9c:	58024400 	.word	0x58024400
 8005fa0:	58024800 	.word	0x58024800
 8005fa4:	00ffffcf 	.word	0x00ffffcf
      break;
 8005fa8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005faa:	7dfb      	ldrb	r3, [r7, #23]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d109      	bne.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005fb0:	4b9f      	ldr	r3, [pc, #636]	; (8006230 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fb4:	f023 0207 	bic.w	r2, r3, #7
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fbc:	499c      	ldr	r1, [pc, #624]	; (8006230 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	654b      	str	r3, [r1, #84]	; 0x54
 8005fc2:	e001      	b.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fc4:	7dfb      	ldrb	r3, [r7, #23]
 8005fc6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f003 0304 	and.w	r3, r3, #4
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d039      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005fda:	2b05      	cmp	r3, #5
 8005fdc:	d820      	bhi.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8005fde:	a201      	add	r2, pc, #4	; (adr r2, 8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8005fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe4:	08006027 	.word	0x08006027
 8005fe8:	08005ffd 	.word	0x08005ffd
 8005fec:	0800600f 	.word	0x0800600f
 8005ff0:	08006027 	.word	0x08006027
 8005ff4:	08006027 	.word	0x08006027
 8005ff8:	08006027 	.word	0x08006027
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	3304      	adds	r3, #4
 8006000:	2101      	movs	r1, #1
 8006002:	4618      	mov	r0, r3
 8006004:	f000 fab6 	bl	8006574 <RCCEx_PLL2_Config>
 8006008:	4603      	mov	r3, r0
 800600a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800600c:	e00c      	b.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	3324      	adds	r3, #36	; 0x24
 8006012:	2101      	movs	r1, #1
 8006014:	4618      	mov	r0, r3
 8006016:	f000 fb5f 	bl	80066d8 <RCCEx_PLL3_Config>
 800601a:	4603      	mov	r3, r0
 800601c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800601e:	e003      	b.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	75fb      	strb	r3, [r7, #23]
      break;
 8006024:	e000      	b.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8006026:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006028:	7dfb      	ldrb	r3, [r7, #23]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d10a      	bne.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800602e:	4b80      	ldr	r3, [pc, #512]	; (8006230 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8006030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006032:	f023 0207 	bic.w	r2, r3, #7
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800603c:	497c      	ldr	r1, [pc, #496]	; (8006230 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800603e:	4313      	orrs	r3, r2
 8006040:	658b      	str	r3, [r1, #88]	; 0x58
 8006042:	e001      	b.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006044:	7dfb      	ldrb	r3, [r7, #23]
 8006046:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 0320 	and.w	r3, r3, #32
 8006050:	2b00      	cmp	r3, #0
 8006052:	d04b      	beq.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800605a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800605e:	d02e      	beq.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x962>
 8006060:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006064:	d828      	bhi.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8006066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800606a:	d02a      	beq.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x966>
 800606c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006070:	d822      	bhi.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8006072:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006076:	d026      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8006078:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800607c:	d81c      	bhi.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800607e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006082:	d010      	beq.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8006084:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006088:	d816      	bhi.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800608a:	2b00      	cmp	r3, #0
 800608c:	d01d      	beq.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800608e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006092:	d111      	bne.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	3304      	adds	r3, #4
 8006098:	2100      	movs	r1, #0
 800609a:	4618      	mov	r0, r3
 800609c:	f000 fa6a 	bl	8006574 <RCCEx_PLL2_Config>
 80060a0:	4603      	mov	r3, r0
 80060a2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80060a4:	e012      	b.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	3324      	adds	r3, #36	; 0x24
 80060aa:	2102      	movs	r1, #2
 80060ac:	4618      	mov	r0, r3
 80060ae:	f000 fb13 	bl	80066d8 <RCCEx_PLL3_Config>
 80060b2:	4603      	mov	r3, r0
 80060b4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80060b6:	e009      	b.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	75fb      	strb	r3, [r7, #23]
      break;
 80060bc:	e006      	b.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80060be:	bf00      	nop
 80060c0:	e004      	b.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80060c2:	bf00      	nop
 80060c4:	e002      	b.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80060c6:	bf00      	nop
 80060c8:	e000      	b.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80060ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060cc:	7dfb      	ldrb	r3, [r7, #23]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d10a      	bne.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80060d2:	4b57      	ldr	r3, [pc, #348]	; (8006230 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80060d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060d6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060e0:	4953      	ldr	r1, [pc, #332]	; (8006230 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80060e2:	4313      	orrs	r3, r2
 80060e4:	654b      	str	r3, [r1, #84]	; 0x54
 80060e6:	e001      	b.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060e8:	7dfb      	ldrb	r3, [r7, #23]
 80060ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d04b      	beq.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80060fe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006102:	d02e      	beq.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8006104:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006108:	d828      	bhi.n	800615c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800610a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800610e:	d02a      	beq.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8006110:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006114:	d822      	bhi.n	800615c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8006116:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800611a:	d026      	beq.n	800616a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800611c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006120:	d81c      	bhi.n	800615c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8006122:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006126:	d010      	beq.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8006128:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800612c:	d816      	bhi.n	800615c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800612e:	2b00      	cmp	r3, #0
 8006130:	d01d      	beq.n	800616e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8006132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006136:	d111      	bne.n	800615c <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	3304      	adds	r3, #4
 800613c:	2100      	movs	r1, #0
 800613e:	4618      	mov	r0, r3
 8006140:	f000 fa18 	bl	8006574 <RCCEx_PLL2_Config>
 8006144:	4603      	mov	r3, r0
 8006146:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006148:	e012      	b.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	3324      	adds	r3, #36	; 0x24
 800614e:	2102      	movs	r1, #2
 8006150:	4618      	mov	r0, r3
 8006152:	f000 fac1 	bl	80066d8 <RCCEx_PLL3_Config>
 8006156:	4603      	mov	r3, r0
 8006158:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800615a:	e009      	b.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	75fb      	strb	r3, [r7, #23]
      break;
 8006160:	e006      	b.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8006162:	bf00      	nop
 8006164:	e004      	b.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8006166:	bf00      	nop
 8006168:	e002      	b.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800616a:	bf00      	nop
 800616c:	e000      	b.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800616e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006170:	7dfb      	ldrb	r3, [r7, #23]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d10a      	bne.n	800618c <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006176:	4b2e      	ldr	r3, [pc, #184]	; (8006230 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8006178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800617a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006184:	492a      	ldr	r1, [pc, #168]	; (8006230 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8006186:	4313      	orrs	r3, r2
 8006188:	658b      	str	r3, [r1, #88]	; 0x58
 800618a:	e001      	b.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800618c:	7dfb      	ldrb	r3, [r7, #23]
 800618e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006198:	2b00      	cmp	r3, #0
 800619a:	d04d      	beq.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80061a2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80061a6:	d02e      	beq.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 80061a8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80061ac:	d828      	bhi.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80061ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061b2:	d02a      	beq.n	800620a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80061b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061b8:	d822      	bhi.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80061ba:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80061be:	d026      	beq.n	800620e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80061c0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80061c4:	d81c      	bhi.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80061c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061ca:	d010      	beq.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0xa92>
 80061cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061d0:	d816      	bhi.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d01d      	beq.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80061d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061da:	d111      	bne.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	3304      	adds	r3, #4
 80061e0:	2100      	movs	r1, #0
 80061e2:	4618      	mov	r0, r3
 80061e4:	f000 f9c6 	bl	8006574 <RCCEx_PLL2_Config>
 80061e8:	4603      	mov	r3, r0
 80061ea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80061ec:	e012      	b.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	3324      	adds	r3, #36	; 0x24
 80061f2:	2102      	movs	r1, #2
 80061f4:	4618      	mov	r0, r3
 80061f6:	f000 fa6f 	bl	80066d8 <RCCEx_PLL3_Config>
 80061fa:	4603      	mov	r3, r0
 80061fc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80061fe:	e009      	b.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	75fb      	strb	r3, [r7, #23]
      break;
 8006204:	e006      	b.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8006206:	bf00      	nop
 8006208:	e004      	b.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800620a:	bf00      	nop
 800620c:	e002      	b.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800620e:	bf00      	nop
 8006210:	e000      	b.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8006212:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006214:	7dfb      	ldrb	r3, [r7, #23]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d10c      	bne.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800621a:	4b05      	ldr	r3, [pc, #20]	; (8006230 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800621c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800621e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006228:	4901      	ldr	r1, [pc, #4]	; (8006230 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800622a:	4313      	orrs	r3, r2
 800622c:	658b      	str	r3, [r1, #88]	; 0x58
 800622e:	e003      	b.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8006230:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006234:	7dfb      	ldrb	r3, [r7, #23]
 8006236:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 0308 	and.w	r3, r3, #8
 8006240:	2b00      	cmp	r3, #0
 8006242:	d01a      	beq.n	800627a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800624a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800624e:	d10a      	bne.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	3324      	adds	r3, #36	; 0x24
 8006254:	2102      	movs	r1, #2
 8006256:	4618      	mov	r0, r3
 8006258:	f000 fa3e 	bl	80066d8 <RCCEx_PLL3_Config>
 800625c:	4603      	mov	r3, r0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d001      	beq.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006266:	4b8c      	ldr	r3, [pc, #560]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8006268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800626a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006274:	4988      	ldr	r1, [pc, #544]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8006276:	4313      	orrs	r3, r2
 8006278:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 0310 	and.w	r3, r3, #16
 8006282:	2b00      	cmp	r3, #0
 8006284:	d01a      	beq.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800628c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006290:	d10a      	bne.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	3324      	adds	r3, #36	; 0x24
 8006296:	2102      	movs	r1, #2
 8006298:	4618      	mov	r0, r3
 800629a:	f000 fa1d 	bl	80066d8 <RCCEx_PLL3_Config>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d001      	beq.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80062a8:	4b7b      	ldr	r3, [pc, #492]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80062aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80062b6:	4978      	ldr	r1, [pc, #480]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80062b8:	4313      	orrs	r3, r2
 80062ba:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d034      	beq.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80062ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062d2:	d01d      	beq.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 80062d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062d8:	d817      	bhi.n	800630a <HAL_RCCEx_PeriphCLKConfig+0xbae>
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d003      	beq.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 80062de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062e2:	d009      	beq.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80062e4:	e011      	b.n	800630a <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	3304      	adds	r3, #4
 80062ea:	2100      	movs	r1, #0
 80062ec:	4618      	mov	r0, r3
 80062ee:	f000 f941 	bl	8006574 <RCCEx_PLL2_Config>
 80062f2:	4603      	mov	r3, r0
 80062f4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80062f6:	e00c      	b.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	3324      	adds	r3, #36	; 0x24
 80062fc:	2102      	movs	r1, #2
 80062fe:	4618      	mov	r0, r3
 8006300:	f000 f9ea 	bl	80066d8 <RCCEx_PLL3_Config>
 8006304:	4603      	mov	r3, r0
 8006306:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006308:	e003      	b.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	75fb      	strb	r3, [r7, #23]
      break;
 800630e:	e000      	b.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8006310:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006312:	7dfb      	ldrb	r3, [r7, #23]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d10a      	bne.n	800632e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006318:	4b5f      	ldr	r3, [pc, #380]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800631a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800631c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006326:	495c      	ldr	r1, [pc, #368]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8006328:	4313      	orrs	r3, r2
 800632a:	658b      	str	r3, [r1, #88]	; 0x58
 800632c:	e001      	b.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800632e:	7dfb      	ldrb	r3, [r7, #23]
 8006330:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800633a:	2b00      	cmp	r3, #0
 800633c:	d033      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006344:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006348:	d01c      	beq.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800634a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800634e:	d816      	bhi.n	800637e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8006350:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006354:	d003      	beq.n	800635e <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8006356:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800635a:	d007      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800635c:	e00f      	b.n	800637e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800635e:	4b4e      	ldr	r3, [pc, #312]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8006360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006362:	4a4d      	ldr	r2, [pc, #308]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8006364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006368:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800636a:	e00c      	b.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	3324      	adds	r3, #36	; 0x24
 8006370:	2101      	movs	r1, #1
 8006372:	4618      	mov	r0, r3
 8006374:	f000 f9b0 	bl	80066d8 <RCCEx_PLL3_Config>
 8006378:	4603      	mov	r3, r0
 800637a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800637c:	e003      	b.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	75fb      	strb	r3, [r7, #23]
      break;
 8006382:	e000      	b.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8006384:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006386:	7dfb      	ldrb	r3, [r7, #23]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d10a      	bne.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800638c:	4b42      	ldr	r3, [pc, #264]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800638e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006390:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800639a:	493f      	ldr	r1, [pc, #252]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800639c:	4313      	orrs	r3, r2
 800639e:	654b      	str	r3, [r1, #84]	; 0x54
 80063a0:	e001      	b.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063a2:	7dfb      	ldrb	r3, [r7, #23]
 80063a4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d029      	beq.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d003      	beq.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0xc66>
 80063ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063be:	d007      	beq.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80063c0:	e00f      	b.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0xc86>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063c2:	4b35      	ldr	r3, [pc, #212]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80063c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c6:	4a34      	ldr	r2, [pc, #208]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80063c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80063ce:	e00b      	b.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	3304      	adds	r3, #4
 80063d4:	2102      	movs	r1, #2
 80063d6:	4618      	mov	r0, r3
 80063d8:	f000 f8cc 	bl	8006574 <RCCEx_PLL2_Config>
 80063dc:	4603      	mov	r3, r0
 80063de:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80063e0:	e002      	b.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    default:
      ret = HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	75fb      	strb	r3, [r7, #23]
      break;
 80063e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063e8:	7dfb      	ldrb	r3, [r7, #23]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d109      	bne.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80063ee:	4b2a      	ldr	r3, [pc, #168]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80063f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063fa:	4927      	ldr	r1, [pc, #156]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80063fc:	4313      	orrs	r3, r2
 80063fe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006400:	e001      	b.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0xcaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006402:	7dfb      	ldrb	r3, [r7, #23]
 8006404:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800640e:	2b00      	cmp	r3, #0
 8006410:	d00a      	beq.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0xccc>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	3324      	adds	r3, #36	; 0x24
 8006416:	2102      	movs	r1, #2
 8006418:	4618      	mov	r0, r3
 800641a:	f000 f95d 	bl	80066d8 <RCCEx_PLL3_Config>
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d001      	beq.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      status=HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006430:	2b00      	cmp	r3, #0
 8006432:	d035      	beq.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800643a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800643e:	d017      	beq.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006440:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006444:	d811      	bhi.n	800646a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8006446:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800644a:	d013      	beq.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 800644c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006450:	d80b      	bhi.n	800646a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8006452:	2b00      	cmp	r3, #0
 8006454:	d010      	beq.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8006456:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800645a:	d106      	bne.n	800646a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800645c:	4b0e      	ldr	r3, [pc, #56]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800645e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006460:	4a0d      	ldr	r2, [pc, #52]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8006462:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006466:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006468:	e007      	b.n	800647a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	75fb      	strb	r3, [r7, #23]
      break;
 800646e:	e004      	b.n	800647a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8006470:	bf00      	nop
 8006472:	e002      	b.n	800647a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8006474:	bf00      	nop
 8006476:	e000      	b.n	800647a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8006478:	bf00      	nop
    }

    if(ret == HAL_OK)
 800647a:	7dfb      	ldrb	r3, [r7, #23]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d10d      	bne.n	800649c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006480:	4b05      	ldr	r3, [pc, #20]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8006482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006484:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800648e:	4902      	ldr	r1, [pc, #8]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8006490:	4313      	orrs	r3, r2
 8006492:	654b      	str	r3, [r1, #84]	; 0x54
 8006494:	e004      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006496:	bf00      	nop
 8006498:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800649c:	7dfb      	ldrb	r3, [r7, #23]
 800649e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d008      	beq.n	80064be <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80064ac:	4b30      	ldr	r3, [pc, #192]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80064ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064b8:	492d      	ldr	r1, [pc, #180]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80064ba:	4313      	orrs	r3, r2
 80064bc:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d008      	beq.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80064ca:	4b29      	ldr	r3, [pc, #164]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80064cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064ce:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064d6:	4926      	ldr	r1, [pc, #152]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80064d8:	4313      	orrs	r3, r2
 80064da:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d008      	beq.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80064e8:	4b21      	ldr	r3, [pc, #132]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80064ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064ec:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064f4:	491e      	ldr	r1, [pc, #120]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80064f6:	4313      	orrs	r3, r2
 80064f8:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006502:	2b00      	cmp	r3, #0
 8006504:	d00d      	beq.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006506:	4b1a      	ldr	r3, [pc, #104]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	4a19      	ldr	r2, [pc, #100]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800650c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006510:	6113      	str	r3, [r2, #16]
 8006512:	4b17      	ldr	r3, [pc, #92]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006514:	691a      	ldr	r2, [r3, #16]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800651c:	4914      	ldr	r1, [pc, #80]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800651e:	4313      	orrs	r3, r2
 8006520:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2b00      	cmp	r3, #0
 8006528:	da08      	bge.n	800653c <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800652a:	4b11      	ldr	r3, [pc, #68]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800652c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800652e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006536:	490e      	ldr	r1, [pc, #56]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006538:	4313      	orrs	r3, r2
 800653a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006544:	2b00      	cmp	r3, #0
 8006546:	d009      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006548:	4b09      	ldr	r3, [pc, #36]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800654a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800654c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006556:	4906      	ldr	r1, [pc, #24]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006558:	4313      	orrs	r3, r2
 800655a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800655c:	7dbb      	ldrb	r3, [r7, #22]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d101      	bne.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8006562:	2300      	movs	r3, #0
 8006564:	e000      	b.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8006566:	2301      	movs	r3, #1
}
 8006568:	4618      	mov	r0, r3
 800656a:	3718      	adds	r7, #24
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}
 8006570:	58024400 	.word	0x58024400

08006574 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800657e:	2300      	movs	r3, #0
 8006580:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006582:	4b53      	ldr	r3, [pc, #332]	; (80066d0 <RCCEx_PLL2_Config+0x15c>)
 8006584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006586:	f003 0303 	and.w	r3, r3, #3
 800658a:	2b03      	cmp	r3, #3
 800658c:	d101      	bne.n	8006592 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e099      	b.n	80066c6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006592:	4b4f      	ldr	r3, [pc, #316]	; (80066d0 <RCCEx_PLL2_Config+0x15c>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a4e      	ldr	r2, [pc, #312]	; (80066d0 <RCCEx_PLL2_Config+0x15c>)
 8006598:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800659c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800659e:	f7fb f8af 	bl	8001700 <HAL_GetTick>
 80065a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80065a4:	e008      	b.n	80065b8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80065a6:	f7fb f8ab 	bl	8001700 <HAL_GetTick>
 80065aa:	4602      	mov	r2, r0
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	1ad3      	subs	r3, r2, r3
 80065b0:	2b02      	cmp	r3, #2
 80065b2:	d901      	bls.n	80065b8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80065b4:	2303      	movs	r3, #3
 80065b6:	e086      	b.n	80066c6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80065b8:	4b45      	ldr	r3, [pc, #276]	; (80066d0 <RCCEx_PLL2_Config+0x15c>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d1f0      	bne.n	80065a6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80065c4:	4b42      	ldr	r3, [pc, #264]	; (80066d0 <RCCEx_PLL2_Config+0x15c>)
 80065c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	031b      	lsls	r3, r3, #12
 80065d2:	493f      	ldr	r1, [pc, #252]	; (80066d0 <RCCEx_PLL2_Config+0x15c>)
 80065d4:	4313      	orrs	r3, r2
 80065d6:	628b      	str	r3, [r1, #40]	; 0x28
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	3b01      	subs	r3, #1
 80065de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	3b01      	subs	r3, #1
 80065e8:	025b      	lsls	r3, r3, #9
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	431a      	orrs	r2, r3
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	3b01      	subs	r3, #1
 80065f4:	041b      	lsls	r3, r3, #16
 80065f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80065fa:	431a      	orrs	r2, r3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	3b01      	subs	r3, #1
 8006602:	061b      	lsls	r3, r3, #24
 8006604:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006608:	4931      	ldr	r1, [pc, #196]	; (80066d0 <RCCEx_PLL2_Config+0x15c>)
 800660a:	4313      	orrs	r3, r2
 800660c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800660e:	4b30      	ldr	r3, [pc, #192]	; (80066d0 <RCCEx_PLL2_Config+0x15c>)
 8006610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006612:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	695b      	ldr	r3, [r3, #20]
 800661a:	492d      	ldr	r1, [pc, #180]	; (80066d0 <RCCEx_PLL2_Config+0x15c>)
 800661c:	4313      	orrs	r3, r2
 800661e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006620:	4b2b      	ldr	r3, [pc, #172]	; (80066d0 <RCCEx_PLL2_Config+0x15c>)
 8006622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006624:	f023 0220 	bic.w	r2, r3, #32
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	699b      	ldr	r3, [r3, #24]
 800662c:	4928      	ldr	r1, [pc, #160]	; (80066d0 <RCCEx_PLL2_Config+0x15c>)
 800662e:	4313      	orrs	r3, r2
 8006630:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006632:	4b27      	ldr	r3, [pc, #156]	; (80066d0 <RCCEx_PLL2_Config+0x15c>)
 8006634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006636:	4a26      	ldr	r2, [pc, #152]	; (80066d0 <RCCEx_PLL2_Config+0x15c>)
 8006638:	f023 0310 	bic.w	r3, r3, #16
 800663c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800663e:	4b24      	ldr	r3, [pc, #144]	; (80066d0 <RCCEx_PLL2_Config+0x15c>)
 8006640:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006642:	4b24      	ldr	r3, [pc, #144]	; (80066d4 <RCCEx_PLL2_Config+0x160>)
 8006644:	4013      	ands	r3, r2
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	69d2      	ldr	r2, [r2, #28]
 800664a:	00d2      	lsls	r2, r2, #3
 800664c:	4920      	ldr	r1, [pc, #128]	; (80066d0 <RCCEx_PLL2_Config+0x15c>)
 800664e:	4313      	orrs	r3, r2
 8006650:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006652:	4b1f      	ldr	r3, [pc, #124]	; (80066d0 <RCCEx_PLL2_Config+0x15c>)
 8006654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006656:	4a1e      	ldr	r2, [pc, #120]	; (80066d0 <RCCEx_PLL2_Config+0x15c>)
 8006658:	f043 0310 	orr.w	r3, r3, #16
 800665c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d106      	bne.n	8006672 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006664:	4b1a      	ldr	r3, [pc, #104]	; (80066d0 <RCCEx_PLL2_Config+0x15c>)
 8006666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006668:	4a19      	ldr	r2, [pc, #100]	; (80066d0 <RCCEx_PLL2_Config+0x15c>)
 800666a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800666e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006670:	e00f      	b.n	8006692 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	2b01      	cmp	r3, #1
 8006676:	d106      	bne.n	8006686 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006678:	4b15      	ldr	r3, [pc, #84]	; (80066d0 <RCCEx_PLL2_Config+0x15c>)
 800667a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800667c:	4a14      	ldr	r2, [pc, #80]	; (80066d0 <RCCEx_PLL2_Config+0x15c>)
 800667e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006682:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006684:	e005      	b.n	8006692 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006686:	4b12      	ldr	r3, [pc, #72]	; (80066d0 <RCCEx_PLL2_Config+0x15c>)
 8006688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800668a:	4a11      	ldr	r2, [pc, #68]	; (80066d0 <RCCEx_PLL2_Config+0x15c>)
 800668c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006690:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006692:	4b0f      	ldr	r3, [pc, #60]	; (80066d0 <RCCEx_PLL2_Config+0x15c>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a0e      	ldr	r2, [pc, #56]	; (80066d0 <RCCEx_PLL2_Config+0x15c>)
 8006698:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800669c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800669e:	f7fb f82f 	bl	8001700 <HAL_GetTick>
 80066a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80066a4:	e008      	b.n	80066b8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80066a6:	f7fb f82b 	bl	8001700 <HAL_GetTick>
 80066aa:	4602      	mov	r2, r0
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	1ad3      	subs	r3, r2, r3
 80066b0:	2b02      	cmp	r3, #2
 80066b2:	d901      	bls.n	80066b8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80066b4:	2303      	movs	r3, #3
 80066b6:	e006      	b.n	80066c6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80066b8:	4b05      	ldr	r3, [pc, #20]	; (80066d0 <RCCEx_PLL2_Config+0x15c>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d0f0      	beq.n	80066a6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80066c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3710      	adds	r7, #16
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	58024400 	.word	0x58024400
 80066d4:	ffff0007 	.word	0xffff0007

080066d8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80066e2:	2300      	movs	r3, #0
 80066e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80066e6:	4b53      	ldr	r3, [pc, #332]	; (8006834 <RCCEx_PLL3_Config+0x15c>)
 80066e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ea:	f003 0303 	and.w	r3, r3, #3
 80066ee:	2b03      	cmp	r3, #3
 80066f0:	d101      	bne.n	80066f6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	e099      	b.n	800682a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80066f6:	4b4f      	ldr	r3, [pc, #316]	; (8006834 <RCCEx_PLL3_Config+0x15c>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a4e      	ldr	r2, [pc, #312]	; (8006834 <RCCEx_PLL3_Config+0x15c>)
 80066fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006700:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006702:	f7fa fffd 	bl	8001700 <HAL_GetTick>
 8006706:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006708:	e008      	b.n	800671c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800670a:	f7fa fff9 	bl	8001700 <HAL_GetTick>
 800670e:	4602      	mov	r2, r0
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	1ad3      	subs	r3, r2, r3
 8006714:	2b02      	cmp	r3, #2
 8006716:	d901      	bls.n	800671c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006718:	2303      	movs	r3, #3
 800671a:	e086      	b.n	800682a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800671c:	4b45      	ldr	r3, [pc, #276]	; (8006834 <RCCEx_PLL3_Config+0x15c>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006724:	2b00      	cmp	r3, #0
 8006726:	d1f0      	bne.n	800670a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006728:	4b42      	ldr	r3, [pc, #264]	; (8006834 <RCCEx_PLL3_Config+0x15c>)
 800672a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800672c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	051b      	lsls	r3, r3, #20
 8006736:	493f      	ldr	r1, [pc, #252]	; (8006834 <RCCEx_PLL3_Config+0x15c>)
 8006738:	4313      	orrs	r3, r2
 800673a:	628b      	str	r3, [r1, #40]	; 0x28
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	3b01      	subs	r3, #1
 8006742:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	3b01      	subs	r3, #1
 800674c:	025b      	lsls	r3, r3, #9
 800674e:	b29b      	uxth	r3, r3
 8006750:	431a      	orrs	r2, r3
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	3b01      	subs	r3, #1
 8006758:	041b      	lsls	r3, r3, #16
 800675a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800675e:	431a      	orrs	r2, r3
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	3b01      	subs	r3, #1
 8006766:	061b      	lsls	r3, r3, #24
 8006768:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800676c:	4931      	ldr	r1, [pc, #196]	; (8006834 <RCCEx_PLL3_Config+0x15c>)
 800676e:	4313      	orrs	r3, r2
 8006770:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006772:	4b30      	ldr	r3, [pc, #192]	; (8006834 <RCCEx_PLL3_Config+0x15c>)
 8006774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006776:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	695b      	ldr	r3, [r3, #20]
 800677e:	492d      	ldr	r1, [pc, #180]	; (8006834 <RCCEx_PLL3_Config+0x15c>)
 8006780:	4313      	orrs	r3, r2
 8006782:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006784:	4b2b      	ldr	r3, [pc, #172]	; (8006834 <RCCEx_PLL3_Config+0x15c>)
 8006786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006788:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	699b      	ldr	r3, [r3, #24]
 8006790:	4928      	ldr	r1, [pc, #160]	; (8006834 <RCCEx_PLL3_Config+0x15c>)
 8006792:	4313      	orrs	r3, r2
 8006794:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006796:	4b27      	ldr	r3, [pc, #156]	; (8006834 <RCCEx_PLL3_Config+0x15c>)
 8006798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800679a:	4a26      	ldr	r2, [pc, #152]	; (8006834 <RCCEx_PLL3_Config+0x15c>)
 800679c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80067a2:	4b24      	ldr	r3, [pc, #144]	; (8006834 <RCCEx_PLL3_Config+0x15c>)
 80067a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067a6:	4b24      	ldr	r3, [pc, #144]	; (8006838 <RCCEx_PLL3_Config+0x160>)
 80067a8:	4013      	ands	r3, r2
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	69d2      	ldr	r2, [r2, #28]
 80067ae:	00d2      	lsls	r2, r2, #3
 80067b0:	4920      	ldr	r1, [pc, #128]	; (8006834 <RCCEx_PLL3_Config+0x15c>)
 80067b2:	4313      	orrs	r3, r2
 80067b4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80067b6:	4b1f      	ldr	r3, [pc, #124]	; (8006834 <RCCEx_PLL3_Config+0x15c>)
 80067b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ba:	4a1e      	ldr	r2, [pc, #120]	; (8006834 <RCCEx_PLL3_Config+0x15c>)
 80067bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d106      	bne.n	80067d6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80067c8:	4b1a      	ldr	r3, [pc, #104]	; (8006834 <RCCEx_PLL3_Config+0x15c>)
 80067ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067cc:	4a19      	ldr	r2, [pc, #100]	; (8006834 <RCCEx_PLL3_Config+0x15c>)
 80067ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80067d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80067d4:	e00f      	b.n	80067f6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d106      	bne.n	80067ea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80067dc:	4b15      	ldr	r3, [pc, #84]	; (8006834 <RCCEx_PLL3_Config+0x15c>)
 80067de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e0:	4a14      	ldr	r2, [pc, #80]	; (8006834 <RCCEx_PLL3_Config+0x15c>)
 80067e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80067e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80067e8:	e005      	b.n	80067f6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80067ea:	4b12      	ldr	r3, [pc, #72]	; (8006834 <RCCEx_PLL3_Config+0x15c>)
 80067ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ee:	4a11      	ldr	r2, [pc, #68]	; (8006834 <RCCEx_PLL3_Config+0x15c>)
 80067f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80067f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80067f6:	4b0f      	ldr	r3, [pc, #60]	; (8006834 <RCCEx_PLL3_Config+0x15c>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a0e      	ldr	r2, [pc, #56]	; (8006834 <RCCEx_PLL3_Config+0x15c>)
 80067fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006800:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006802:	f7fa ff7d 	bl	8001700 <HAL_GetTick>
 8006806:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006808:	e008      	b.n	800681c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800680a:	f7fa ff79 	bl	8001700 <HAL_GetTick>
 800680e:	4602      	mov	r2, r0
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	1ad3      	subs	r3, r2, r3
 8006814:	2b02      	cmp	r3, #2
 8006816:	d901      	bls.n	800681c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006818:	2303      	movs	r3, #3
 800681a:	e006      	b.n	800682a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800681c:	4b05      	ldr	r3, [pc, #20]	; (8006834 <RCCEx_PLL3_Config+0x15c>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006824:	2b00      	cmp	r3, #0
 8006826:	d0f0      	beq.n	800680a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006828:	7bfb      	ldrb	r3, [r7, #15]
}
 800682a:	4618      	mov	r0, r3
 800682c:	3710      	adds	r7, #16
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
 8006832:	bf00      	nop
 8006834:	58024400 	.word	0x58024400
 8006838:	ffff0007 	.word	0xffff0007

0800683c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d06a      	beq.n	8006924 <HAL_RTC_Init+0xe8>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006854:	b2db      	uxtb	r3, r3
 8006856:	2b00      	cmp	r3, #0
 8006858:	d106      	bne.n	8006868 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2200      	movs	r2, #0
 800685e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f7fa fd7e 	bl	8001364 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2202      	movs	r2, #2
 800686c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	22ca      	movs	r2, #202	; 0xca
 8006876:	625a      	str	r2, [r3, #36]	; 0x24
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	2253      	movs	r2, #83	; 0x53
 800687e:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 f87d 	bl	8006980 <RTC_EnterInitMode>
 8006886:	4603      	mov	r3, r0
 8006888:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800688a:	7bfb      	ldrb	r3, [r7, #15]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d13e      	bne.n	800690e <HAL_RTC_Init+0xd2>
    {
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	6999      	ldr	r1, [r3, #24]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	4b25      	ldr	r3, [pc, #148]	; (8006930 <HAL_RTC_Init+0xf4>)
 800689c:	400b      	ands	r3, r1
 800689e:	6193      	str	r3, [r2, #24]
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	6999      	ldr	r1, [r3, #24]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	685a      	ldr	r2, [r3, #4]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	691b      	ldr	r3, [r3, #16]
 80068ae:	431a      	orrs	r2, r3
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	699b      	ldr	r3, [r3, #24]
 80068b4:	431a      	orrs	r2, r3
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	430a      	orrs	r2, r1
 80068bc:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	0419      	lsls	r1, r3, #16
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	68da      	ldr	r2, [r3, #12]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	430a      	orrs	r2, r1
 80068ce:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 f88b 	bl	80069ec <RTC_ExitInitMode>
 80068d6:	4603      	mov	r3, r0
 80068d8:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 80068da:	7bfb      	ldrb	r3, [r7, #15]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d116      	bne.n	800690e <HAL_RTC_Init+0xd2>
      {
#if defined(RTC_CR_TAMPALRM_PU) && defined(RTC_CR_TAMPALRM_TYPE) && defined(RTC_CR_OUT2EN)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	699a      	ldr	r2, [r3, #24]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 80068ee:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	6999      	ldr	r1, [r3, #24]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6a1a      	ldr	r2, [r3, #32]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	69db      	ldr	r3, [r3, #28]
 80068fe:	431a      	orrs	r2, r3
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	695b      	ldr	r3, [r3, #20]
 8006904:	431a      	orrs	r2, r3
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	430a      	orrs	r2, r1
 800690c:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	22ff      	movs	r2, #255	; 0xff
 8006914:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8006916:	7bfb      	ldrb	r3, [r7, #15]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d103      	bne.n	8006924 <HAL_RTC_Init+0xe8>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  /* return status */
  return status;
 8006924:	7bfb      	ldrb	r3, [r7, #15]
}
 8006926:	4618      	mov	r0, r3
 8006928:	3710      	adds	r7, #16
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
 800692e:	bf00      	nop
 8006930:	fb8fffbf 	.word	0xfb8fffbf

08006934 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	68da      	ldr	r2, [r3, #12]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800694a:	60da      	str	r2, [r3, #12]
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 800694c:	f7fa fed8 	bl	8001700 <HAL_GetTick>
 8006950:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8006952:	e009      	b.n	8006968 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006954:	f7fa fed4 	bl	8001700 <HAL_GetTick>
 8006958:	4602      	mov	r2, r0
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006962:	d901      	bls.n	8006968 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 8006964:	2303      	movs	r3, #3
 8006966:	e007      	b.n	8006978 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	68db      	ldr	r3, [r3, #12]
 800696e:	f003 0320 	and.w	r3, r3, #32
 8006972:	2b00      	cmp	r3, #0
 8006974:	d0ee      	beq.n	8006954 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 8006976:	2300      	movs	r3, #0
}
 8006978:	4618      	mov	r0, r3
 800697a:	3710      	adds	r7, #16
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}

08006980 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006988:	2300      	movs	r3, #0
 800698a:	73fb      	strb	r3, [r7, #15]
  /* Check if the Initialization mode is set */
#if defined(RTC_ICSR_INITF)
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006996:	2b00      	cmp	r3, #0
 8006998:	d123      	bne.n	80069e2 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	68da      	ldr	r2, [r3, #12]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80069a8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80069aa:	f7fa fea9 	bl	8001700 <HAL_GetTick>
 80069ae:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80069b0:	e00d      	b.n	80069ce <RTC_EnterInitMode+0x4e>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80069b2:	f7fa fea5 	bl	8001700 <HAL_GetTick>
 80069b6:	4602      	mov	r2, r0
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	1ad3      	subs	r3, r2, r3
 80069bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069c0:	d905      	bls.n	80069ce <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 80069c2:	2303      	movs	r3, #3
 80069c4:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2203      	movs	r2, #3
 80069ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d102      	bne.n	80069e2 <RTC_EnterInitMode+0x62>
 80069dc:	7bfb      	ldrb	r3, [r7, #15]
 80069de:	2b03      	cmp	r3, #3
 80069e0:	d1e7      	bne.n	80069b2 <RTC_EnterInitMode+0x32>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 80069e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3710      	adds	r7, #16
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}

080069ec <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b084      	sub	sp, #16
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069f4:	2300      	movs	r3, #0
 80069f6:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
#if defined(RTC_ICSR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80069f8:	4b1a      	ldr	r3, [pc, #104]	; (8006a64 <RTC_ExitInitMode+0x78>)
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	4a19      	ldr	r2, [pc, #100]	; (8006a64 <RTC_ExitInitMode+0x78>)
 80069fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a02:	60d3      	str	r3, [r2, #12]
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006a04:	4b17      	ldr	r3, [pc, #92]	; (8006a64 <RTC_ExitInitMode+0x78>)
 8006a06:	699b      	ldr	r3, [r3, #24]
 8006a08:	f003 0320 	and.w	r3, r3, #32
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d10c      	bne.n	8006a2a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f7ff ff8f 	bl	8006934 <HAL_RTC_WaitForSynchro>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d01e      	beq.n	8006a5a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2203      	movs	r2, #3
 8006a20:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8006a24:	2303      	movs	r3, #3
 8006a26:	73fb      	strb	r3, [r7, #15]
 8006a28:	e017      	b.n	8006a5a <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006a2a:	4b0e      	ldr	r3, [pc, #56]	; (8006a64 <RTC_ExitInitMode+0x78>)
 8006a2c:	699b      	ldr	r3, [r3, #24]
 8006a2e:	4a0d      	ldr	r2, [pc, #52]	; (8006a64 <RTC_ExitInitMode+0x78>)
 8006a30:	f023 0320 	bic.w	r3, r3, #32
 8006a34:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f7ff ff7c 	bl	8006934 <HAL_RTC_WaitForSynchro>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d005      	beq.n	8006a4e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2203      	movs	r2, #3
 8006a46:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8006a4a:	2303      	movs	r3, #3
 8006a4c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006a4e:	4b05      	ldr	r3, [pc, #20]	; (8006a64 <RTC_ExitInitMode+0x78>)
 8006a50:	699b      	ldr	r3, [r3, #24]
 8006a52:	4a04      	ldr	r2, [pc, #16]	; (8006a64 <RTC_ExitInitMode+0x78>)
 8006a54:	f043 0320 	orr.w	r3, r3, #32
 8006a58:	6193      	str	r3, [r2, #24]
  }

  return status;
 8006a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3710      	adds	r7, #16
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}
 8006a64:	58004000 	.word	0x58004000

08006a68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b082      	sub	sp, #8
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d101      	bne.n	8006a7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e049      	b.n	8006b0e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d106      	bne.n	8006a94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 f841 	bl	8006b16 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2202      	movs	r2, #2
 8006a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	3304      	adds	r3, #4
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	4610      	mov	r0, r2
 8006aa8:	f000 fa00 	bl	8006eac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b0c:	2300      	movs	r3, #0
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3708      	adds	r7, #8
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}

08006b16 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006b16:	b480      	push	{r7}
 8006b18:	b083      	sub	sp, #12
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006b1e:	bf00      	nop
 8006b20:	370c      	adds	r7, #12
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr
	...

08006b2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b085      	sub	sp, #20
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d001      	beq.n	8006b44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	e054      	b.n	8006bee <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2202      	movs	r2, #2
 8006b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	68da      	ldr	r2, [r3, #12]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f042 0201 	orr.w	r2, r2, #1
 8006b5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a26      	ldr	r2, [pc, #152]	; (8006bfc <HAL_TIM_Base_Start_IT+0xd0>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d022      	beq.n	8006bac <HAL_TIM_Base_Start_IT+0x80>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b6e:	d01d      	beq.n	8006bac <HAL_TIM_Base_Start_IT+0x80>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a22      	ldr	r2, [pc, #136]	; (8006c00 <HAL_TIM_Base_Start_IT+0xd4>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d018      	beq.n	8006bac <HAL_TIM_Base_Start_IT+0x80>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a21      	ldr	r2, [pc, #132]	; (8006c04 <HAL_TIM_Base_Start_IT+0xd8>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d013      	beq.n	8006bac <HAL_TIM_Base_Start_IT+0x80>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a1f      	ldr	r2, [pc, #124]	; (8006c08 <HAL_TIM_Base_Start_IT+0xdc>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d00e      	beq.n	8006bac <HAL_TIM_Base_Start_IT+0x80>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a1e      	ldr	r2, [pc, #120]	; (8006c0c <HAL_TIM_Base_Start_IT+0xe0>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d009      	beq.n	8006bac <HAL_TIM_Base_Start_IT+0x80>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a1c      	ldr	r2, [pc, #112]	; (8006c10 <HAL_TIM_Base_Start_IT+0xe4>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d004      	beq.n	8006bac <HAL_TIM_Base_Start_IT+0x80>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a1b      	ldr	r2, [pc, #108]	; (8006c14 <HAL_TIM_Base_Start_IT+0xe8>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d115      	bne.n	8006bd8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	689a      	ldr	r2, [r3, #8]
 8006bb2:	4b19      	ldr	r3, [pc, #100]	; (8006c18 <HAL_TIM_Base_Start_IT+0xec>)
 8006bb4:	4013      	ands	r3, r2
 8006bb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2b06      	cmp	r3, #6
 8006bbc:	d015      	beq.n	8006bea <HAL_TIM_Base_Start_IT+0xbe>
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bc4:	d011      	beq.n	8006bea <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f042 0201 	orr.w	r2, r2, #1
 8006bd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bd6:	e008      	b.n	8006bea <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f042 0201 	orr.w	r2, r2, #1
 8006be6:	601a      	str	r2, [r3, #0]
 8006be8:	e000      	b.n	8006bec <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006bec:	2300      	movs	r3, #0
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3714      	adds	r7, #20
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr
 8006bfa:	bf00      	nop
 8006bfc:	40010000 	.word	0x40010000
 8006c00:	40000400 	.word	0x40000400
 8006c04:	40000800 	.word	0x40000800
 8006c08:	40000c00 	.word	0x40000c00
 8006c0c:	40010400 	.word	0x40010400
 8006c10:	40001800 	.word	0x40001800
 8006c14:	40014000 	.word	0x40014000
 8006c18:	00010007 	.word	0x00010007

08006c1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b082      	sub	sp, #8
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	f003 0302 	and.w	r3, r3, #2
 8006c2e:	2b02      	cmp	r3, #2
 8006c30:	d122      	bne.n	8006c78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	f003 0302 	and.w	r3, r3, #2
 8006c3c:	2b02      	cmp	r3, #2
 8006c3e:	d11b      	bne.n	8006c78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f06f 0202 	mvn.w	r2, #2
 8006c48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	699b      	ldr	r3, [r3, #24]
 8006c56:	f003 0303 	and.w	r3, r3, #3
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d003      	beq.n	8006c66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 f905 	bl	8006e6e <HAL_TIM_IC_CaptureCallback>
 8006c64:	e005      	b.n	8006c72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 f8f7 	bl	8006e5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 f908 	bl	8006e82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2200      	movs	r2, #0
 8006c76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	f003 0304 	and.w	r3, r3, #4
 8006c82:	2b04      	cmp	r3, #4
 8006c84:	d122      	bne.n	8006ccc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	f003 0304 	and.w	r3, r3, #4
 8006c90:	2b04      	cmp	r3, #4
 8006c92:	d11b      	bne.n	8006ccc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f06f 0204 	mvn.w	r2, #4
 8006c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2202      	movs	r2, #2
 8006ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	699b      	ldr	r3, [r3, #24]
 8006caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d003      	beq.n	8006cba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 f8db 	bl	8006e6e <HAL_TIM_IC_CaptureCallback>
 8006cb8:	e005      	b.n	8006cc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 f8cd 	bl	8006e5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f000 f8de 	bl	8006e82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	691b      	ldr	r3, [r3, #16]
 8006cd2:	f003 0308 	and.w	r3, r3, #8
 8006cd6:	2b08      	cmp	r3, #8
 8006cd8:	d122      	bne.n	8006d20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	f003 0308 	and.w	r3, r3, #8
 8006ce4:	2b08      	cmp	r3, #8
 8006ce6:	d11b      	bne.n	8006d20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f06f 0208 	mvn.w	r2, #8
 8006cf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2204      	movs	r2, #4
 8006cf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	69db      	ldr	r3, [r3, #28]
 8006cfe:	f003 0303 	and.w	r3, r3, #3
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d003      	beq.n	8006d0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 f8b1 	bl	8006e6e <HAL_TIM_IC_CaptureCallback>
 8006d0c:	e005      	b.n	8006d1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 f8a3 	bl	8006e5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 f8b4 	bl	8006e82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	691b      	ldr	r3, [r3, #16]
 8006d26:	f003 0310 	and.w	r3, r3, #16
 8006d2a:	2b10      	cmp	r3, #16
 8006d2c:	d122      	bne.n	8006d74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	f003 0310 	and.w	r3, r3, #16
 8006d38:	2b10      	cmp	r3, #16
 8006d3a:	d11b      	bne.n	8006d74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f06f 0210 	mvn.w	r2, #16
 8006d44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2208      	movs	r2, #8
 8006d4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	69db      	ldr	r3, [r3, #28]
 8006d52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d003      	beq.n	8006d62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 f887 	bl	8006e6e <HAL_TIM_IC_CaptureCallback>
 8006d60:	e005      	b.n	8006d6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 f879 	bl	8006e5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 f88a 	bl	8006e82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2200      	movs	r2, #0
 8006d72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	691b      	ldr	r3, [r3, #16]
 8006d7a:	f003 0301 	and.w	r3, r3, #1
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d10e      	bne.n	8006da0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	f003 0301 	and.w	r3, r3, #1
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d107      	bne.n	8006da0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f06f 0201 	mvn.w	r2, #1
 8006d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f7f9 ffe8 	bl	8000d70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006daa:	2b80      	cmp	r3, #128	; 0x80
 8006dac:	d10e      	bne.n	8006dcc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006db8:	2b80      	cmp	r3, #128	; 0x80
 8006dba:	d107      	bne.n	8006dcc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006dc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 f914 	bl	8006ff4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	691b      	ldr	r3, [r3, #16]
 8006dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dda:	d10e      	bne.n	8006dfa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	68db      	ldr	r3, [r3, #12]
 8006de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006de6:	2b80      	cmp	r3, #128	; 0x80
 8006de8:	d107      	bne.n	8006dfa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006df2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f000 f907 	bl	8007008 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	691b      	ldr	r3, [r3, #16]
 8006e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e04:	2b40      	cmp	r3, #64	; 0x40
 8006e06:	d10e      	bne.n	8006e26 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e12:	2b40      	cmp	r3, #64	; 0x40
 8006e14:	d107      	bne.n	8006e26 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006e1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 f838 	bl	8006e96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	691b      	ldr	r3, [r3, #16]
 8006e2c:	f003 0320 	and.w	r3, r3, #32
 8006e30:	2b20      	cmp	r3, #32
 8006e32:	d10e      	bne.n	8006e52 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	68db      	ldr	r3, [r3, #12]
 8006e3a:	f003 0320 	and.w	r3, r3, #32
 8006e3e:	2b20      	cmp	r3, #32
 8006e40:	d107      	bne.n	8006e52 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f06f 0220 	mvn.w	r2, #32
 8006e4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f000 f8c7 	bl	8006fe0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e52:	bf00      	nop
 8006e54:	3708      	adds	r7, #8
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}

08006e5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e5a:	b480      	push	{r7}
 8006e5c:	b083      	sub	sp, #12
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e62:	bf00      	nop
 8006e64:	370c      	adds	r7, #12
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr

08006e6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e6e:	b480      	push	{r7}
 8006e70:	b083      	sub	sp, #12
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e76:	bf00      	nop
 8006e78:	370c      	adds	r7, #12
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr

08006e82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e82:	b480      	push	{r7}
 8006e84:	b083      	sub	sp, #12
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e8a:	bf00      	nop
 8006e8c:	370c      	adds	r7, #12
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr

08006e96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e96:	b480      	push	{r7}
 8006e98:	b083      	sub	sp, #12
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e9e:	bf00      	nop
 8006ea0:	370c      	adds	r7, #12
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr
	...

08006eac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b085      	sub	sp, #20
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	4a40      	ldr	r2, [pc, #256]	; (8006fc0 <TIM_Base_SetConfig+0x114>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d013      	beq.n	8006eec <TIM_Base_SetConfig+0x40>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eca:	d00f      	beq.n	8006eec <TIM_Base_SetConfig+0x40>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	4a3d      	ldr	r2, [pc, #244]	; (8006fc4 <TIM_Base_SetConfig+0x118>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d00b      	beq.n	8006eec <TIM_Base_SetConfig+0x40>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	4a3c      	ldr	r2, [pc, #240]	; (8006fc8 <TIM_Base_SetConfig+0x11c>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d007      	beq.n	8006eec <TIM_Base_SetConfig+0x40>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	4a3b      	ldr	r2, [pc, #236]	; (8006fcc <TIM_Base_SetConfig+0x120>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d003      	beq.n	8006eec <TIM_Base_SetConfig+0x40>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	4a3a      	ldr	r2, [pc, #232]	; (8006fd0 <TIM_Base_SetConfig+0x124>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d108      	bne.n	8006efe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ef2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	68fa      	ldr	r2, [r7, #12]
 8006efa:	4313      	orrs	r3, r2
 8006efc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	4a2f      	ldr	r2, [pc, #188]	; (8006fc0 <TIM_Base_SetConfig+0x114>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d01f      	beq.n	8006f46 <TIM_Base_SetConfig+0x9a>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f0c:	d01b      	beq.n	8006f46 <TIM_Base_SetConfig+0x9a>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4a2c      	ldr	r2, [pc, #176]	; (8006fc4 <TIM_Base_SetConfig+0x118>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d017      	beq.n	8006f46 <TIM_Base_SetConfig+0x9a>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	4a2b      	ldr	r2, [pc, #172]	; (8006fc8 <TIM_Base_SetConfig+0x11c>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d013      	beq.n	8006f46 <TIM_Base_SetConfig+0x9a>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	4a2a      	ldr	r2, [pc, #168]	; (8006fcc <TIM_Base_SetConfig+0x120>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d00f      	beq.n	8006f46 <TIM_Base_SetConfig+0x9a>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	4a29      	ldr	r2, [pc, #164]	; (8006fd0 <TIM_Base_SetConfig+0x124>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d00b      	beq.n	8006f46 <TIM_Base_SetConfig+0x9a>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	4a28      	ldr	r2, [pc, #160]	; (8006fd4 <TIM_Base_SetConfig+0x128>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d007      	beq.n	8006f46 <TIM_Base_SetConfig+0x9a>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	4a27      	ldr	r2, [pc, #156]	; (8006fd8 <TIM_Base_SetConfig+0x12c>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d003      	beq.n	8006f46 <TIM_Base_SetConfig+0x9a>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	4a26      	ldr	r2, [pc, #152]	; (8006fdc <TIM_Base_SetConfig+0x130>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d108      	bne.n	8006f58 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	68db      	ldr	r3, [r3, #12]
 8006f52:	68fa      	ldr	r2, [r7, #12]
 8006f54:	4313      	orrs	r3, r2
 8006f56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	695b      	ldr	r3, [r3, #20]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	68fa      	ldr	r2, [r7, #12]
 8006f6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	689a      	ldr	r2, [r3, #8]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	4a10      	ldr	r2, [pc, #64]	; (8006fc0 <TIM_Base_SetConfig+0x114>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d00f      	beq.n	8006fa4 <TIM_Base_SetConfig+0xf8>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	4a12      	ldr	r2, [pc, #72]	; (8006fd0 <TIM_Base_SetConfig+0x124>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d00b      	beq.n	8006fa4 <TIM_Base_SetConfig+0xf8>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	4a11      	ldr	r2, [pc, #68]	; (8006fd4 <TIM_Base_SetConfig+0x128>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d007      	beq.n	8006fa4 <TIM_Base_SetConfig+0xf8>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	4a10      	ldr	r2, [pc, #64]	; (8006fd8 <TIM_Base_SetConfig+0x12c>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d003      	beq.n	8006fa4 <TIM_Base_SetConfig+0xf8>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	4a0f      	ldr	r2, [pc, #60]	; (8006fdc <TIM_Base_SetConfig+0x130>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d103      	bne.n	8006fac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	691a      	ldr	r2, [r3, #16]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	615a      	str	r2, [r3, #20]
}
 8006fb2:	bf00      	nop
 8006fb4:	3714      	adds	r7, #20
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr
 8006fbe:	bf00      	nop
 8006fc0:	40010000 	.word	0x40010000
 8006fc4:	40000400 	.word	0x40000400
 8006fc8:	40000800 	.word	0x40000800
 8006fcc:	40000c00 	.word	0x40000c00
 8006fd0:	40010400 	.word	0x40010400
 8006fd4:	40014000 	.word	0x40014000
 8006fd8:	40014400 	.word	0x40014400
 8006fdc:	40014800 	.word	0x40014800

08006fe0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006fe8:	bf00      	nop
 8006fea:	370c      	adds	r7, #12
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ffc:	bf00      	nop
 8006ffe:	370c      	adds	r7, #12
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr

08007008 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007008:	b480      	push	{r7}
 800700a:	b083      	sub	sp, #12
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007010:	bf00      	nop
 8007012:	370c      	adds	r7, #12
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr

0800701c <__libc_init_array>:
 800701c:	b570      	push	{r4, r5, r6, lr}
 800701e:	4d0d      	ldr	r5, [pc, #52]	; (8007054 <__libc_init_array+0x38>)
 8007020:	4c0d      	ldr	r4, [pc, #52]	; (8007058 <__libc_init_array+0x3c>)
 8007022:	1b64      	subs	r4, r4, r5
 8007024:	10a4      	asrs	r4, r4, #2
 8007026:	2600      	movs	r6, #0
 8007028:	42a6      	cmp	r6, r4
 800702a:	d109      	bne.n	8007040 <__libc_init_array+0x24>
 800702c:	4d0b      	ldr	r5, [pc, #44]	; (800705c <__libc_init_array+0x40>)
 800702e:	4c0c      	ldr	r4, [pc, #48]	; (8007060 <__libc_init_array+0x44>)
 8007030:	f000 f82e 	bl	8007090 <_init>
 8007034:	1b64      	subs	r4, r4, r5
 8007036:	10a4      	asrs	r4, r4, #2
 8007038:	2600      	movs	r6, #0
 800703a:	42a6      	cmp	r6, r4
 800703c:	d105      	bne.n	800704a <__libc_init_array+0x2e>
 800703e:	bd70      	pop	{r4, r5, r6, pc}
 8007040:	f855 3b04 	ldr.w	r3, [r5], #4
 8007044:	4798      	blx	r3
 8007046:	3601      	adds	r6, #1
 8007048:	e7ee      	b.n	8007028 <__libc_init_array+0xc>
 800704a:	f855 3b04 	ldr.w	r3, [r5], #4
 800704e:	4798      	blx	r3
 8007050:	3601      	adds	r6, #1
 8007052:	e7f2      	b.n	800703a <__libc_init_array+0x1e>
 8007054:	08007114 	.word	0x08007114
 8007058:	08007114 	.word	0x08007114
 800705c:	08007114 	.word	0x08007114
 8007060:	08007118 	.word	0x08007118

08007064 <memcpy>:
 8007064:	440a      	add	r2, r1
 8007066:	4291      	cmp	r1, r2
 8007068:	f100 33ff 	add.w	r3, r0, #4294967295
 800706c:	d100      	bne.n	8007070 <memcpy+0xc>
 800706e:	4770      	bx	lr
 8007070:	b510      	push	{r4, lr}
 8007072:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007076:	f803 4f01 	strb.w	r4, [r3, #1]!
 800707a:	4291      	cmp	r1, r2
 800707c:	d1f9      	bne.n	8007072 <memcpy+0xe>
 800707e:	bd10      	pop	{r4, pc}

08007080 <memset>:
 8007080:	4402      	add	r2, r0
 8007082:	4603      	mov	r3, r0
 8007084:	4293      	cmp	r3, r2
 8007086:	d100      	bne.n	800708a <memset+0xa>
 8007088:	4770      	bx	lr
 800708a:	f803 1b01 	strb.w	r1, [r3], #1
 800708e:	e7f9      	b.n	8007084 <memset+0x4>

08007090 <_init>:
 8007090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007092:	bf00      	nop
 8007094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007096:	bc08      	pop	{r3}
 8007098:	469e      	mov	lr, r3
 800709a:	4770      	bx	lr

0800709c <_fini>:
 800709c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800709e:	bf00      	nop
 80070a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070a2:	bc08      	pop	{r3}
 80070a4:	469e      	mov	lr, r3
 80070a6:	4770      	bx	lr
